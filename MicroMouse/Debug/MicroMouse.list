
MicroMouse.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006dd8  080001d8  080001d8  000011d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000040  08006fb0  08006fb0  00007fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006ff0  08006ff0  0000802c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08006ff0  08006ff0  00007ff0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ff8  08006ff8  0000802c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ff8  08006ff8  00007ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006ffc  08006ffc  00007ffc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000002c  20000000  08007000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000438  2000002c  0800702c  0000802c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000464  0800702c  00008464  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000802c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001b4e7  00000000  00000000  0000805c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000036fc  00000000  00000000  00023543  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001650  00000000  00000000  00026c40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001146  00000000  00000000  00028290  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00021b64  00000000  00000000  000293d6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001af1b  00000000  00000000  0004af3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000dc4e4  00000000  00000000  00065e55  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00142339  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005e7c  00000000  00000000  0014237c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004d  00000000  00000000  001481f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d8 <__do_global_dtors_aux>:
 80001d8:	b510      	push	{r4, lr}
 80001da:	4c05      	ldr	r4, [pc, #20]	@ (80001f0 <__do_global_dtors_aux+0x18>)
 80001dc:	7823      	ldrb	r3, [r4, #0]
 80001de:	b933      	cbnz	r3, 80001ee <__do_global_dtors_aux+0x16>
 80001e0:	4b04      	ldr	r3, [pc, #16]	@ (80001f4 <__do_global_dtors_aux+0x1c>)
 80001e2:	b113      	cbz	r3, 80001ea <__do_global_dtors_aux+0x12>
 80001e4:	4804      	ldr	r0, [pc, #16]	@ (80001f8 <__do_global_dtors_aux+0x20>)
 80001e6:	f3af 8000 	nop.w
 80001ea:	2301      	movs	r3, #1
 80001ec:	7023      	strb	r3, [r4, #0]
 80001ee:	bd10      	pop	{r4, pc}
 80001f0:	2000002c 	.word	0x2000002c
 80001f4:	00000000 	.word	0x00000000
 80001f8:	08006f98 	.word	0x08006f98

080001fc <frame_dummy>:
 80001fc:	b508      	push	{r3, lr}
 80001fe:	4b03      	ldr	r3, [pc, #12]	@ (800020c <frame_dummy+0x10>)
 8000200:	b11b      	cbz	r3, 800020a <frame_dummy+0xe>
 8000202:	4903      	ldr	r1, [pc, #12]	@ (8000210 <frame_dummy+0x14>)
 8000204:	4803      	ldr	r0, [pc, #12]	@ (8000214 <frame_dummy+0x18>)
 8000206:	f3af 8000 	nop.w
 800020a:	bd08      	pop	{r3, pc}
 800020c:	00000000 	.word	0x00000000
 8000210:	20000030 	.word	0x20000030
 8000214:	08006f98 	.word	0x08006f98

08000218 <__aeabi_uldivmod>:
 8000218:	b953      	cbnz	r3, 8000230 <__aeabi_uldivmod+0x18>
 800021a:	b94a      	cbnz	r2, 8000230 <__aeabi_uldivmod+0x18>
 800021c:	2900      	cmp	r1, #0
 800021e:	bf08      	it	eq
 8000220:	2800      	cmpeq	r0, #0
 8000222:	bf1c      	itt	ne
 8000224:	f04f 31ff 	movne.w	r1, #4294967295
 8000228:	f04f 30ff 	movne.w	r0, #4294967295
 800022c:	f000 b988 	b.w	8000540 <__aeabi_idiv0>
 8000230:	f1ad 0c08 	sub.w	ip, sp, #8
 8000234:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000238:	f000 f806 	bl	8000248 <__udivmoddi4>
 800023c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000240:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000244:	b004      	add	sp, #16
 8000246:	4770      	bx	lr

08000248 <__udivmoddi4>:
 8000248:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800024c:	9d08      	ldr	r5, [sp, #32]
 800024e:	468e      	mov	lr, r1
 8000250:	4604      	mov	r4, r0
 8000252:	4688      	mov	r8, r1
 8000254:	2b00      	cmp	r3, #0
 8000256:	d14a      	bne.n	80002ee <__udivmoddi4+0xa6>
 8000258:	428a      	cmp	r2, r1
 800025a:	4617      	mov	r7, r2
 800025c:	d962      	bls.n	8000324 <__udivmoddi4+0xdc>
 800025e:	fab2 f682 	clz	r6, r2
 8000262:	b14e      	cbz	r6, 8000278 <__udivmoddi4+0x30>
 8000264:	f1c6 0320 	rsb	r3, r6, #32
 8000268:	fa01 f806 	lsl.w	r8, r1, r6
 800026c:	fa20 f303 	lsr.w	r3, r0, r3
 8000270:	40b7      	lsls	r7, r6
 8000272:	ea43 0808 	orr.w	r8, r3, r8
 8000276:	40b4      	lsls	r4, r6
 8000278:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800027c:	fa1f fc87 	uxth.w	ip, r7
 8000280:	fbb8 f1fe 	udiv	r1, r8, lr
 8000284:	0c23      	lsrs	r3, r4, #16
 8000286:	fb0e 8811 	mls	r8, lr, r1, r8
 800028a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800028e:	fb01 f20c 	mul.w	r2, r1, ip
 8000292:	429a      	cmp	r2, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x62>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f101 30ff 	add.w	r0, r1, #4294967295
 800029c:	f080 80ea 	bcs.w	8000474 <__udivmoddi4+0x22c>
 80002a0:	429a      	cmp	r2, r3
 80002a2:	f240 80e7 	bls.w	8000474 <__udivmoddi4+0x22c>
 80002a6:	3902      	subs	r1, #2
 80002a8:	443b      	add	r3, r7
 80002aa:	1a9a      	subs	r2, r3, r2
 80002ac:	b2a3      	uxth	r3, r4
 80002ae:	fbb2 f0fe 	udiv	r0, r2, lr
 80002b2:	fb0e 2210 	mls	r2, lr, r0, r2
 80002b6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80002ba:	fb00 fc0c 	mul.w	ip, r0, ip
 80002be:	459c      	cmp	ip, r3
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0x8e>
 80002c2:	18fb      	adds	r3, r7, r3
 80002c4:	f100 32ff 	add.w	r2, r0, #4294967295
 80002c8:	f080 80d6 	bcs.w	8000478 <__udivmoddi4+0x230>
 80002cc:	459c      	cmp	ip, r3
 80002ce:	f240 80d3 	bls.w	8000478 <__udivmoddi4+0x230>
 80002d2:	443b      	add	r3, r7
 80002d4:	3802      	subs	r0, #2
 80002d6:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002da:	eba3 030c 	sub.w	r3, r3, ip
 80002de:	2100      	movs	r1, #0
 80002e0:	b11d      	cbz	r5, 80002ea <__udivmoddi4+0xa2>
 80002e2:	40f3      	lsrs	r3, r6
 80002e4:	2200      	movs	r2, #0
 80002e6:	e9c5 3200 	strd	r3, r2, [r5]
 80002ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d905      	bls.n	80002fe <__udivmoddi4+0xb6>
 80002f2:	b10d      	cbz	r5, 80002f8 <__udivmoddi4+0xb0>
 80002f4:	e9c5 0100 	strd	r0, r1, [r5]
 80002f8:	2100      	movs	r1, #0
 80002fa:	4608      	mov	r0, r1
 80002fc:	e7f5      	b.n	80002ea <__udivmoddi4+0xa2>
 80002fe:	fab3 f183 	clz	r1, r3
 8000302:	2900      	cmp	r1, #0
 8000304:	d146      	bne.n	8000394 <__udivmoddi4+0x14c>
 8000306:	4573      	cmp	r3, lr
 8000308:	d302      	bcc.n	8000310 <__udivmoddi4+0xc8>
 800030a:	4282      	cmp	r2, r0
 800030c:	f200 8105 	bhi.w	800051a <__udivmoddi4+0x2d2>
 8000310:	1a84      	subs	r4, r0, r2
 8000312:	eb6e 0203 	sbc.w	r2, lr, r3
 8000316:	2001      	movs	r0, #1
 8000318:	4690      	mov	r8, r2
 800031a:	2d00      	cmp	r5, #0
 800031c:	d0e5      	beq.n	80002ea <__udivmoddi4+0xa2>
 800031e:	e9c5 4800 	strd	r4, r8, [r5]
 8000322:	e7e2      	b.n	80002ea <__udivmoddi4+0xa2>
 8000324:	2a00      	cmp	r2, #0
 8000326:	f000 8090 	beq.w	800044a <__udivmoddi4+0x202>
 800032a:	fab2 f682 	clz	r6, r2
 800032e:	2e00      	cmp	r6, #0
 8000330:	f040 80a4 	bne.w	800047c <__udivmoddi4+0x234>
 8000334:	1a8a      	subs	r2, r1, r2
 8000336:	0c03      	lsrs	r3, r0, #16
 8000338:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800033c:	b280      	uxth	r0, r0
 800033e:	b2bc      	uxth	r4, r7
 8000340:	2101      	movs	r1, #1
 8000342:	fbb2 fcfe 	udiv	ip, r2, lr
 8000346:	fb0e 221c 	mls	r2, lr, ip, r2
 800034a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800034e:	fb04 f20c 	mul.w	r2, r4, ip
 8000352:	429a      	cmp	r2, r3
 8000354:	d907      	bls.n	8000366 <__udivmoddi4+0x11e>
 8000356:	18fb      	adds	r3, r7, r3
 8000358:	f10c 38ff 	add.w	r8, ip, #4294967295
 800035c:	d202      	bcs.n	8000364 <__udivmoddi4+0x11c>
 800035e:	429a      	cmp	r2, r3
 8000360:	f200 80e0 	bhi.w	8000524 <__udivmoddi4+0x2dc>
 8000364:	46c4      	mov	ip, r8
 8000366:	1a9b      	subs	r3, r3, r2
 8000368:	fbb3 f2fe 	udiv	r2, r3, lr
 800036c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000370:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000374:	fb02 f404 	mul.w	r4, r2, r4
 8000378:	429c      	cmp	r4, r3
 800037a:	d907      	bls.n	800038c <__udivmoddi4+0x144>
 800037c:	18fb      	adds	r3, r7, r3
 800037e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000382:	d202      	bcs.n	800038a <__udivmoddi4+0x142>
 8000384:	429c      	cmp	r4, r3
 8000386:	f200 80ca 	bhi.w	800051e <__udivmoddi4+0x2d6>
 800038a:	4602      	mov	r2, r0
 800038c:	1b1b      	subs	r3, r3, r4
 800038e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000392:	e7a5      	b.n	80002e0 <__udivmoddi4+0x98>
 8000394:	f1c1 0620 	rsb	r6, r1, #32
 8000398:	408b      	lsls	r3, r1
 800039a:	fa22 f706 	lsr.w	r7, r2, r6
 800039e:	431f      	orrs	r7, r3
 80003a0:	fa0e f401 	lsl.w	r4, lr, r1
 80003a4:	fa20 f306 	lsr.w	r3, r0, r6
 80003a8:	fa2e fe06 	lsr.w	lr, lr, r6
 80003ac:	ea4f 4917 	mov.w	r9, r7, lsr #16
 80003b0:	4323      	orrs	r3, r4
 80003b2:	fa00 f801 	lsl.w	r8, r0, r1
 80003b6:	fa1f fc87 	uxth.w	ip, r7
 80003ba:	fbbe f0f9 	udiv	r0, lr, r9
 80003be:	0c1c      	lsrs	r4, r3, #16
 80003c0:	fb09 ee10 	mls	lr, r9, r0, lr
 80003c4:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80003c8:	fb00 fe0c 	mul.w	lr, r0, ip
 80003cc:	45a6      	cmp	lr, r4
 80003ce:	fa02 f201 	lsl.w	r2, r2, r1
 80003d2:	d909      	bls.n	80003e8 <__udivmoddi4+0x1a0>
 80003d4:	193c      	adds	r4, r7, r4
 80003d6:	f100 3aff 	add.w	sl, r0, #4294967295
 80003da:	f080 809c 	bcs.w	8000516 <__udivmoddi4+0x2ce>
 80003de:	45a6      	cmp	lr, r4
 80003e0:	f240 8099 	bls.w	8000516 <__udivmoddi4+0x2ce>
 80003e4:	3802      	subs	r0, #2
 80003e6:	443c      	add	r4, r7
 80003e8:	eba4 040e 	sub.w	r4, r4, lr
 80003ec:	fa1f fe83 	uxth.w	lr, r3
 80003f0:	fbb4 f3f9 	udiv	r3, r4, r9
 80003f4:	fb09 4413 	mls	r4, r9, r3, r4
 80003f8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003fc:	fb03 fc0c 	mul.w	ip, r3, ip
 8000400:	45a4      	cmp	ip, r4
 8000402:	d908      	bls.n	8000416 <__udivmoddi4+0x1ce>
 8000404:	193c      	adds	r4, r7, r4
 8000406:	f103 3eff 	add.w	lr, r3, #4294967295
 800040a:	f080 8082 	bcs.w	8000512 <__udivmoddi4+0x2ca>
 800040e:	45a4      	cmp	ip, r4
 8000410:	d97f      	bls.n	8000512 <__udivmoddi4+0x2ca>
 8000412:	3b02      	subs	r3, #2
 8000414:	443c      	add	r4, r7
 8000416:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 800041a:	eba4 040c 	sub.w	r4, r4, ip
 800041e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000422:	4564      	cmp	r4, ip
 8000424:	4673      	mov	r3, lr
 8000426:	46e1      	mov	r9, ip
 8000428:	d362      	bcc.n	80004f0 <__udivmoddi4+0x2a8>
 800042a:	d05f      	beq.n	80004ec <__udivmoddi4+0x2a4>
 800042c:	b15d      	cbz	r5, 8000446 <__udivmoddi4+0x1fe>
 800042e:	ebb8 0203 	subs.w	r2, r8, r3
 8000432:	eb64 0409 	sbc.w	r4, r4, r9
 8000436:	fa04 f606 	lsl.w	r6, r4, r6
 800043a:	fa22 f301 	lsr.w	r3, r2, r1
 800043e:	431e      	orrs	r6, r3
 8000440:	40cc      	lsrs	r4, r1
 8000442:	e9c5 6400 	strd	r6, r4, [r5]
 8000446:	2100      	movs	r1, #0
 8000448:	e74f      	b.n	80002ea <__udivmoddi4+0xa2>
 800044a:	fbb1 fcf2 	udiv	ip, r1, r2
 800044e:	0c01      	lsrs	r1, r0, #16
 8000450:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000454:	b280      	uxth	r0, r0
 8000456:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800045a:	463b      	mov	r3, r7
 800045c:	4638      	mov	r0, r7
 800045e:	463c      	mov	r4, r7
 8000460:	46b8      	mov	r8, r7
 8000462:	46be      	mov	lr, r7
 8000464:	2620      	movs	r6, #32
 8000466:	fbb1 f1f7 	udiv	r1, r1, r7
 800046a:	eba2 0208 	sub.w	r2, r2, r8
 800046e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000472:	e766      	b.n	8000342 <__udivmoddi4+0xfa>
 8000474:	4601      	mov	r1, r0
 8000476:	e718      	b.n	80002aa <__udivmoddi4+0x62>
 8000478:	4610      	mov	r0, r2
 800047a:	e72c      	b.n	80002d6 <__udivmoddi4+0x8e>
 800047c:	f1c6 0220 	rsb	r2, r6, #32
 8000480:	fa2e f302 	lsr.w	r3, lr, r2
 8000484:	40b7      	lsls	r7, r6
 8000486:	40b1      	lsls	r1, r6
 8000488:	fa20 f202 	lsr.w	r2, r0, r2
 800048c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000490:	430a      	orrs	r2, r1
 8000492:	fbb3 f8fe 	udiv	r8, r3, lr
 8000496:	b2bc      	uxth	r4, r7
 8000498:	fb0e 3318 	mls	r3, lr, r8, r3
 800049c:	0c11      	lsrs	r1, r2, #16
 800049e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004a2:	fb08 f904 	mul.w	r9, r8, r4
 80004a6:	40b0      	lsls	r0, r6
 80004a8:	4589      	cmp	r9, r1
 80004aa:	ea4f 4310 	mov.w	r3, r0, lsr #16
 80004ae:	b280      	uxth	r0, r0
 80004b0:	d93e      	bls.n	8000530 <__udivmoddi4+0x2e8>
 80004b2:	1879      	adds	r1, r7, r1
 80004b4:	f108 3cff 	add.w	ip, r8, #4294967295
 80004b8:	d201      	bcs.n	80004be <__udivmoddi4+0x276>
 80004ba:	4589      	cmp	r9, r1
 80004bc:	d81f      	bhi.n	80004fe <__udivmoddi4+0x2b6>
 80004be:	eba1 0109 	sub.w	r1, r1, r9
 80004c2:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c6:	fb09 f804 	mul.w	r8, r9, r4
 80004ca:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ce:	b292      	uxth	r2, r2
 80004d0:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004d4:	4542      	cmp	r2, r8
 80004d6:	d229      	bcs.n	800052c <__udivmoddi4+0x2e4>
 80004d8:	18ba      	adds	r2, r7, r2
 80004da:	f109 31ff 	add.w	r1, r9, #4294967295
 80004de:	d2c4      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e0:	4542      	cmp	r2, r8
 80004e2:	d2c2      	bcs.n	800046a <__udivmoddi4+0x222>
 80004e4:	f1a9 0102 	sub.w	r1, r9, #2
 80004e8:	443a      	add	r2, r7
 80004ea:	e7be      	b.n	800046a <__udivmoddi4+0x222>
 80004ec:	45f0      	cmp	r8, lr
 80004ee:	d29d      	bcs.n	800042c <__udivmoddi4+0x1e4>
 80004f0:	ebbe 0302 	subs.w	r3, lr, r2
 80004f4:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004f8:	3801      	subs	r0, #1
 80004fa:	46e1      	mov	r9, ip
 80004fc:	e796      	b.n	800042c <__udivmoddi4+0x1e4>
 80004fe:	eba7 0909 	sub.w	r9, r7, r9
 8000502:	4449      	add	r1, r9
 8000504:	f1a8 0c02 	sub.w	ip, r8, #2
 8000508:	fbb1 f9fe 	udiv	r9, r1, lr
 800050c:	fb09 f804 	mul.w	r8, r9, r4
 8000510:	e7db      	b.n	80004ca <__udivmoddi4+0x282>
 8000512:	4673      	mov	r3, lr
 8000514:	e77f      	b.n	8000416 <__udivmoddi4+0x1ce>
 8000516:	4650      	mov	r0, sl
 8000518:	e766      	b.n	80003e8 <__udivmoddi4+0x1a0>
 800051a:	4608      	mov	r0, r1
 800051c:	e6fd      	b.n	800031a <__udivmoddi4+0xd2>
 800051e:	443b      	add	r3, r7
 8000520:	3a02      	subs	r2, #2
 8000522:	e733      	b.n	800038c <__udivmoddi4+0x144>
 8000524:	f1ac 0c02 	sub.w	ip, ip, #2
 8000528:	443b      	add	r3, r7
 800052a:	e71c      	b.n	8000366 <__udivmoddi4+0x11e>
 800052c:	4649      	mov	r1, r9
 800052e:	e79c      	b.n	800046a <__udivmoddi4+0x222>
 8000530:	eba1 0109 	sub.w	r1, r1, r9
 8000534:	46c4      	mov	ip, r8
 8000536:	fbb1 f9fe 	udiv	r9, r1, lr
 800053a:	fb09 f804 	mul.w	r8, r9, r4
 800053e:	e7c4      	b.n	80004ca <__udivmoddi4+0x282>

08000540 <__aeabi_idiv0>:
 8000540:	4770      	bx	lr
 8000542:	bf00      	nop

08000544 <MX_ADC2_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc2;

/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000544:	b580      	push	{r7, lr}
 8000546:	b088      	sub	sp, #32
 8000548:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800054a:	463b      	mov	r3, r7
 800054c:	2220      	movs	r2, #32
 800054e:	2100      	movs	r1, #0
 8000550:	4618      	mov	r0, r3
 8000552:	f006 fcf5 	bl	8006f40 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 8000556:	4b40      	ldr	r3, [pc, #256]	@ (8000658 <MX_ADC2_Init+0x114>)
 8000558:	4a40      	ldr	r2, [pc, #256]	@ (800065c <MX_ADC2_Init+0x118>)
 800055a:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV32;
 800055c:	4b3e      	ldr	r3, [pc, #248]	@ (8000658 <MX_ADC2_Init+0x114>)
 800055e:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000562:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000564:	4b3c      	ldr	r3, [pc, #240]	@ (8000658 <MX_ADC2_Init+0x114>)
 8000566:	2200      	movs	r2, #0
 8000568:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800056a:	4b3b      	ldr	r3, [pc, #236]	@ (8000658 <MX_ADC2_Init+0x114>)
 800056c:	2200      	movs	r2, #0
 800056e:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000570:	4b39      	ldr	r3, [pc, #228]	@ (8000658 <MX_ADC2_Init+0x114>)
 8000572:	2200      	movs	r2, #0
 8000574:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8000576:	4b38      	ldr	r3, [pc, #224]	@ (8000658 <MX_ADC2_Init+0x114>)
 8000578:	2201      	movs	r2, #1
 800057a:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800057c:	4b36      	ldr	r3, [pc, #216]	@ (8000658 <MX_ADC2_Init+0x114>)
 800057e:	2208      	movs	r2, #8
 8000580:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8000582:	4b35      	ldr	r3, [pc, #212]	@ (8000658 <MX_ADC2_Init+0x114>)
 8000584:	2200      	movs	r2, #0
 8000586:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = ENABLE;
 8000588:	4b33      	ldr	r3, [pc, #204]	@ (8000658 <MX_ADC2_Init+0x114>)
 800058a:	2201      	movs	r2, #1
 800058c:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 4;
 800058e:	4b32      	ldr	r3, [pc, #200]	@ (8000658 <MX_ADC2_Init+0x114>)
 8000590:	2204      	movs	r2, #4
 8000592:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000594:	4b30      	ldr	r3, [pc, #192]	@ (8000658 <MX_ADC2_Init+0x114>)
 8000596:	2200      	movs	r2, #0
 8000598:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800059c:	4b2e      	ldr	r3, [pc, #184]	@ (8000658 <MX_ADC2_Init+0x114>)
 800059e:	2200      	movs	r2, #0
 80005a0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005a2:	4b2d      	ldr	r3, [pc, #180]	@ (8000658 <MX_ADC2_Init+0x114>)
 80005a4:	2200      	movs	r2, #0
 80005a6:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 80005a8:	4b2b      	ldr	r3, [pc, #172]	@ (8000658 <MX_ADC2_Init+0x114>)
 80005aa:	2201      	movs	r2, #1
 80005ac:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80005b0:	4b29      	ldr	r3, [pc, #164]	@ (8000658 <MX_ADC2_Init+0x114>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 80005b6:	4b28      	ldr	r3, [pc, #160]	@ (8000658 <MX_ADC2_Init+0x114>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80005be:	4826      	ldr	r0, [pc, #152]	@ (8000658 <MX_ADC2_Init+0x114>)
 80005c0:	f001 fc62 	bl	8001e88 <HAL_ADC_Init>
 80005c4:	4603      	mov	r3, r0
 80005c6:	2b00      	cmp	r3, #0
 80005c8:	d001      	beq.n	80005ce <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 80005ca:	f000 fc6d 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80005ce:	4b24      	ldr	r3, [pc, #144]	@ (8000660 <MX_ADC2_Init+0x11c>)
 80005d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80005d2:	2306      	movs	r3, #6
 80005d4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80005d6:	2300      	movs	r3, #0
 80005d8:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80005da:	237f      	movs	r3, #127	@ 0x7f
 80005dc:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80005de:	2304      	movs	r3, #4
 80005e0:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80005e2:	2300      	movs	r3, #0
 80005e4:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80005e6:	463b      	mov	r3, r7
 80005e8:	4619      	mov	r1, r3
 80005ea:	481b      	ldr	r0, [pc, #108]	@ (8000658 <MX_ADC2_Init+0x114>)
 80005ec:	f002 f8bc 	bl	8002768 <HAL_ADC_ConfigChannel>
 80005f0:	4603      	mov	r3, r0
 80005f2:	2b00      	cmp	r3, #0
 80005f4:	d001      	beq.n	80005fa <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 80005f6:	f000 fc57 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_13;
 80005fa:	4b1a      	ldr	r3, [pc, #104]	@ (8000664 <MX_ADC2_Init+0x120>)
 80005fc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80005fe:	230c      	movs	r3, #12
 8000600:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000602:	463b      	mov	r3, r7
 8000604:	4619      	mov	r1, r3
 8000606:	4814      	ldr	r0, [pc, #80]	@ (8000658 <MX_ADC2_Init+0x114>)
 8000608:	f002 f8ae 	bl	8002768 <HAL_ADC_ConfigChannel>
 800060c:	4603      	mov	r3, r0
 800060e:	2b00      	cmp	r3, #0
 8000610:	d001      	beq.n	8000616 <MX_ADC2_Init+0xd2>
  {
    Error_Handler();
 8000612:	f000 fc49 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_17;
 8000616:	4b14      	ldr	r3, [pc, #80]	@ (8000668 <MX_ADC2_Init+0x124>)
 8000618:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_3;
 800061a:	2312      	movs	r3, #18
 800061c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800061e:	463b      	mov	r3, r7
 8000620:	4619      	mov	r1, r3
 8000622:	480d      	ldr	r0, [pc, #52]	@ (8000658 <MX_ADC2_Init+0x114>)
 8000624:	f002 f8a0 	bl	8002768 <HAL_ADC_ConfigChannel>
 8000628:	4603      	mov	r3, r0
 800062a:	2b00      	cmp	r3, #0
 800062c:	d001      	beq.n	8000632 <MX_ADC2_Init+0xee>
  {
    Error_Handler();
 800062e:	f000 fc3b 	bl	8000ea8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000632:	4b0e      	ldr	r3, [pc, #56]	@ (800066c <MX_ADC2_Init+0x128>)
 8000634:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_4;
 8000636:	2318      	movs	r3, #24
 8000638:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800063a:	463b      	mov	r3, r7
 800063c:	4619      	mov	r1, r3
 800063e:	4806      	ldr	r0, [pc, #24]	@ (8000658 <MX_ADC2_Init+0x114>)
 8000640:	f002 f892 	bl	8002768 <HAL_ADC_ConfigChannel>
 8000644:	4603      	mov	r3, r0
 8000646:	2b00      	cmp	r3, #0
 8000648:	d001      	beq.n	800064e <MX_ADC2_Init+0x10a>
  {
    Error_Handler();
 800064a:	f000 fc2d 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800064e:	bf00      	nop
 8000650:	3720      	adds	r7, #32
 8000652:	46bd      	mov	sp, r7
 8000654:	bd80      	pop	{r7, pc}
 8000656:	bf00      	nop
 8000658:	20000048 	.word	0x20000048
 800065c:	50000100 	.word	0x50000100
 8000660:	08600004 	.word	0x08600004
 8000664:	36902000 	.word	0x36902000
 8000668:	47520000 	.word	0x47520000
 800066c:	10c00010 	.word	0x10c00010

08000670 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000670:	b580      	push	{r7, lr}
 8000672:	b09a      	sub	sp, #104	@ 0x68
 8000674:	af00      	add	r7, sp, #0
 8000676:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000678:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800067c:	2200      	movs	r2, #0
 800067e:	601a      	str	r2, [r3, #0]
 8000680:	605a      	str	r2, [r3, #4]
 8000682:	609a      	str	r2, [r3, #8]
 8000684:	60da      	str	r2, [r3, #12]
 8000686:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000688:	f107 0310 	add.w	r3, r7, #16
 800068c:	2244      	movs	r2, #68	@ 0x44
 800068e:	2100      	movs	r1, #0
 8000690:	4618      	mov	r0, r3
 8000692:	f006 fc55 	bl	8006f40 <memset>
  if(adcHandle->Instance==ADC2)
 8000696:	687b      	ldr	r3, [r7, #4]
 8000698:	681b      	ldr	r3, [r3, #0]
 800069a:	4a37      	ldr	r2, [pc, #220]	@ (8000778 <HAL_ADC_MspInit+0x108>)
 800069c:	4293      	cmp	r3, r2
 800069e:	d167      	bne.n	8000770 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80006a0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80006a4:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80006a6:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 80006aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ac:	f107 0310 	add.w	r3, r7, #16
 80006b0:	4618      	mov	r0, r3
 80006b2:	f004 f8c5 	bl	8004840 <HAL_RCCEx_PeriphCLKConfig>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80006bc:	f000 fbf4 	bl	8000ea8 <Error_Handler>
    }

    /* ADC2 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 80006c0:	4b2e      	ldr	r3, [pc, #184]	@ (800077c <HAL_ADC_MspInit+0x10c>)
 80006c2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006c4:	4a2d      	ldr	r2, [pc, #180]	@ (800077c <HAL_ADC_MspInit+0x10c>)
 80006c6:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80006ca:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006cc:	4b2b      	ldr	r3, [pc, #172]	@ (800077c <HAL_ADC_MspInit+0x10c>)
 80006ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006d0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80006d4:	60fb      	str	r3, [r7, #12]
 80006d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80006d8:	4b28      	ldr	r3, [pc, #160]	@ (800077c <HAL_ADC_MspInit+0x10c>)
 80006da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006dc:	4a27      	ldr	r2, [pc, #156]	@ (800077c <HAL_ADC_MspInit+0x10c>)
 80006de:	f043 0301 	orr.w	r3, r3, #1
 80006e2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80006e4:	4b25      	ldr	r3, [pc, #148]	@ (800077c <HAL_ADC_MspInit+0x10c>)
 80006e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80006e8:	f003 0301 	and.w	r3, r3, #1
 80006ec:	60bb      	str	r3, [r7, #8]
 80006ee:	68bb      	ldr	r3, [r7, #8]
    PA1     ------> ADC2_IN2
    PA4     ------> ADC2_IN17
    PA5     ------> ADC2_IN13
    PA7     ------> ADC2_IN4
    */
    GPIO_InitStruct.Pin = L_IR_Pin|F_IR_Pin|LF_IR_Pin|R_IR_Pin;
 80006f0:	23b2      	movs	r3, #178	@ 0xb2
 80006f2:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80006f4:	2303      	movs	r3, #3
 80006f6:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006f8:	2300      	movs	r3, #0
 80006fa:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006fc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000700:	4619      	mov	r1, r3
 8000702:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000706:	f003 f8bd 	bl	8003884 <HAL_GPIO_Init>

    /* ADC2 DMA Init */
    /* ADC2 Init */
    hdma_adc2.Instance = DMA1_Channel1;
 800070a:	4b1d      	ldr	r3, [pc, #116]	@ (8000780 <HAL_ADC_MspInit+0x110>)
 800070c:	4a1d      	ldr	r2, [pc, #116]	@ (8000784 <HAL_ADC_MspInit+0x114>)
 800070e:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8000710:	4b1b      	ldr	r3, [pc, #108]	@ (8000780 <HAL_ADC_MspInit+0x110>)
 8000712:	2224      	movs	r2, #36	@ 0x24
 8000714:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000716:	4b1a      	ldr	r3, [pc, #104]	@ (8000780 <HAL_ADC_MspInit+0x110>)
 8000718:	2200      	movs	r2, #0
 800071a:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 800071c:	4b18      	ldr	r3, [pc, #96]	@ (8000780 <HAL_ADC_MspInit+0x110>)
 800071e:	2200      	movs	r2, #0
 8000720:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8000722:	4b17      	ldr	r3, [pc, #92]	@ (8000780 <HAL_ADC_MspInit+0x110>)
 8000724:	2280      	movs	r2, #128	@ 0x80
 8000726:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000728:	4b15      	ldr	r3, [pc, #84]	@ (8000780 <HAL_ADC_MspInit+0x110>)
 800072a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800072e:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000730:	4b13      	ldr	r3, [pc, #76]	@ (8000780 <HAL_ADC_MspInit+0x110>)
 8000732:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000736:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 8000738:	4b11      	ldr	r3, [pc, #68]	@ (8000780 <HAL_ADC_MspInit+0x110>)
 800073a:	2220      	movs	r2, #32
 800073c:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 800073e:	4b10      	ldr	r3, [pc, #64]	@ (8000780 <HAL_ADC_MspInit+0x110>)
 8000740:	2200      	movs	r2, #0
 8000742:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8000744:	480e      	ldr	r0, [pc, #56]	@ (8000780 <HAL_ADC_MspInit+0x110>)
 8000746:	f002 fe2b 	bl	80033a0 <HAL_DMA_Init>
 800074a:	4603      	mov	r3, r0
 800074c:	2b00      	cmp	r3, #0
 800074e:	d001      	beq.n	8000754 <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000750:	f000 fbaa 	bl	8000ea8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8000754:	687b      	ldr	r3, [r7, #4]
 8000756:	4a0a      	ldr	r2, [pc, #40]	@ (8000780 <HAL_ADC_MspInit+0x110>)
 8000758:	655a      	str	r2, [r3, #84]	@ 0x54
 800075a:	4a09      	ldr	r2, [pc, #36]	@ (8000780 <HAL_ADC_MspInit+0x110>)
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC2 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8000760:	2200      	movs	r2, #0
 8000762:	2100      	movs	r1, #0
 8000764:	2012      	movs	r0, #18
 8000766:	f002 fdf3 	bl	8003350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 800076a:	2012      	movs	r0, #18
 800076c:	f002 fe0a 	bl	8003384 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8000770:	bf00      	nop
 8000772:	3768      	adds	r7, #104	@ 0x68
 8000774:	46bd      	mov	sp, r7
 8000776:	bd80      	pop	{r7, pc}
 8000778:	50000100 	.word	0x50000100
 800077c:	40021000 	.word	0x40021000
 8000780:	200000b4 	.word	0x200000b4
 8000784:	40020008 	.word	0x40020008

08000788 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b082      	sub	sp, #8
 800078c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 800078e:	4b1a      	ldr	r3, [pc, #104]	@ (80007f8 <MX_DMA_Init+0x70>)
 8000790:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000792:	4a19      	ldr	r2, [pc, #100]	@ (80007f8 <MX_DMA_Init+0x70>)
 8000794:	f043 0304 	orr.w	r3, r3, #4
 8000798:	6493      	str	r3, [r2, #72]	@ 0x48
 800079a:	4b17      	ldr	r3, [pc, #92]	@ (80007f8 <MX_DMA_Init+0x70>)
 800079c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800079e:	f003 0304 	and.w	r3, r3, #4
 80007a2:	607b      	str	r3, [r7, #4]
 80007a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80007a6:	4b14      	ldr	r3, [pc, #80]	@ (80007f8 <MX_DMA_Init+0x70>)
 80007a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007aa:	4a13      	ldr	r2, [pc, #76]	@ (80007f8 <MX_DMA_Init+0x70>)
 80007ac:	f043 0301 	orr.w	r3, r3, #1
 80007b0:	6493      	str	r3, [r2, #72]	@ 0x48
 80007b2:	4b11      	ldr	r3, [pc, #68]	@ (80007f8 <MX_DMA_Init+0x70>)
 80007b4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80007b6:	f003 0301 	and.w	r3, r3, #1
 80007ba:	603b      	str	r3, [r7, #0]
 80007bc:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80007be:	2200      	movs	r2, #0
 80007c0:	2100      	movs	r1, #0
 80007c2:	200b      	movs	r0, #11
 80007c4:	f002 fdc4 	bl	8003350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80007c8:	200b      	movs	r0, #11
 80007ca:	f002 fddb 	bl	8003384 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 80007ce:	2200      	movs	r2, #0
 80007d0:	2100      	movs	r1, #0
 80007d2:	200e      	movs	r0, #14
 80007d4:	f002 fdbc 	bl	8003350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80007d8:	200e      	movs	r0, #14
 80007da:	f002 fdd3 	bl	8003384 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80007de:	2200      	movs	r2, #0
 80007e0:	2100      	movs	r1, #0
 80007e2:	200f      	movs	r0, #15
 80007e4:	f002 fdb4 	bl	8003350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80007e8:	200f      	movs	r0, #15
 80007ea:	f002 fdcb 	bl	8003384 <HAL_NVIC_EnableIRQ>

}
 80007ee:	bf00      	nop
 80007f0:	3708      	adds	r7, #8
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40021000 	.word	0x40021000

080007fc <MX_GPIO_Init>:
        * EVENT_OUT
        * EXTI
     PA15   ------> USART2_RX
*/
void MX_GPIO_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b088      	sub	sp, #32
 8000800:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000802:	f107 030c 	add.w	r3, r7, #12
 8000806:	2200      	movs	r2, #0
 8000808:	601a      	str	r2, [r3, #0]
 800080a:	605a      	str	r2, [r3, #4]
 800080c:	609a      	str	r2, [r3, #8]
 800080e:	60da      	str	r2, [r3, #12]
 8000810:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000812:	4b4b      	ldr	r3, [pc, #300]	@ (8000940 <MX_GPIO_Init+0x144>)
 8000814:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000816:	4a4a      	ldr	r2, [pc, #296]	@ (8000940 <MX_GPIO_Init+0x144>)
 8000818:	f043 0301 	orr.w	r3, r3, #1
 800081c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800081e:	4b48      	ldr	r3, [pc, #288]	@ (8000940 <MX_GPIO_Init+0x144>)
 8000820:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000822:	f003 0301 	and.w	r3, r3, #1
 8000826:	60bb      	str	r3, [r7, #8]
 8000828:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800082a:	4b45      	ldr	r3, [pc, #276]	@ (8000940 <MX_GPIO_Init+0x144>)
 800082c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800082e:	4a44      	ldr	r2, [pc, #272]	@ (8000940 <MX_GPIO_Init+0x144>)
 8000830:	f043 0302 	orr.w	r3, r3, #2
 8000834:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000836:	4b42      	ldr	r3, [pc, #264]	@ (8000940 <MX_GPIO_Init+0x144>)
 8000838:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800083a:	f003 0302 	and.w	r3, r3, #2
 800083e:	607b      	str	r3, [r7, #4]
 8000840:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, BUTTON_Pin|DIRR_Pin|DIRL_Pin, GPIO_PIN_RESET);
 8000842:	2200      	movs	r2, #0
 8000844:	f641 0101 	movw	r1, #6145	@ 0x1801
 8000848:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800084c:	f003 f9b4 	bl	8003bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BUTTONB5_GPIO_Port, BUTTONB5_Pin, GPIO_PIN_RESET);
 8000850:	2200      	movs	r2, #0
 8000852:	2120      	movs	r1, #32
 8000854:	483b      	ldr	r0, [pc, #236]	@ (8000944 <MX_GPIO_Init+0x148>)
 8000856:	f003 f9af 	bl	8003bb8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : BUTTON_Pin DIRR_Pin DIRL_Pin */
  GPIO_InitStruct.Pin = BUTTON_Pin|DIRR_Pin|DIRL_Pin;
 800085a:	f641 0301 	movw	r3, #6145	@ 0x1801
 800085e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000860:	2301      	movs	r3, #1
 8000862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000864:	2300      	movs	r3, #0
 8000866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000868:	2300      	movs	r3, #0
 800086a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086c:	f107 030c 	add.w	r3, r7, #12
 8000870:	4619      	mov	r1, r3
 8000872:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000876:	f003 f805 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pins : RA_Pin AL_Pin */
  GPIO_InitStruct.Pin = RA_Pin|AL_Pin;
 800087a:	2309      	movs	r3, #9
 800087c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING_FALLING;
 800087e:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8000882:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000888:	f107 030c 	add.w	r3, r7, #12
 800088c:	4619      	mov	r1, r3
 800088e:	482d      	ldr	r0, [pc, #180]	@ (8000944 <MX_GPIO_Init+0x148>)
 8000890:	f002 fff8 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_15;
 8000894:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000898:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089a:	2302      	movs	r3, #2
 800089c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089e:	2300      	movs	r3, #0
 80008a0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008a2:	2300      	movs	r3, #0
 80008a4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80008a6:	2307      	movs	r3, #7
 80008a8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80008aa:	f107 030c 	add.w	r3, r7, #12
 80008ae:	4619      	mov	r1, r3
 80008b0:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80008b4:	f002 ffe6 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pin : BL_Pin */
  GPIO_InitStruct.Pin = BL_Pin;
 80008b8:	2310      	movs	r3, #16
 80008ba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008bc:	2300      	movs	r3, #0
 80008be:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(BL_GPIO_Port, &GPIO_InitStruct);
 80008c4:	f107 030c 	add.w	r3, r7, #12
 80008c8:	4619      	mov	r1, r3
 80008ca:	481e      	ldr	r0, [pc, #120]	@ (8000944 <MX_GPIO_Init+0x148>)
 80008cc:	f002 ffda 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pin : BUTTONB5_Pin */
  GPIO_InitStruct.Pin = BUTTONB5_Pin;
 80008d0:	2320      	movs	r3, #32
 80008d2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008d4:	2301      	movs	r3, #1
 80008d6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008d8:	2300      	movs	r3, #0
 80008da:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008dc:	2300      	movs	r3, #0
 80008de:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTONB5_GPIO_Port, &GPIO_InitStruct);
 80008e0:	f107 030c 	add.w	r3, r7, #12
 80008e4:	4619      	mov	r1, r3
 80008e6:	4817      	ldr	r0, [pc, #92]	@ (8000944 <MX_GPIO_Init+0x148>)
 80008e8:	f002 ffcc 	bl	8003884 <HAL_GPIO_Init>

  /*Configure GPIO pin : RB_Pin */
  GPIO_InitStruct.Pin = RB_Pin;
 80008ec:	2340      	movs	r3, #64	@ 0x40
 80008ee:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80008f0:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80008f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f6:	2300      	movs	r3, #0
 80008f8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(RB_GPIO_Port, &GPIO_InitStruct);
 80008fa:	f107 030c 	add.w	r3, r7, #12
 80008fe:	4619      	mov	r1, r3
 8000900:	4810      	ldr	r0, [pc, #64]	@ (8000944 <MX_GPIO_Init+0x148>)
 8000902:	f002 ffbf 	bl	8003884 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2006      	movs	r0, #6
 800090c:	f002 fd20 	bl	8003350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000910:	2006      	movs	r0, #6
 8000912:	f002 fd37 	bl	8003384 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 8000916:	2200      	movs	r2, #0
 8000918:	2100      	movs	r1, #0
 800091a:	2009      	movs	r0, #9
 800091c:	f002 fd18 	bl	8003350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000920:	2009      	movs	r0, #9
 8000922:	f002 fd2f 	bl	8003384 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8000926:	2200      	movs	r2, #0
 8000928:	2100      	movs	r1, #0
 800092a:	2017      	movs	r0, #23
 800092c:	f002 fd10 	bl	8003350 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8000930:	2017      	movs	r0, #23
 8000932:	f002 fd27 	bl	8003384 <HAL_NVIC_EnableIRQ>

}
 8000936:	bf00      	nop
 8000938:	3720      	adds	r7, #32
 800093a:	46bd      	mov	sp, r7
 800093c:	bd80      	pop	{r7, pc}
 800093e:	bf00      	nop
 8000940:	40021000 	.word	0x40021000
 8000944:	48000400 	.word	0x48000400

08000948 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800094e:	f001 f803 	bl	8001958 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000952:	f000 f8fb 	bl	8000b4c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000956:	f7ff ff51 	bl	80007fc <MX_GPIO_Init>
  MX_DMA_Init();
 800095a:	f7ff ff15 	bl	8000788 <MX_DMA_Init>
  MX_ADC2_Init();
 800095e:	f7ff fdf1 	bl	8000544 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8000962:	f000 fdeb 	bl	800153c <MX_USART1_UART_Init>
  MX_TIM1_Init();
 8000966:	f000 fbc9 	bl	80010fc <MX_TIM1_Init>
  MX_TIM16_Init();
 800096a:	f000 fcc5 	bl	80012f8 <MX_TIM16_Init>
  MX_TIM2_Init();
 800096e:	f000 fc75 	bl	800125c <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000972:	2100      	movs	r1, #0
 8000974:	4865      	ldr	r0, [pc, #404]	@ (8000b0c <main+0x1c4>)
 8000976:	f004 fa77 	bl	8004e68 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim16, TIM_CHANNEL_1);
 800097a:	2100      	movs	r1, #0
 800097c:	4864      	ldr	r0, [pc, #400]	@ (8000b10 <main+0x1c8>)
 800097e:	f004 fa73 	bl	8004e68 <HAL_TIM_PWM_Start>
  HAL_Delay(5000);  // Wait 5 seconds before starting control loop
 8000982:	f241 3088 	movw	r0, #5000	@ 0x1388
 8000986:	f001 f81d 	bl	80019c4 <HAL_Delay>

  HAL_ADC_Start_DMA(&hadc2, (uint32_t*)ir_readings, NUM_IR_SENSORS);
 800098a:	2204      	movs	r2, #4
 800098c:	4961      	ldr	r1, [pc, #388]	@ (8000b14 <main+0x1cc>)
 800098e:	4862      	ldr	r0, [pc, #392]	@ (8000b18 <main+0x1d0>)
 8000990:	f001 fbfe 	bl	8002190 <HAL_ADC_Start_DMA>
  /* USER CODE END 2 */

  /* Initialize leds */
  BSP_LED_Init(LED_GREEN);
 8000994:	2000      	movs	r0, #0
 8000996:	f000 fefb 	bl	8001790 <BSP_LED_Init>

  /* Initialize COM1 port (115200, 8 bits (7-bit data + 1 stop bit), no parity */
  BspCOMInit.BaudRate   = 115200;
 800099a:	4b60      	ldr	r3, [pc, #384]	@ (8000b1c <main+0x1d4>)
 800099c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80009a0:	601a      	str	r2, [r3, #0]
  BspCOMInit.WordLength = COM_WORDLENGTH_8B;
 80009a2:	4b5e      	ldr	r3, [pc, #376]	@ (8000b1c <main+0x1d4>)
 80009a4:	2200      	movs	r2, #0
 80009a6:	605a      	str	r2, [r3, #4]
  BspCOMInit.StopBits   = COM_STOPBITS_1;
 80009a8:	4b5c      	ldr	r3, [pc, #368]	@ (8000b1c <main+0x1d4>)
 80009aa:	2200      	movs	r2, #0
 80009ac:	811a      	strh	r2, [r3, #8]
  BspCOMInit.Parity     = COM_PARITY_NONE;
 80009ae:	4b5b      	ldr	r3, [pc, #364]	@ (8000b1c <main+0x1d4>)
 80009b0:	2200      	movs	r2, #0
 80009b2:	815a      	strh	r2, [r3, #10]
  BspCOMInit.HwFlowCtl  = COM_HWCONTROL_NONE;
 80009b4:	4b59      	ldr	r3, [pc, #356]	@ (8000b1c <main+0x1d4>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	819a      	strh	r2, [r3, #12]
  if (BSP_COM_Init(COM1, &BspCOMInit) != BSP_ERROR_NONE)
 80009ba:	4958      	ldr	r1, [pc, #352]	@ (8000b1c <main+0x1d4>)
 80009bc:	2000      	movs	r0, #0
 80009be:	f000 ff1d 	bl	80017fc <BSP_COM_Init>
 80009c2:	4603      	mov	r3, r0
 80009c4:	2b00      	cmp	r3, #0
 80009c6:	d001      	beq.n	80009cc <main+0x84>
  {
    Error_Handler();
 80009c8:	f000 fa6e 	bl	8000ea8 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
      if (HAL_GetTick() - last_control_time >= 10)
 80009cc:	f000 ffee 	bl	80019ac <HAL_GetTick>
 80009d0:	4602      	mov	r2, r0
 80009d2:	4b53      	ldr	r3, [pc, #332]	@ (8000b20 <main+0x1d8>)
 80009d4:	681b      	ldr	r3, [r3, #0]
 80009d6:	1ad3      	subs	r3, r2, r3
 80009d8:	2b09      	cmp	r3, #9
 80009da:	d974      	bls.n	8000ac6 <main+0x17e>
      {

          last_control_time += 10;
 80009dc:	4b50      	ldr	r3, [pc, #320]	@ (8000b20 <main+0x1d8>)
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	330a      	adds	r3, #10
 80009e2:	4a4f      	ldr	r2, [pc, #316]	@ (8000b20 <main+0x1d8>)
 80009e4:	6013      	str	r3, [r2, #0]

          float pos_current_R = encoder_ticks_R * kenc;
 80009e6:	4b4f      	ldr	r3, [pc, #316]	@ (8000b24 <main+0x1dc>)
 80009e8:	681b      	ldr	r3, [r3, #0]
 80009ea:	ee07 3a90 	vmov	s15, r3
 80009ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80009f2:	4b4d      	ldr	r3, [pc, #308]	@ (8000b28 <main+0x1e0>)
 80009f4:	edd3 7a00 	vldr	s15, [r3]
 80009f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80009fc:	edc7 7a05 	vstr	s15, [r7, #20]
          float vel_current_R = (encoder_ticks_R - prev_encoder_ticks_R) * kenc / 0.01f;
 8000a00:	4b48      	ldr	r3, [pc, #288]	@ (8000b24 <main+0x1dc>)
 8000a02:	681a      	ldr	r2, [r3, #0]
 8000a04:	4b49      	ldr	r3, [pc, #292]	@ (8000b2c <main+0x1e4>)
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	1ad3      	subs	r3, r2, r3
 8000a0a:	ee07 3a90 	vmov	s15, r3
 8000a0e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a12:	4b45      	ldr	r3, [pc, #276]	@ (8000b28 <main+0x1e0>)
 8000a14:	edd3 7a00 	vldr	s15, [r3]
 8000a18:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a1c:	eddf 6a44 	vldr	s13, [pc, #272]	@ 8000b30 <main+0x1e8>
 8000a20:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a24:	edc7 7a04 	vstr	s15, [r7, #16]
          prev_encoder_ticks_R = encoder_ticks_R;
 8000a28:	4b3e      	ldr	r3, [pc, #248]	@ (8000b24 <main+0x1dc>)
 8000a2a:	681b      	ldr	r3, [r3, #0]
 8000a2c:	4a3f      	ldr	r2, [pc, #252]	@ (8000b2c <main+0x1e4>)
 8000a2e:	6013      	str	r3, [r2, #0]
          float pwm_R = cascaded_control(pos_target_R, pos_current_R, vel_current_R, &vel_integral_R);
 8000a30:	4b40      	ldr	r3, [pc, #256]	@ (8000b34 <main+0x1ec>)
 8000a32:	edd3 7a00 	vldr	s15, [r3]
 8000a36:	4840      	ldr	r0, [pc, #256]	@ (8000b38 <main+0x1f0>)
 8000a38:	ed97 1a04 	vldr	s2, [r7, #16]
 8000a3c:	edd7 0a05 	vldr	s1, [r7, #20]
 8000a40:	eeb0 0a67 	vmov.f32	s0, s15
 8000a44:	f000 f8ce 	bl	8000be4 <cascaded_control>
 8000a48:	ed87 0a03 	vstr	s0, [r7, #12]
          set_motor_pwm_R(pwm_R);
 8000a4c:	ed97 0a03 	vldr	s0, [r7, #12]
 8000a50:	f000 f99e 	bl	8000d90 <set_motor_pwm_R>

          float pos_current_L = encoder_ticks_L * kenc;
 8000a54:	4b39      	ldr	r3, [pc, #228]	@ (8000b3c <main+0x1f4>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	ee07 3a90 	vmov	s15, r3
 8000a5c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a60:	4b31      	ldr	r3, [pc, #196]	@ (8000b28 <main+0x1e0>)
 8000a62:	edd3 7a00 	vldr	s15, [r3]
 8000a66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000a6a:	edc7 7a02 	vstr	s15, [r7, #8]
          float vel_current_L = (encoder_ticks_L - prev_encoder_ticks_L) * kenc / 0.01f;
 8000a6e:	4b33      	ldr	r3, [pc, #204]	@ (8000b3c <main+0x1f4>)
 8000a70:	681a      	ldr	r2, [r3, #0]
 8000a72:	4b33      	ldr	r3, [pc, #204]	@ (8000b40 <main+0x1f8>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	1ad3      	subs	r3, r2, r3
 8000a78:	ee07 3a90 	vmov	s15, r3
 8000a7c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000a80:	4b29      	ldr	r3, [pc, #164]	@ (8000b28 <main+0x1e0>)
 8000a82:	edd3 7a00 	vldr	s15, [r3]
 8000a86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000a8a:	eddf 6a29 	vldr	s13, [pc, #164]	@ 8000b30 <main+0x1e8>
 8000a8e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8000a92:	edc7 7a01 	vstr	s15, [r7, #4]
          prev_encoder_ticks_L = encoder_ticks_L;
 8000a96:	4b29      	ldr	r3, [pc, #164]	@ (8000b3c <main+0x1f4>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	4a29      	ldr	r2, [pc, #164]	@ (8000b40 <main+0x1f8>)
 8000a9c:	6013      	str	r3, [r2, #0]
          float pwm_L = cascaded_control(-pos_target_L, pos_current_L, vel_current_L, &vel_integral_L);
 8000a9e:	4b29      	ldr	r3, [pc, #164]	@ (8000b44 <main+0x1fc>)
 8000aa0:	edd3 7a00 	vldr	s15, [r3]
 8000aa4:	eef1 7a67 	vneg.f32	s15, s15
 8000aa8:	4827      	ldr	r0, [pc, #156]	@ (8000b48 <main+0x200>)
 8000aaa:	ed97 1a01 	vldr	s2, [r7, #4]
 8000aae:	edd7 0a02 	vldr	s1, [r7, #8]
 8000ab2:	eeb0 0a67 	vmov.f32	s0, s15
 8000ab6:	f000 f895 	bl	8000be4 <cascaded_control>
 8000aba:	ed87 0a00 	vstr	s0, [r7]
          set_motor_pwm_L(pwm_L);
 8000abe:	ed97 0a00 	vldr	s0, [r7]
 8000ac2:	f000 f99d 	bl	8000e00 <set_motor_pwm_L>
      }
      if (ir_readings[0] > 1500 || ir_readings[2] > 1500 || ir_readings[3] > 1500)
 8000ac6:	4b13      	ldr	r3, [pc, #76]	@ (8000b14 <main+0x1cc>)
 8000ac8:	881b      	ldrh	r3, [r3, #0]
 8000aca:	b29b      	uxth	r3, r3
 8000acc:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000ad0:	4293      	cmp	r3, r2
 8000ad2:	d80d      	bhi.n	8000af0 <main+0x1a8>
 8000ad4:	4b0f      	ldr	r3, [pc, #60]	@ (8000b14 <main+0x1cc>)
 8000ad6:	889b      	ldrh	r3, [r3, #4]
 8000ad8:	b29b      	uxth	r3, r3
 8000ada:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000ade:	4293      	cmp	r3, r2
 8000ae0:	d806      	bhi.n	8000af0 <main+0x1a8>
 8000ae2:	4b0c      	ldr	r3, [pc, #48]	@ (8000b14 <main+0x1cc>)
 8000ae4:	88db      	ldrh	r3, [r3, #6]
 8000ae6:	b29b      	uxth	r3, r3
 8000ae8:	f240 52dc 	movw	r2, #1500	@ 0x5dc
 8000aec:	4293      	cmp	r3, r2
 8000aee:	d906      	bls.n	8000afe <main+0x1b6>
      {
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_SET);  // Example
 8000af0:	2201      	movs	r2, #1
 8000af2:	2101      	movs	r1, #1
 8000af4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000af8:	f003 f85e 	bl	8003bb8 <HAL_GPIO_WritePin>
 8000afc:	e005      	b.n	8000b0a <main+0x1c2>
      } else {
          HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0, GPIO_PIN_RESET);  // Example
 8000afe:	2200      	movs	r2, #0
 8000b00:	2101      	movs	r1, #1
 8000b02:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000b06:	f003 f857 	bl	8003bb8 <HAL_GPIO_WritePin>
      if (HAL_GetTick() - last_control_time >= 10)
 8000b0a:	e75f      	b.n	80009cc <main+0x84>
 8000b0c:	20000194 	.word	0x20000194
 8000b10:	2000022c 	.word	0x2000022c
 8000b14:	20000140 	.word	0x20000140
 8000b18:	20000048 	.word	0x20000048
 8000b1c:	20000114 	.word	0x20000114
 8000b20:	2000013c 	.word	0x2000013c
 8000b24:	20000124 	.word	0x20000124
 8000b28:	2000000c 	.word	0x2000000c
 8000b2c:	2000012c 	.word	0x2000012c
 8000b30:	3c23d70a 	.word	0x3c23d70a
 8000b34:	20000010 	.word	0x20000010
 8000b38:	20000134 	.word	0x20000134
 8000b3c:	20000128 	.word	0x20000128
 8000b40:	20000130 	.word	0x20000130
 8000b44:	20000014 	.word	0x20000014
 8000b48:	20000138 	.word	0x20000138

08000b4c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b094      	sub	sp, #80	@ 0x50
 8000b50:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b52:	f107 0318 	add.w	r3, r7, #24
 8000b56:	2238      	movs	r2, #56	@ 0x38
 8000b58:	2100      	movs	r1, #0
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	f006 f9f0 	bl	8006f40 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b60:	1d3b      	adds	r3, r7, #4
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
 8000b6c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b6e:	2000      	movs	r0, #0
 8000b70:	f003 f852 	bl	8003c18 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b74:	2302      	movs	r3, #2
 8000b76:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b78:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000b7c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b7e:	2340      	movs	r3, #64	@ 0x40
 8000b80:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b82:	2302      	movs	r3, #2
 8000b84:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b86:	2302      	movs	r3, #2
 8000b88:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000b8e:	2355      	movs	r3, #85	@ 0x55
 8000b90:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b92:	2302      	movs	r3, #2
 8000b94:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000b96:	2302      	movs	r3, #2
 8000b98:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b9e:	f107 0318 	add.w	r3, r7, #24
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f003 f8ec 	bl	8003d80 <HAL_RCC_OscConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8000bae:	f000 f97b 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bb2:	230f      	movs	r3, #15
 8000bb4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bb6:	2303      	movs	r3, #3
 8000bb8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bba:	2300      	movs	r3, #0
 8000bbc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bbe:	2300      	movs	r3, #0
 8000bc0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bc6:	1d3b      	adds	r3, r7, #4
 8000bc8:	2104      	movs	r1, #4
 8000bca:	4618      	mov	r0, r3
 8000bcc:	f003 fbea 	bl	80043a4 <HAL_RCC_ClockConfig>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	2b00      	cmp	r3, #0
 8000bd4:	d001      	beq.n	8000bda <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8000bd6:	f000 f967 	bl	8000ea8 <Error_Handler>
  }
}
 8000bda:	bf00      	nop
 8000bdc:	3750      	adds	r7, #80	@ 0x50
 8000bde:	46bd      	mov	sp, r7
 8000be0:	bd80      	pop	{r7, pc}
	...

08000be4 <cascaded_control>:

/* USER CODE BEGIN 4 */

float cascaded_control(float pos_target, float pos_current, float vel_current, float *vel_integral)
{
 8000be4:	b480      	push	{r7}
 8000be6:	b089      	sub	sp, #36	@ 0x24
 8000be8:	af00      	add	r7, sp, #0
 8000bea:	ed87 0a03 	vstr	s0, [r7, #12]
 8000bee:	edc7 0a02 	vstr	s1, [r7, #8]
 8000bf2:	ed87 1a01 	vstr	s2, [r7, #4]
 8000bf6:	6038      	str	r0, [r7, #0]
    float vel_ref = kpp * (pos_target - pos_current);
 8000bf8:	ed97 7a03 	vldr	s14, [r7, #12]
 8000bfc:	edd7 7a02 	vldr	s15, [r7, #8]
 8000c00:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000c04:	4b36      	ldr	r3, [pc, #216]	@ (8000ce0 <cascaded_control+0xfc>)
 8000c06:	edd3 7a00 	vldr	s15, [r3]
 8000c0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000c0e:	edc7 7a06 	vstr	s15, [r7, #24]
    float vel_error = vel_ref - vel_current;
 8000c12:	ed97 7a06 	vldr	s14, [r7, #24]
 8000c16:	edd7 7a01 	vldr	s15, [r7, #4]
 8000c1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c1e:	edc7 7a05 	vstr	s15, [r7, #20]
    *vel_integral += vel_error * 0.01f;
 8000c22:	683b      	ldr	r3, [r7, #0]
 8000c24:	ed93 7a00 	vldr	s14, [r3]
 8000c28:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c2c:	eddf 6a2d 	vldr	s13, [pc, #180]	@ 8000ce4 <cascaded_control+0x100>
 8000c30:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	edc3 7a00 	vstr	s15, [r3]

    float pwm = kvp * vel_error + kvi * (*vel_integral);
 8000c3e:	4b2a      	ldr	r3, [pc, #168]	@ (8000ce8 <cascaded_control+0x104>)
 8000c40:	ed93 7a00 	vldr	s14, [r3]
 8000c44:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000c4c:	683b      	ldr	r3, [r7, #0]
 8000c4e:	edd3 6a00 	vldr	s13, [r3]
 8000c52:	4b26      	ldr	r3, [pc, #152]	@ (8000cec <cascaded_control+0x108>)
 8000c54:	edd3 7a00 	vldr	s15, [r3]
 8000c58:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000c60:	edc7 7a07 	vstr	s15, [r7, #28]

    if (pwm > 100.0f) {
 8000c64:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c68:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 8000cf0 <cascaded_control+0x10c>
 8000c6c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c74:	dd10      	ble.n	8000c98 <cascaded_control+0xb4>
        pwm = 100.0f;
 8000c76:	4b1f      	ldr	r3, [pc, #124]	@ (8000cf4 <cascaded_control+0x110>)
 8000c78:	61fb      	str	r3, [r7, #28]
        *vel_integral -= vel_error * 0.01f;
 8000c7a:	683b      	ldr	r3, [r7, #0]
 8000c7c:	ed93 7a00 	vldr	s14, [r3]
 8000c80:	edd7 7a05 	vldr	s15, [r7, #20]
 8000c84:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8000ce4 <cascaded_control+0x100>
 8000c88:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000c8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000c90:	683b      	ldr	r3, [r7, #0]
 8000c92:	edc3 7a00 	vstr	s15, [r3]
 8000c96:	e018      	b.n	8000cca <cascaded_control+0xe6>
    } else if (pwm < -100.0f) {
 8000c98:	edd7 7a07 	vldr	s15, [r7, #28]
 8000c9c:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8000cf8 <cascaded_control+0x114>
 8000ca0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ca4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ca8:	d50f      	bpl.n	8000cca <cascaded_control+0xe6>
        pwm = -100.0f;
 8000caa:	4b14      	ldr	r3, [pc, #80]	@ (8000cfc <cascaded_control+0x118>)
 8000cac:	61fb      	str	r3, [r7, #28]
        *vel_integral -= vel_error * 0.01f;
 8000cae:	683b      	ldr	r3, [r7, #0]
 8000cb0:	ed93 7a00 	vldr	s14, [r3]
 8000cb4:	edd7 7a05 	vldr	s15, [r7, #20]
 8000cb8:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8000ce4 <cascaded_control+0x100>
 8000cbc:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8000cc0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000cc4:	683b      	ldr	r3, [r7, #0]
 8000cc6:	edc3 7a00 	vstr	s15, [r3]
    }

    return pwm;
 8000cca:	69fb      	ldr	r3, [r7, #28]
 8000ccc:	ee07 3a90 	vmov	s15, r3
}
 8000cd0:	eeb0 0a67 	vmov.f32	s0, s15
 8000cd4:	3724      	adds	r7, #36	@ 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
 8000cde:	bf00      	nop
 8000ce0:	20000000 	.word	0x20000000
 8000ce4:	3c23d70a 	.word	0x3c23d70a
 8000ce8:	20000004 	.word	0x20000004
 8000cec:	20000008 	.word	0x20000008
 8000cf0:	42c80000 	.word	0x42c80000
 8000cf4:	42c80000 	.word	0x42c80000
 8000cf8:	c2c80000 	.word	0xc2c80000
 8000cfc:	c2c80000 	.word	0xc2c80000

08000d00 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b084      	sub	sp, #16
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	4603      	mov	r3, r0
 8000d08:	80fb      	strh	r3, [r7, #6]
    if (GPIO_Pin == GPIO_PIN_0) {
 8000d0a:	88fb      	ldrh	r3, [r7, #6]
 8000d0c:	2b01      	cmp	r3, #1
 8000d0e:	d119      	bne.n	8000d44 <HAL_GPIO_EXTI_Callback+0x44>
        uint8_t currA = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8000d10:	2101      	movs	r1, #1
 8000d12:	481c      	ldr	r0, [pc, #112]	@ (8000d84 <HAL_GPIO_EXTI_Callback+0x84>)
 8000d14:	f002 ff38 	bl	8003b88 <HAL_GPIO_ReadPin>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	737b      	strb	r3, [r7, #13]
        uint8_t currB = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8000d1c:	2140      	movs	r1, #64	@ 0x40
 8000d1e:	4819      	ldr	r0, [pc, #100]	@ (8000d84 <HAL_GPIO_EXTI_Callback+0x84>)
 8000d20:	f002 ff32 	bl	8003b88 <HAL_GPIO_ReadPin>
 8000d24:	4603      	mov	r3, r0
 8000d26:	733b      	strb	r3, [r7, #12]
        encoder_ticks_R += (currA == currB) ? -1 : +1;
 8000d28:	7b7a      	ldrb	r2, [r7, #13]
 8000d2a:	7b3b      	ldrb	r3, [r7, #12]
 8000d2c:	429a      	cmp	r2, r3
 8000d2e:	d102      	bne.n	8000d36 <HAL_GPIO_EXTI_Callback+0x36>
 8000d30:	f04f 32ff 	mov.w	r2, #4294967295
 8000d34:	e000      	b.n	8000d38 <HAL_GPIO_EXTI_Callback+0x38>
 8000d36:	2201      	movs	r2, #1
 8000d38:	4b13      	ldr	r3, [pc, #76]	@ (8000d88 <HAL_GPIO_EXTI_Callback+0x88>)
 8000d3a:	681b      	ldr	r3, [r3, #0]
 8000d3c:	4413      	add	r3, r2
 8000d3e:	4a12      	ldr	r2, [pc, #72]	@ (8000d88 <HAL_GPIO_EXTI_Callback+0x88>)
 8000d40:	6013      	str	r3, [r2, #0]
    else if (GPIO_Pin == GPIO_PIN_3) {
        uint8_t currA = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
        uint8_t currB = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
        encoder_ticks_L += (currA == currB) ? -1 : +1;
    }
}
 8000d42:	e01b      	b.n	8000d7c <HAL_GPIO_EXTI_Callback+0x7c>
    else if (GPIO_Pin == GPIO_PIN_3) {
 8000d44:	88fb      	ldrh	r3, [r7, #6]
 8000d46:	2b08      	cmp	r3, #8
 8000d48:	d118      	bne.n	8000d7c <HAL_GPIO_EXTI_Callback+0x7c>
        uint8_t currA = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000d4a:	2108      	movs	r1, #8
 8000d4c:	480d      	ldr	r0, [pc, #52]	@ (8000d84 <HAL_GPIO_EXTI_Callback+0x84>)
 8000d4e:	f002 ff1b 	bl	8003b88 <HAL_GPIO_ReadPin>
 8000d52:	4603      	mov	r3, r0
 8000d54:	73fb      	strb	r3, [r7, #15]
        uint8_t currB = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000d56:	2110      	movs	r1, #16
 8000d58:	480a      	ldr	r0, [pc, #40]	@ (8000d84 <HAL_GPIO_EXTI_Callback+0x84>)
 8000d5a:	f002 ff15 	bl	8003b88 <HAL_GPIO_ReadPin>
 8000d5e:	4603      	mov	r3, r0
 8000d60:	73bb      	strb	r3, [r7, #14]
        encoder_ticks_L += (currA == currB) ? -1 : +1;
 8000d62:	7bfa      	ldrb	r2, [r7, #15]
 8000d64:	7bbb      	ldrb	r3, [r7, #14]
 8000d66:	429a      	cmp	r2, r3
 8000d68:	d102      	bne.n	8000d70 <HAL_GPIO_EXTI_Callback+0x70>
 8000d6a:	f04f 32ff 	mov.w	r2, #4294967295
 8000d6e:	e000      	b.n	8000d72 <HAL_GPIO_EXTI_Callback+0x72>
 8000d70:	2201      	movs	r2, #1
 8000d72:	4b06      	ldr	r3, [pc, #24]	@ (8000d8c <HAL_GPIO_EXTI_Callback+0x8c>)
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	4413      	add	r3, r2
 8000d78:	4a04      	ldr	r2, [pc, #16]	@ (8000d8c <HAL_GPIO_EXTI_Callback+0x8c>)
 8000d7a:	6013      	str	r3, [r2, #0]
}
 8000d7c:	bf00      	nop
 8000d7e:	3710      	adds	r7, #16
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	48000400 	.word	0x48000400
 8000d88:	20000124 	.word	0x20000124
 8000d8c:	20000128 	.word	0x20000128

08000d90 <set_motor_pwm_R>:

void set_motor_pwm_R(float cmd)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b082      	sub	sp, #8
 8000d94:	af00      	add	r7, sp, #0
 8000d96:	ed87 0a01 	vstr	s0, [r7, #4]
    if (cmd >= 0) {
 8000d9a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000d9e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000da2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000da6:	db07      	blt.n	8000db8 <set_motor_pwm_R+0x28>
        HAL_GPIO_WritePin(DIRR_GPIO_Port, DIRR_Pin, GPIO_PIN_SET);
 8000da8:	2201      	movs	r2, #1
 8000daa:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dae:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000db2:	f002 ff01 	bl	8003bb8 <HAL_GPIO_WritePin>
 8000db6:	e00c      	b.n	8000dd2 <set_motor_pwm_R+0x42>
    } else {
        HAL_GPIO_WritePin(DIRR_GPIO_Port, DIRR_Pin, GPIO_PIN_RESET);
 8000db8:	2200      	movs	r2, #0
 8000dba:	f44f 6100 	mov.w	r1, #2048	@ 0x800
 8000dbe:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dc2:	f002 fef9 	bl	8003bb8 <HAL_GPIO_WritePin>
        cmd = -cmd;
 8000dc6:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dca:	eef1 7a67 	vneg.f32	s15, s15
 8000dce:	edc7 7a01 	vstr	s15, [r7, #4]
    }
    __HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (uint16_t)(cmd * 655.35f));
 8000dd2:	edd7 7a01 	vldr	s15, [r7, #4]
 8000dd6:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000df8 <set_motor_pwm_R+0x68>
 8000dda:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000dde:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000de2:	ee17 3a90 	vmov	r3, s15
 8000de6:	b29a      	uxth	r2, r3
 8000de8:	4b04      	ldr	r3, [pc, #16]	@ (8000dfc <set_motor_pwm_R+0x6c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000dee:	bf00      	nop
 8000df0:	3708      	adds	r7, #8
 8000df2:	46bd      	mov	sp, r7
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	bf00      	nop
 8000df8:	4423d666 	.word	0x4423d666
 8000dfc:	20000194 	.word	0x20000194

08000e00 <set_motor_pwm_L>:

void set_motor_pwm_L(float cmd)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	b082      	sub	sp, #8
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	ed87 0a01 	vstr	s0, [r7, #4]
    if (cmd >= 0) {
 8000e0a:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8000e12:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e16:	db07      	blt.n	8000e28 <set_motor_pwm_L+0x28>
        HAL_GPIO_WritePin(DIRL_GPIO_Port, DIRL_Pin, GPIO_PIN_SET);
 8000e18:	2201      	movs	r2, #1
 8000e1a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e1e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e22:	f002 fec9 	bl	8003bb8 <HAL_GPIO_WritePin>
 8000e26:	e00c      	b.n	8000e42 <set_motor_pwm_L+0x42>
    } else {
        HAL_GPIO_WritePin(DIRL_GPIO_Port, DIRL_Pin, GPIO_PIN_RESET);
 8000e28:	2200      	movs	r2, #0
 8000e2a:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000e2e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000e32:	f002 fec1 	bl	8003bb8 <HAL_GPIO_WritePin>
        cmd = -cmd;
 8000e36:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e3a:	eef1 7a67 	vneg.f32	s15, s15
 8000e3e:	edc7 7a01 	vstr	s15, [r7, #4]
    }
    __HAL_TIM_SET_COMPARE(&htim16, TIM_CHANNEL_1, (uint16_t)(cmd * 655.35f));
 8000e42:	edd7 7a01 	vldr	s15, [r7, #4]
 8000e46:	ed9f 7a08 	vldr	s14, [pc, #32]	@ 8000e68 <set_motor_pwm_L+0x68>
 8000e4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8000e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8000e52:	ee17 3a90 	vmov	r3, s15
 8000e56:	b29a      	uxth	r2, r3
 8000e58:	4b04      	ldr	r3, [pc, #16]	@ (8000e6c <set_motor_pwm_L+0x6c>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000e5e:	bf00      	nop
 8000e60:	3708      	adds	r7, #8
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
 8000e66:	bf00      	nop
 8000e68:	4423d666 	.word	0x4423d666
 8000e6c:	2000022c 	.word	0x2000022c

08000e70 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b083      	sub	sp, #12
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
    if (hadc->Instance == ADC2) {
        // e.g., process ir_readings[]
    }
}
 8000e78:	bf00      	nop
 8000e7a:	370c      	adds	r7, #12
 8000e7c:	46bd      	mov	sp, r7
 8000e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e82:	4770      	bx	lr

08000e84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6)
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a04      	ldr	r2, [pc, #16]	@ (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d101      	bne.n	8000e9a <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8000e96:	f000 fd77 	bl	8001988 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40001000 	.word	0x40001000

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb0:	bf00      	nop
 8000eb2:	e7fd      	b.n	8000eb0 <Error_Handler+0x8>

08000eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef8 <HAL_MspInit+0x44>)
 8000ebc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000ebe:	4a0e      	ldr	r2, [pc, #56]	@ (8000ef8 <HAL_MspInit+0x44>)
 8000ec0:	f043 0301 	orr.w	r3, r3, #1
 8000ec4:	6613      	str	r3, [r2, #96]	@ 0x60
 8000ec6:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef8 <HAL_MspInit+0x44>)
 8000ec8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000eca:	f003 0301 	and.w	r3, r3, #1
 8000ece:	607b      	str	r3, [r7, #4]
 8000ed0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed2:	4b09      	ldr	r3, [pc, #36]	@ (8000ef8 <HAL_MspInit+0x44>)
 8000ed4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ed6:	4a08      	ldr	r2, [pc, #32]	@ (8000ef8 <HAL_MspInit+0x44>)
 8000ed8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000edc:	6593      	str	r3, [r2, #88]	@ 0x58
 8000ede:	4b06      	ldr	r3, [pc, #24]	@ (8000ef8 <HAL_MspInit+0x44>)
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000ee2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000ee6:	603b      	str	r3, [r7, #0]
 8000ee8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000eea:	f002 ff39 	bl	8003d60 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000eee:	bf00      	nop
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}
 8000ef6:	bf00      	nop
 8000ef8:	40021000 	.word	0x40021000

08000efc <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000efc:	b580      	push	{r7, lr}
 8000efe:	b08c      	sub	sp, #48	@ 0x30
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000f04:	2300      	movs	r3, #0
 8000f06:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8000f08:	2300      	movs	r3, #0
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000f0c:	4b2c      	ldr	r3, [pc, #176]	@ (8000fc0 <HAL_InitTick+0xc4>)
 8000f0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f10:	4a2b      	ldr	r2, [pc, #172]	@ (8000fc0 <HAL_InitTick+0xc4>)
 8000f12:	f043 0310 	orr.w	r3, r3, #16
 8000f16:	6593      	str	r3, [r2, #88]	@ 0x58
 8000f18:	4b29      	ldr	r3, [pc, #164]	@ (8000fc0 <HAL_InitTick+0xc4>)
 8000f1a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f1c:	f003 0310 	and.w	r3, r3, #16
 8000f20:	60bb      	str	r3, [r7, #8]
 8000f22:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f24:	f107 020c 	add.w	r2, r7, #12
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	4611      	mov	r1, r2
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f003 fc0e 	bl	8004750 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000f34:	f003 fbe0 	bl	80046f8 <HAL_RCC_GetPCLK1Freq>
 8000f38:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f3c:	4a21      	ldr	r2, [pc, #132]	@ (8000fc4 <HAL_InitTick+0xc8>)
 8000f3e:	fba2 2303 	umull	r2, r3, r2, r3
 8000f42:	0c9b      	lsrs	r3, r3, #18
 8000f44:	3b01      	subs	r3, #1
 8000f46:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000f48:	4b1f      	ldr	r3, [pc, #124]	@ (8000fc8 <HAL_InitTick+0xcc>)
 8000f4a:	4a20      	ldr	r2, [pc, #128]	@ (8000fcc <HAL_InitTick+0xd0>)
 8000f4c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000f4e:	4b1e      	ldr	r3, [pc, #120]	@ (8000fc8 <HAL_InitTick+0xcc>)
 8000f50:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8000f54:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000f56:	4a1c      	ldr	r2, [pc, #112]	@ (8000fc8 <HAL_InitTick+0xcc>)
 8000f58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000f5a:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8000fc8 <HAL_InitTick+0xcc>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f62:	4b19      	ldr	r3, [pc, #100]	@ (8000fc8 <HAL_InitTick+0xcc>)
 8000f64:	2200      	movs	r2, #0
 8000f66:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000f68:	4817      	ldr	r0, [pc, #92]	@ (8000fc8 <HAL_InitTick+0xcc>)
 8000f6a:	f003 fe59 	bl	8004c20 <HAL_TIM_Base_Init>
 8000f6e:	4603      	mov	r3, r0
 8000f70:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8000f74:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f78:	2b00      	cmp	r3, #0
 8000f7a:	d11b      	bne.n	8000fb4 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000f7c:	4812      	ldr	r0, [pc, #72]	@ (8000fc8 <HAL_InitTick+0xcc>)
 8000f7e:	f003 fea7 	bl	8004cd0 <HAL_TIM_Base_Start_IT>
 8000f82:	4603      	mov	r3, r0
 8000f84:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8000f88:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d111      	bne.n	8000fb4 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000f90:	2036      	movs	r0, #54	@ 0x36
 8000f92:	f002 f9f7 	bl	8003384 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d808      	bhi.n	8000fae <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	2036      	movs	r0, #54	@ 0x36
 8000fa2:	f002 f9d5 	bl	8003350 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fa6:	4a0a      	ldr	r2, [pc, #40]	@ (8000fd0 <HAL_InitTick+0xd4>)
 8000fa8:	687b      	ldr	r3, [r7, #4]
 8000faa:	6013      	str	r3, [r2, #0]
 8000fac:	e002      	b.n	8000fb4 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000fae:	2301      	movs	r3, #1
 8000fb0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000fb4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3730      	adds	r7, #48	@ 0x30
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	40021000 	.word	0x40021000
 8000fc4:	431bde83 	.word	0x431bde83
 8000fc8:	20000148 	.word	0x20000148
 8000fcc:	40001000 	.word	0x40001000
 8000fd0:	20000024 	.word	0x20000024

08000fd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000fd8:	bf00      	nop
 8000fda:	e7fd      	b.n	8000fd8 <NMI_Handler+0x4>

08000fdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000fdc:	b480      	push	{r7}
 8000fde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000fe0:	bf00      	nop
 8000fe2:	e7fd      	b.n	8000fe0 <HardFault_Handler+0x4>

08000fe4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000fe8:	bf00      	nop
 8000fea:	e7fd      	b.n	8000fe8 <MemManage_Handler+0x4>

08000fec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000fec:	b480      	push	{r7}
 8000fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ff0:	bf00      	nop
 8000ff2:	e7fd      	b.n	8000ff0 <BusFault_Handler+0x4>

08000ff4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ff8:	bf00      	nop
 8000ffa:	e7fd      	b.n	8000ff8 <UsageFault_Handler+0x4>

08000ffc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001000:	bf00      	nop
 8001002:	46bd      	mov	sp, r7
 8001004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001008:	4770      	bx	lr

0800100a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100a:	b480      	push	{r7}
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800100e:	bf00      	nop
 8001010:	46bd      	mov	sp, r7
 8001012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001016:	4770      	bx	lr

08001018 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001018:	b480      	push	{r7}
 800101a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800101c:	bf00      	nop
 800101e:	46bd      	mov	sp, r7
 8001020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001024:	4770      	bx	lr

08001026 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001026:	b480      	push	{r7}
 8001028:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800102a:	bf00      	nop
 800102c:	46bd      	mov	sp, r7
 800102e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001032:	4770      	bx	lr

08001034 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RA_Pin);
 8001038:	2001      	movs	r0, #1
 800103a:	f002 fdd5 	bl	8003be8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}

08001042 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(AL_Pin);
 8001046:	2008      	movs	r0, #8
 8001048:	f002 fdce 	bl	8003be8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}

08001050 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001050:	b580      	push	{r7, lr}
 8001052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 8001054:	4802      	ldr	r0, [pc, #8]	@ (8001060 <DMA1_Channel1_IRQHandler+0x10>)
 8001056:	f002 fac6 	bl	80035e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800105a:	bf00      	nop
 800105c:	bd80      	pop	{r7, pc}
 800105e:	bf00      	nop
 8001060:	200000b4 	.word	0x200000b4

08001064 <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 8001064:	b580      	push	{r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001068:	4802      	ldr	r0, [pc, #8]	@ (8001074 <DMA1_Channel4_IRQHandler+0x10>)
 800106a:	f002 fabc 	bl	80035e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	2000030c 	.word	0x2000030c

08001078 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800107c:	4802      	ldr	r0, [pc, #8]	@ (8001088 <DMA1_Channel5_IRQHandler+0x10>)
 800107e:	f002 fab2 	bl	80035e6 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 8001082:	bf00      	nop
 8001084:	bd80      	pop	{r7, pc}
 8001086:	bf00      	nop
 8001088:	2000036c 	.word	0x2000036c

0800108c <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 800108c:	b580      	push	{r7, lr}
 800108e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc2);
 8001090:	4802      	ldr	r0, [pc, #8]	@ (800109c <ADC1_2_IRQHandler+0x10>)
 8001092:	f001 f931 	bl	80022f8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001096:	bf00      	nop
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop
 800109c:	20000048 	.word	0x20000048

080010a0 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(RB_Pin);
 80010a4:	2040      	movs	r0, #64	@ 0x40
 80010a6:	f002 fd9f 	bl	8003be8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80010aa:	bf00      	nop
 80010ac:	bd80      	pop	{r7, pc}
	...

080010b0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80010b4:	4802      	ldr	r0, [pc, #8]	@ (80010c0 <TIM2_IRQHandler+0x10>)
 80010b6:	f003 ffd7 	bl	8005068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80010ba:	bf00      	nop
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	200001e0 	.word	0x200001e0

080010c4 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 80010c8:	4802      	ldr	r0, [pc, #8]	@ (80010d4 <TIM6_DAC_IRQHandler+0x10>)
 80010ca:	f003 ffcd 	bl	8005068 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 80010ce:	bf00      	nop
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	20000148 	.word	0x20000148

080010d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80010d8:	b480      	push	{r7}
 80010da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80010dc:	4b06      	ldr	r3, [pc, #24]	@ (80010f8 <SystemInit+0x20>)
 80010de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80010e2:	4a05      	ldr	r2, [pc, #20]	@ (80010f8 <SystemInit+0x20>)
 80010e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80010e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010ec:	bf00      	nop
 80010ee:	46bd      	mov	sp, r7
 80010f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010f4:	4770      	bx	lr
 80010f6:	bf00      	nop
 80010f8:	e000ed00 	.word	0xe000ed00

080010fc <MX_TIM1_Init>:
TIM_HandleTypeDef htim2;
TIM_HandleTypeDef htim16;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b09c      	sub	sp, #112	@ 0x70
 8001100:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001102:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001106:	2200      	movs	r2, #0
 8001108:	601a      	str	r2, [r3, #0]
 800110a:	605a      	str	r2, [r3, #4]
 800110c:	609a      	str	r2, [r3, #8]
 800110e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001110:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800111c:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
 8001124:	605a      	str	r2, [r3, #4]
 8001126:	609a      	str	r2, [r3, #8]
 8001128:	60da      	str	r2, [r3, #12]
 800112a:	611a      	str	r2, [r3, #16]
 800112c:	615a      	str	r2, [r3, #20]
 800112e:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001130:	1d3b      	adds	r3, r7, #4
 8001132:	2234      	movs	r2, #52	@ 0x34
 8001134:	2100      	movs	r1, #0
 8001136:	4618      	mov	r0, r3
 8001138:	f005 ff02 	bl	8006f40 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800113c:	4b45      	ldr	r3, [pc, #276]	@ (8001254 <MX_TIM1_Init+0x158>)
 800113e:	4a46      	ldr	r2, [pc, #280]	@ (8001258 <MX_TIM1_Init+0x15c>)
 8001140:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001142:	4b44      	ldr	r3, [pc, #272]	@ (8001254 <MX_TIM1_Init+0x158>)
 8001144:	2200      	movs	r2, #0
 8001146:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001148:	4b42      	ldr	r3, [pc, #264]	@ (8001254 <MX_TIM1_Init+0x158>)
 800114a:	2200      	movs	r2, #0
 800114c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 800114e:	4b41      	ldr	r3, [pc, #260]	@ (8001254 <MX_TIM1_Init+0x158>)
 8001150:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001154:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001156:	4b3f      	ldr	r3, [pc, #252]	@ (8001254 <MX_TIM1_Init+0x158>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800115c:	4b3d      	ldr	r3, [pc, #244]	@ (8001254 <MX_TIM1_Init+0x158>)
 800115e:	2200      	movs	r2, #0
 8001160:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001162:	4b3c      	ldr	r3, [pc, #240]	@ (8001254 <MX_TIM1_Init+0x158>)
 8001164:	2200      	movs	r2, #0
 8001166:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001168:	483a      	ldr	r0, [pc, #232]	@ (8001254 <MX_TIM1_Init+0x158>)
 800116a:	f003 fd59 	bl	8004c20 <HAL_TIM_Base_Init>
 800116e:	4603      	mov	r3, r0
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <MX_TIM1_Init+0x7c>
  {
    Error_Handler();
 8001174:	f7ff fe98 	bl	8000ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001178:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800117c:	663b      	str	r3, [r7, #96]	@ 0x60
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800117e:	f107 0360 	add.w	r3, r7, #96	@ 0x60
 8001182:	4619      	mov	r1, r3
 8001184:	4833      	ldr	r0, [pc, #204]	@ (8001254 <MX_TIM1_Init+0x158>)
 8001186:	f004 f9d3 	bl	8005530 <HAL_TIM_ConfigClockSource>
 800118a:	4603      	mov	r3, r0
 800118c:	2b00      	cmp	r3, #0
 800118e:	d001      	beq.n	8001194 <MX_TIM1_Init+0x98>
  {
    Error_Handler();
 8001190:	f7ff fe8a 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001194:	482f      	ldr	r0, [pc, #188]	@ (8001254 <MX_TIM1_Init+0x158>)
 8001196:	f003 fe05 	bl	8004da4 <HAL_TIM_PWM_Init>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d001      	beq.n	80011a4 <MX_TIM1_Init+0xa8>
  {
    Error_Handler();
 80011a0:	f7ff fe82 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011a4:	2300      	movs	r3, #0
 80011a6:	657b      	str	r3, [r7, #84]	@ 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80011a8:	2300      	movs	r3, #0
 80011aa:	65bb      	str	r3, [r7, #88]	@ 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011ac:	2300      	movs	r3, #0
 80011ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80011b0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80011b4:	4619      	mov	r1, r3
 80011b6:	4827      	ldr	r0, [pc, #156]	@ (8001254 <MX_TIM1_Init+0x158>)
 80011b8:	f004 ff30 	bl	800601c <HAL_TIMEx_MasterConfigSynchronization>
 80011bc:	4603      	mov	r3, r0
 80011be:	2b00      	cmp	r3, #0
 80011c0:	d001      	beq.n	80011c6 <MX_TIM1_Init+0xca>
  {
    Error_Handler();
 80011c2:	f7ff fe71 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011c6:	2360      	movs	r3, #96	@ 0x60
 80011c8:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.Pulse = 0;
 80011ca:	2300      	movs	r3, #0
 80011cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011ce:	2300      	movs	r3, #0
 80011d0:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80011d2:	2300      	movs	r3, #0
 80011d4:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011d6:	2300      	movs	r3, #0
 80011d8:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80011da:	2300      	movs	r3, #0
 80011dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80011de:	2300      	movs	r3, #0
 80011e0:	653b      	str	r3, [r7, #80]	@ 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80011e2:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80011e6:	2200      	movs	r2, #0
 80011e8:	4619      	mov	r1, r3
 80011ea:	481a      	ldr	r0, [pc, #104]	@ (8001254 <MX_TIM1_Init+0x158>)
 80011ec:	f004 f88c 	bl	8005308 <HAL_TIM_PWM_ConfigChannel>
 80011f0:	4603      	mov	r3, r0
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d001      	beq.n	80011fa <MX_TIM1_Init+0xfe>
  {
    Error_Handler();
 80011f6:	f7ff fe57 	bl	8000ea8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80011fa:	2300      	movs	r3, #0
 80011fc:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80011fe:	2300      	movs	r3, #0
 8001200:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001202:	2300      	movs	r3, #0
 8001204:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001206:	2300      	movs	r3, #0
 8001208:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800120a:	2300      	movs	r3, #0
 800120c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 800120e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001212:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001214:	2300      	movs	r3, #0
 8001216:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001218:	2300      	movs	r3, #0
 800121a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 800121c:	2300      	movs	r3, #0
 800121e:	627b      	str	r3, [r7, #36]	@ 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001220:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8001224:	62bb      	str	r3, [r7, #40]	@ 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001226:	2300      	movs	r3, #0
 8001228:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 800122a:	2300      	movs	r3, #0
 800122c:	633b      	str	r3, [r7, #48]	@ 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800122e:	2300      	movs	r3, #0
 8001230:	637b      	str	r3, [r7, #52]	@ 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001232:	1d3b      	adds	r3, r7, #4
 8001234:	4619      	mov	r1, r3
 8001236:	4807      	ldr	r0, [pc, #28]	@ (8001254 <MX_TIM1_Init+0x158>)
 8001238:	f004 ff72 	bl	8006120 <HAL_TIMEx_ConfigBreakDeadTime>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM1_Init+0x14a>
  {
    Error_Handler();
 8001242:	f7ff fe31 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001246:	4803      	ldr	r0, [pc, #12]	@ (8001254 <MX_TIM1_Init+0x158>)
 8001248:	f000 f91c 	bl	8001484 <HAL_TIM_MspPostInit>

}
 800124c:	bf00      	nop
 800124e:	3770      	adds	r7, #112	@ 0x70
 8001250:	46bd      	mov	sp, r7
 8001252:	bd80      	pop	{r7, pc}
 8001254:	20000194 	.word	0x20000194
 8001258:	40012c00 	.word	0x40012c00

0800125c <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800125c:	b580      	push	{r7, lr}
 800125e:	b088      	sub	sp, #32
 8001260:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001262:	f107 0310 	add.w	r3, r7, #16
 8001266:	2200      	movs	r2, #0
 8001268:	601a      	str	r2, [r3, #0]
 800126a:	605a      	str	r2, [r3, #4]
 800126c:	609a      	str	r2, [r3, #8]
 800126e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001270:	1d3b      	adds	r3, r7, #4
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800127a:	4b1e      	ldr	r3, [pc, #120]	@ (80012f4 <MX_TIM2_Init+0x98>)
 800127c:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001280:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001282:	4b1c      	ldr	r3, [pc, #112]	@ (80012f4 <MX_TIM2_Init+0x98>)
 8001284:	2200      	movs	r2, #0
 8001286:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001288:	4b1a      	ldr	r3, [pc, #104]	@ (80012f4 <MX_TIM2_Init+0x98>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800128e:	4b19      	ldr	r3, [pc, #100]	@ (80012f4 <MX_TIM2_Init+0x98>)
 8001290:	f04f 32ff 	mov.w	r2, #4294967295
 8001294:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001296:	4b17      	ldr	r3, [pc, #92]	@ (80012f4 <MX_TIM2_Init+0x98>)
 8001298:	2200      	movs	r2, #0
 800129a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129c:	4b15      	ldr	r3, [pc, #84]	@ (80012f4 <MX_TIM2_Init+0x98>)
 800129e:	2200      	movs	r2, #0
 80012a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80012a2:	4814      	ldr	r0, [pc, #80]	@ (80012f4 <MX_TIM2_Init+0x98>)
 80012a4:	f003 fcbc 	bl	8004c20 <HAL_TIM_Base_Init>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM2_Init+0x56>
  {
    Error_Handler();
 80012ae:	f7ff fdfb 	bl	8000ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012b2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012b6:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80012b8:	f107 0310 	add.w	r3, r7, #16
 80012bc:	4619      	mov	r1, r3
 80012be:	480d      	ldr	r0, [pc, #52]	@ (80012f4 <MX_TIM2_Init+0x98>)
 80012c0:	f004 f936 	bl	8005530 <HAL_TIM_ConfigClockSource>
 80012c4:	4603      	mov	r3, r0
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d001      	beq.n	80012ce <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 80012ca:	f7ff fded 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012ce:	2300      	movs	r3, #0
 80012d0:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012d2:	2300      	movs	r3, #0
 80012d4:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80012d6:	1d3b      	adds	r3, r7, #4
 80012d8:	4619      	mov	r1, r3
 80012da:	4806      	ldr	r0, [pc, #24]	@ (80012f4 <MX_TIM2_Init+0x98>)
 80012dc:	f004 fe9e 	bl	800601c <HAL_TIMEx_MasterConfigSynchronization>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80012e6:	f7ff fddf 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80012ea:	bf00      	nop
 80012ec:	3720      	adds	r7, #32
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	bf00      	nop
 80012f4:	200001e0 	.word	0x200001e0

080012f8 <MX_TIM16_Init>:
/* TIM16 init function */
void MX_TIM16_Init(void)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b094      	sub	sp, #80	@ 0x50
 80012fc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM16_Init 0 */

  /* USER CODE END TIM16_Init 0 */

  TIM_OC_InitTypeDef sConfigOC = {0};
 80012fe:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001302:	2200      	movs	r2, #0
 8001304:	601a      	str	r2, [r3, #0]
 8001306:	605a      	str	r2, [r3, #4]
 8001308:	609a      	str	r2, [r3, #8]
 800130a:	60da      	str	r2, [r3, #12]
 800130c:	611a      	str	r2, [r3, #16]
 800130e:	615a      	str	r2, [r3, #20]
 8001310:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001312:	463b      	mov	r3, r7
 8001314:	2234      	movs	r2, #52	@ 0x34
 8001316:	2100      	movs	r1, #0
 8001318:	4618      	mov	r0, r3
 800131a:	f005 fe11 	bl	8006f40 <memset>

  /* USER CODE BEGIN TIM16_Init 1 */

  /* USER CODE END TIM16_Init 1 */
  htim16.Instance = TIM16;
 800131e:	4b31      	ldr	r3, [pc, #196]	@ (80013e4 <MX_TIM16_Init+0xec>)
 8001320:	4a31      	ldr	r2, [pc, #196]	@ (80013e8 <MX_TIM16_Init+0xf0>)
 8001322:	601a      	str	r2, [r3, #0]
  htim16.Init.Prescaler = 0;
 8001324:	4b2f      	ldr	r3, [pc, #188]	@ (80013e4 <MX_TIM16_Init+0xec>)
 8001326:	2200      	movs	r2, #0
 8001328:	605a      	str	r2, [r3, #4]
  htim16.Init.CounterMode = TIM_COUNTERMODE_UP;
 800132a:	4b2e      	ldr	r3, [pc, #184]	@ (80013e4 <MX_TIM16_Init+0xec>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  htim16.Init.Period = 65535;
 8001330:	4b2c      	ldr	r3, [pc, #176]	@ (80013e4 <MX_TIM16_Init+0xec>)
 8001332:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001336:	60da      	str	r2, [r3, #12]
  htim16.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001338:	4b2a      	ldr	r3, [pc, #168]	@ (80013e4 <MX_TIM16_Init+0xec>)
 800133a:	2200      	movs	r2, #0
 800133c:	611a      	str	r2, [r3, #16]
  htim16.Init.RepetitionCounter = 0;
 800133e:	4b29      	ldr	r3, [pc, #164]	@ (80013e4 <MX_TIM16_Init+0xec>)
 8001340:	2200      	movs	r2, #0
 8001342:	615a      	str	r2, [r3, #20]
  htim16.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001344:	4b27      	ldr	r3, [pc, #156]	@ (80013e4 <MX_TIM16_Init+0xec>)
 8001346:	2200      	movs	r2, #0
 8001348:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim16) != HAL_OK)
 800134a:	4826      	ldr	r0, [pc, #152]	@ (80013e4 <MX_TIM16_Init+0xec>)
 800134c:	f003 fc68 	bl	8004c20 <HAL_TIM_Base_Init>
 8001350:	4603      	mov	r3, r0
 8001352:	2b00      	cmp	r3, #0
 8001354:	d001      	beq.n	800135a <MX_TIM16_Init+0x62>
  {
    Error_Handler();
 8001356:	f7ff fda7 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim16) != HAL_OK)
 800135a:	4822      	ldr	r0, [pc, #136]	@ (80013e4 <MX_TIM16_Init+0xec>)
 800135c:	f003 fd22 	bl	8004da4 <HAL_TIM_PWM_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM16_Init+0x72>
  {
    Error_Handler();
 8001366:	f7ff fd9f 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800136a:	2360      	movs	r3, #96	@ 0x60
 800136c:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.Pulse = 0;
 800136e:	2300      	movs	r3, #0
 8001370:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001372:	2300      	movs	r3, #0
 8001374:	63fb      	str	r3, [r7, #60]	@ 0x3c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001376:	2300      	movs	r3, #0
 8001378:	643b      	str	r3, [r7, #64]	@ 0x40
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800137a:	2300      	movs	r3, #0
 800137c:	647b      	str	r3, [r7, #68]	@ 0x44
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800137e:	2300      	movs	r3, #0
 8001380:	64bb      	str	r3, [r7, #72]	@ 0x48
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_TIM_PWM_ConfigChannel(&htim16, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001386:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800138a:	2200      	movs	r2, #0
 800138c:	4619      	mov	r1, r3
 800138e:	4815      	ldr	r0, [pc, #84]	@ (80013e4 <MX_TIM16_Init+0xec>)
 8001390:	f003 ffba 	bl	8005308 <HAL_TIM_PWM_ConfigChannel>
 8001394:	4603      	mov	r3, r0
 8001396:	2b00      	cmp	r3, #0
 8001398:	d001      	beq.n	800139e <MX_TIM16_Init+0xa6>
  {
    Error_Handler();
 800139a:	f7ff fd85 	bl	8000ea8 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800139e:	2300      	movs	r3, #0
 80013a0:	603b      	str	r3, [r7, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 80013aa:	2300      	movs	r3, #0
 80013ac:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80013b2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80013b6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	633b      	str	r3, [r7, #48]	@ 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim16, &sBreakDeadTimeConfig) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	4619      	mov	r1, r3
 80013c4:	4807      	ldr	r0, [pc, #28]	@ (80013e4 <MX_TIM16_Init+0xec>)
 80013c6:	f004 feab 	bl	8006120 <HAL_TIMEx_ConfigBreakDeadTime>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM16_Init+0xdc>
  {
    Error_Handler();
 80013d0:	f7ff fd6a 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM16_Init 2 */

  /* USER CODE END TIM16_Init 2 */
  HAL_TIM_MspPostInit(&htim16);
 80013d4:	4803      	ldr	r0, [pc, #12]	@ (80013e4 <MX_TIM16_Init+0xec>)
 80013d6:	f000 f855 	bl	8001484 <HAL_TIM_MspPostInit>

}
 80013da:	bf00      	nop
 80013dc:	3750      	adds	r7, #80	@ 0x50
 80013de:	46bd      	mov	sp, r7
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	2000022c 	.word	0x2000022c
 80013e8:	40014400 	.word	0x40014400

080013ec <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b086      	sub	sp, #24
 80013f0:	af00      	add	r7, sp, #0
 80013f2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM1)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	4a1f      	ldr	r2, [pc, #124]	@ (8001478 <HAL_TIM_Base_MspInit+0x8c>)
 80013fa:	4293      	cmp	r3, r2
 80013fc:	d10c      	bne.n	8001418 <HAL_TIM_Base_MspInit+0x2c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013fe:	4b1f      	ldr	r3, [pc, #124]	@ (800147c <HAL_TIM_Base_MspInit+0x90>)
 8001400:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001402:	4a1e      	ldr	r2, [pc, #120]	@ (800147c <HAL_TIM_Base_MspInit+0x90>)
 8001404:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001408:	6613      	str	r3, [r2, #96]	@ 0x60
 800140a:	4b1c      	ldr	r3, [pc, #112]	@ (800147c <HAL_TIM_Base_MspInit+0x90>)
 800140c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800140e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001412:	617b      	str	r3, [r7, #20]
 8001414:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_TIM16_CLK_ENABLE();
  /* USER CODE BEGIN TIM16_MspInit 1 */

  /* USER CODE END TIM16_MspInit 1 */
  }
}
 8001416:	e02a      	b.n	800146e <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM2)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001420:	d114      	bne.n	800144c <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001422:	4b16      	ldr	r3, [pc, #88]	@ (800147c <HAL_TIM_Base_MspInit+0x90>)
 8001424:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001426:	4a15      	ldr	r2, [pc, #84]	@ (800147c <HAL_TIM_Base_MspInit+0x90>)
 8001428:	f043 0301 	orr.w	r3, r3, #1
 800142c:	6593      	str	r3, [r2, #88]	@ 0x58
 800142e:	4b13      	ldr	r3, [pc, #76]	@ (800147c <HAL_TIM_Base_MspInit+0x90>)
 8001430:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001432:	f003 0301 	and.w	r3, r3, #1
 8001436:	613b      	str	r3, [r7, #16]
 8001438:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800143a:	2200      	movs	r2, #0
 800143c:	2100      	movs	r1, #0
 800143e:	201c      	movs	r0, #28
 8001440:	f001 ff86 	bl	8003350 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001444:	201c      	movs	r0, #28
 8001446:	f001 ff9d 	bl	8003384 <HAL_NVIC_EnableIRQ>
}
 800144a:	e010      	b.n	800146e <HAL_TIM_Base_MspInit+0x82>
  else if(tim_baseHandle->Instance==TIM16)
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	4a0b      	ldr	r2, [pc, #44]	@ (8001480 <HAL_TIM_Base_MspInit+0x94>)
 8001452:	4293      	cmp	r3, r2
 8001454:	d10b      	bne.n	800146e <HAL_TIM_Base_MspInit+0x82>
    __HAL_RCC_TIM16_CLK_ENABLE();
 8001456:	4b09      	ldr	r3, [pc, #36]	@ (800147c <HAL_TIM_Base_MspInit+0x90>)
 8001458:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800145a:	4a08      	ldr	r2, [pc, #32]	@ (800147c <HAL_TIM_Base_MspInit+0x90>)
 800145c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001460:	6613      	str	r3, [r2, #96]	@ 0x60
 8001462:	4b06      	ldr	r3, [pc, #24]	@ (800147c <HAL_TIM_Base_MspInit+0x90>)
 8001464:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001466:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800146a:	60fb      	str	r3, [r7, #12]
 800146c:	68fb      	ldr	r3, [r7, #12]
}
 800146e:	bf00      	nop
 8001470:	3718      	adds	r7, #24
 8001472:	46bd      	mov	sp, r7
 8001474:	bd80      	pop	{r7, pc}
 8001476:	bf00      	nop
 8001478:	40012c00 	.word	0x40012c00
 800147c:	40021000 	.word	0x40021000
 8001480:	40014400 	.word	0x40014400

08001484 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08a      	sub	sp, #40	@ 0x28
 8001488:	af00      	add	r7, sp, #0
 800148a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148c:	f107 0314 	add.w	r3, r7, #20
 8001490:	2200      	movs	r2, #0
 8001492:	601a      	str	r2, [r3, #0]
 8001494:	605a      	str	r2, [r3, #4]
 8001496:	609a      	str	r2, [r3, #8]
 8001498:	60da      	str	r2, [r3, #12]
 800149a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	4a23      	ldr	r2, [pc, #140]	@ (8001530 <HAL_TIM_MspPostInit+0xac>)
 80014a2:	4293      	cmp	r3, r2
 80014a4:	d11e      	bne.n	80014e4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014a6:	4b23      	ldr	r3, [pc, #140]	@ (8001534 <HAL_TIM_MspPostInit+0xb0>)
 80014a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014aa:	4a22      	ldr	r2, [pc, #136]	@ (8001534 <HAL_TIM_MspPostInit+0xb0>)
 80014ac:	f043 0301 	orr.w	r3, r3, #1
 80014b0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014b2:	4b20      	ldr	r3, [pc, #128]	@ (8001534 <HAL_TIM_MspPostInit+0xb0>)
 80014b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014b6:	f003 0301 	and.w	r3, r3, #1
 80014ba:	613b      	str	r3, [r7, #16]
 80014bc:	693b      	ldr	r3, [r7, #16]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = PWMR_Pin;
 80014be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014c2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014c4:	2302      	movs	r3, #2
 80014c6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80014d0:	2306      	movs	r3, #6
 80014d2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWMR_GPIO_Port, &GPIO_InitStruct);
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	4619      	mov	r1, r3
 80014da:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80014de:	f002 f9d1 	bl	8003884 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM16_MspPostInit 1 */

  /* USER CODE END TIM16_MspPostInit 1 */
  }

}
 80014e2:	e021      	b.n	8001528 <HAL_TIM_MspPostInit+0xa4>
  else if(timHandle->Instance==TIM16)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a13      	ldr	r2, [pc, #76]	@ (8001538 <HAL_TIM_MspPostInit+0xb4>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d11c      	bne.n	8001528 <HAL_TIM_MspPostInit+0xa4>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ee:	4b11      	ldr	r3, [pc, #68]	@ (8001534 <HAL_TIM_MspPostInit+0xb0>)
 80014f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014f2:	4a10      	ldr	r2, [pc, #64]	@ (8001534 <HAL_TIM_MspPostInit+0xb0>)
 80014f4:	f043 0301 	orr.w	r3, r3, #1
 80014f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80014fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001534 <HAL_TIM_MspPostInit+0xb0>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80014fe:	f003 0301 	and.w	r3, r3, #1
 8001502:	60fb      	str	r3, [r7, #12]
 8001504:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PWM_L_Pin;
 8001506:	2340      	movs	r3, #64	@ 0x40
 8001508:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150a:	2302      	movs	r3, #2
 800150c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150e:	2300      	movs	r3, #0
 8001510:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001512:	2300      	movs	r3, #0
 8001514:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM16;
 8001516:	2301      	movs	r3, #1
 8001518:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(PWM_L_GPIO_Port, &GPIO_InitStruct);
 800151a:	f107 0314 	add.w	r3, r7, #20
 800151e:	4619      	mov	r1, r3
 8001520:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001524:	f002 f9ae 	bl	8003884 <HAL_GPIO_Init>
}
 8001528:	bf00      	nop
 800152a:	3728      	adds	r7, #40	@ 0x28
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	40012c00 	.word	0x40012c00
 8001534:	40021000 	.word	0x40021000
 8001538:	40014400 	.word	0x40014400

0800153c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800153c:	b580      	push	{r7, lr}
 800153e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001540:	4b22      	ldr	r3, [pc, #136]	@ (80015cc <MX_USART1_UART_Init+0x90>)
 8001542:	4a23      	ldr	r2, [pc, #140]	@ (80015d0 <MX_USART1_UART_Init+0x94>)
 8001544:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8001546:	4b21      	ldr	r3, [pc, #132]	@ (80015cc <MX_USART1_UART_Init+0x90>)
 8001548:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800154c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800154e:	4b1f      	ldr	r3, [pc, #124]	@ (80015cc <MX_USART1_UART_Init+0x90>)
 8001550:	2200      	movs	r2, #0
 8001552:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001554:	4b1d      	ldr	r3, [pc, #116]	@ (80015cc <MX_USART1_UART_Init+0x90>)
 8001556:	2200      	movs	r2, #0
 8001558:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800155a:	4b1c      	ldr	r3, [pc, #112]	@ (80015cc <MX_USART1_UART_Init+0x90>)
 800155c:	2200      	movs	r2, #0
 800155e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001560:	4b1a      	ldr	r3, [pc, #104]	@ (80015cc <MX_USART1_UART_Init+0x90>)
 8001562:	220c      	movs	r2, #12
 8001564:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001566:	4b19      	ldr	r3, [pc, #100]	@ (80015cc <MX_USART1_UART_Init+0x90>)
 8001568:	2200      	movs	r2, #0
 800156a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800156c:	4b17      	ldr	r3, [pc, #92]	@ (80015cc <MX_USART1_UART_Init+0x90>)
 800156e:	2200      	movs	r2, #0
 8001570:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001572:	4b16      	ldr	r3, [pc, #88]	@ (80015cc <MX_USART1_UART_Init+0x90>)
 8001574:	2200      	movs	r2, #0
 8001576:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001578:	4b14      	ldr	r3, [pc, #80]	@ (80015cc <MX_USART1_UART_Init+0x90>)
 800157a:	2200      	movs	r2, #0
 800157c:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800157e:	4b13      	ldr	r3, [pc, #76]	@ (80015cc <MX_USART1_UART_Init+0x90>)
 8001580:	2200      	movs	r2, #0
 8001582:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001584:	4811      	ldr	r0, [pc, #68]	@ (80015cc <MX_USART1_UART_Init+0x90>)
 8001586:	f004 fe9d 	bl	80062c4 <HAL_UART_Init>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8001590:	f7ff fc8a 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001594:	2100      	movs	r1, #0
 8001596:	480d      	ldr	r0, [pc, #52]	@ (80015cc <MX_USART1_UART_Init+0x90>)
 8001598:	f005 fc08 	bl	8006dac <HAL_UARTEx_SetTxFifoThreshold>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 80015a2:	f7ff fc81 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80015a6:	2100      	movs	r1, #0
 80015a8:	4808      	ldr	r0, [pc, #32]	@ (80015cc <MX_USART1_UART_Init+0x90>)
 80015aa:	f005 fc3d 	bl	8006e28 <HAL_UARTEx_SetRxFifoThreshold>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 80015b4:	f7ff fc78 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 80015b8:	4804      	ldr	r0, [pc, #16]	@ (80015cc <MX_USART1_UART_Init+0x90>)
 80015ba:	f005 fbbe 	bl	8006d3a <HAL_UARTEx_DisableFifoMode>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 80015c4:	f7ff fc70 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80015c8:	bf00      	nop
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000278 	.word	0x20000278
 80015d0:	40013800 	.word	0x40013800

080015d4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b09a      	sub	sp, #104	@ 0x68
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015dc:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80015e0:	2200      	movs	r2, #0
 80015e2:	601a      	str	r2, [r3, #0]
 80015e4:	605a      	str	r2, [r3, #4]
 80015e6:	609a      	str	r2, [r3, #8]
 80015e8:	60da      	str	r2, [r3, #12]
 80015ea:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80015ec:	f107 0310 	add.w	r3, r7, #16
 80015f0:	2244      	movs	r2, #68	@ 0x44
 80015f2:	2100      	movs	r1, #0
 80015f4:	4618      	mov	r0, r3
 80015f6:	f005 fca3 	bl	8006f40 <memset>
  if(uartHandle->Instance==USART1)
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a49      	ldr	r2, [pc, #292]	@ (8001724 <HAL_UART_MspInit+0x150>)
 8001600:	4293      	cmp	r3, r2
 8001602:	f040 808b 	bne.w	800171c <HAL_UART_MspInit+0x148>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001606:	2301      	movs	r3, #1
 8001608:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800160a:	2300      	movs	r3, #0
 800160c:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800160e:	f107 0310 	add.w	r3, r7, #16
 8001612:	4618      	mov	r0, r3
 8001614:	f003 f914 	bl	8004840 <HAL_RCCEx_PeriphCLKConfig>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800161e:	f7ff fc43 	bl	8000ea8 <Error_Handler>
    }

    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001622:	4b41      	ldr	r3, [pc, #260]	@ (8001728 <HAL_UART_MspInit+0x154>)
 8001624:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001626:	4a40      	ldr	r2, [pc, #256]	@ (8001728 <HAL_UART_MspInit+0x154>)
 8001628:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800162c:	6613      	str	r3, [r2, #96]	@ 0x60
 800162e:	4b3e      	ldr	r3, [pc, #248]	@ (8001728 <HAL_UART_MspInit+0x154>)
 8001630:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001632:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001636:	60fb      	str	r3, [r7, #12]
 8001638:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800163a:	4b3b      	ldr	r3, [pc, #236]	@ (8001728 <HAL_UART_MspInit+0x154>)
 800163c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800163e:	4a3a      	ldr	r2, [pc, #232]	@ (8001728 <HAL_UART_MspInit+0x154>)
 8001640:	f043 0301 	orr.w	r3, r3, #1
 8001644:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001646:	4b38      	ldr	r3, [pc, #224]	@ (8001728 <HAL_UART_MspInit+0x154>)
 8001648:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800164a:	f003 0301 	and.w	r3, r3, #1
 800164e:	60bb      	str	r3, [r7, #8]
 8001650:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001652:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8001656:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001660:	2300      	movs	r3, #0
 8001662:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001664:	2307      	movs	r3, #7
 8001666:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001668:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800166c:	4619      	mov	r1, r3
 800166e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001672:	f002 f907 	bl	8003884 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel4;
 8001676:	4b2d      	ldr	r3, [pc, #180]	@ (800172c <HAL_UART_MspInit+0x158>)
 8001678:	4a2d      	ldr	r2, [pc, #180]	@ (8001730 <HAL_UART_MspInit+0x15c>)
 800167a:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Request = DMA_REQUEST_USART1_RX;
 800167c:	4b2b      	ldr	r3, [pc, #172]	@ (800172c <HAL_UART_MspInit+0x158>)
 800167e:	2218      	movs	r2, #24
 8001680:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001682:	4b2a      	ldr	r3, [pc, #168]	@ (800172c <HAL_UART_MspInit+0x158>)
 8001684:	2200      	movs	r2, #0
 8001686:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001688:	4b28      	ldr	r3, [pc, #160]	@ (800172c <HAL_UART_MspInit+0x158>)
 800168a:	2200      	movs	r2, #0
 800168c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 800168e:	4b27      	ldr	r3, [pc, #156]	@ (800172c <HAL_UART_MspInit+0x158>)
 8001690:	2280      	movs	r2, #128	@ 0x80
 8001692:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001694:	4b25      	ldr	r3, [pc, #148]	@ (800172c <HAL_UART_MspInit+0x158>)
 8001696:	2200      	movs	r2, #0
 8001698:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800169a:	4b24      	ldr	r3, [pc, #144]	@ (800172c <HAL_UART_MspInit+0x158>)
 800169c:	2200      	movs	r2, #0
 800169e:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 80016a0:	4b22      	ldr	r3, [pc, #136]	@ (800172c <HAL_UART_MspInit+0x158>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80016a6:	4b21      	ldr	r3, [pc, #132]	@ (800172c <HAL_UART_MspInit+0x158>)
 80016a8:	2200      	movs	r2, #0
 80016aa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 80016ac:	481f      	ldr	r0, [pc, #124]	@ (800172c <HAL_UART_MspInit+0x158>)
 80016ae:	f001 fe77 	bl	80033a0 <HAL_DMA_Init>
 80016b2:	4603      	mov	r3, r0
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d001      	beq.n	80016bc <HAL_UART_MspInit+0xe8>
    {
      Error_Handler();
 80016b8:	f7ff fbf6 	bl	8000ea8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	4a1b      	ldr	r2, [pc, #108]	@ (800172c <HAL_UART_MspInit+0x158>)
 80016c0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80016c4:	4a19      	ldr	r2, [pc, #100]	@ (800172c <HAL_UART_MspInit+0x158>)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6293      	str	r3, [r2, #40]	@ 0x28

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel5;
 80016ca:	4b1a      	ldr	r3, [pc, #104]	@ (8001734 <HAL_UART_MspInit+0x160>)
 80016cc:	4a1a      	ldr	r2, [pc, #104]	@ (8001738 <HAL_UART_MspInit+0x164>)
 80016ce:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Request = DMA_REQUEST_USART1_TX;
 80016d0:	4b18      	ldr	r3, [pc, #96]	@ (8001734 <HAL_UART_MspInit+0x160>)
 80016d2:	2219      	movs	r2, #25
 80016d4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80016d6:	4b17      	ldr	r3, [pc, #92]	@ (8001734 <HAL_UART_MspInit+0x160>)
 80016d8:	2210      	movs	r2, #16
 80016da:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80016dc:	4b15      	ldr	r3, [pc, #84]	@ (8001734 <HAL_UART_MspInit+0x160>)
 80016de:	2200      	movs	r2, #0
 80016e0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80016e2:	4b14      	ldr	r3, [pc, #80]	@ (8001734 <HAL_UART_MspInit+0x160>)
 80016e4:	2280      	movs	r2, #128	@ 0x80
 80016e6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80016e8:	4b12      	ldr	r3, [pc, #72]	@ (8001734 <HAL_UART_MspInit+0x160>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80016ee:	4b11      	ldr	r3, [pc, #68]	@ (8001734 <HAL_UART_MspInit+0x160>)
 80016f0:	2200      	movs	r2, #0
 80016f2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 80016f4:	4b0f      	ldr	r3, [pc, #60]	@ (8001734 <HAL_UART_MspInit+0x160>)
 80016f6:	2200      	movs	r2, #0
 80016f8:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80016fa:	4b0e      	ldr	r3, [pc, #56]	@ (8001734 <HAL_UART_MspInit+0x160>)
 80016fc:	2200      	movs	r2, #0
 80016fe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8001700:	480c      	ldr	r0, [pc, #48]	@ (8001734 <HAL_UART_MspInit+0x160>)
 8001702:	f001 fe4d 	bl	80033a0 <HAL_DMA_Init>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <HAL_UART_MspInit+0x13c>
    {
      Error_Handler();
 800170c:	f7ff fbcc 	bl	8000ea8 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	4a08      	ldr	r2, [pc, #32]	@ (8001734 <HAL_UART_MspInit+0x160>)
 8001714:	67da      	str	r2, [r3, #124]	@ 0x7c
 8001716:	4a07      	ldr	r2, [pc, #28]	@ (8001734 <HAL_UART_MspInit+0x160>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	6293      	str	r3, [r2, #40]	@ 0x28

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800171c:	bf00      	nop
 800171e:	3768      	adds	r7, #104	@ 0x68
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	40013800 	.word	0x40013800
 8001728:	40021000 	.word	0x40021000
 800172c:	2000030c 	.word	0x2000030c
 8001730:	40020044 	.word	0x40020044
 8001734:	2000036c 	.word	0x2000036c
 8001738:	40020058 	.word	0x40020058

0800173c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800173c:	480d      	ldr	r0, [pc, #52]	@ (8001774 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800173e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001740:	f7ff fcca 	bl	80010d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001744:	480c      	ldr	r0, [pc, #48]	@ (8001778 <LoopForever+0x6>)
  ldr r1, =_edata
 8001746:	490d      	ldr	r1, [pc, #52]	@ (800177c <LoopForever+0xa>)
  ldr r2, =_sidata
 8001748:	4a0d      	ldr	r2, [pc, #52]	@ (8001780 <LoopForever+0xe>)
  movs r3, #0
 800174a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800174c:	e002      	b.n	8001754 <LoopCopyDataInit>

0800174e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800174e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001750:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001752:	3304      	adds	r3, #4

08001754 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001754:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001756:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001758:	d3f9      	bcc.n	800174e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800175a:	4a0a      	ldr	r2, [pc, #40]	@ (8001784 <LoopForever+0x12>)
  ldr r4, =_ebss
 800175c:	4c0a      	ldr	r4, [pc, #40]	@ (8001788 <LoopForever+0x16>)
  movs r3, #0
 800175e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001760:	e001      	b.n	8001766 <LoopFillZerobss>

08001762 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001762:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001764:	3204      	adds	r2, #4

08001766 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001766:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001768:	d3fb      	bcc.n	8001762 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800176a:	f005 fbf1 	bl	8006f50 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 800176e:	f7ff f8eb 	bl	8000948 <main>

08001772 <LoopForever>:

LoopForever:
    b LoopForever
 8001772:	e7fe      	b.n	8001772 <LoopForever>
  ldr   r0, =_estack
 8001774:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 8001778:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800177c:	2000002c 	.word	0x2000002c
  ldr r2, =_sidata
 8001780:	08007000 	.word	0x08007000
  ldr r2, =_sbss
 8001784:	2000002c 	.word	0x2000002c
  ldr r4, =_ebss
 8001788:	20000464 	.word	0x20000464

0800178c <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 800178c:	e7fe      	b.n	800178c <COMP1_2_3_IRQHandler>
	...

08001790 <BSP_LED_Init>:
  *         This parameter can be one of following parameters:
  *           @arg  LED2
  * @retval BSP status
  */
int32_t BSP_LED_Init(Led_TypeDef Led)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b088      	sub	sp, #32
 8001794:	af00      	add	r7, sp, #0
 8001796:	4603      	mov	r3, r0
 8001798:	71fb      	strb	r3, [r7, #7]
  GPIO_InitTypeDef  gpio_init_structure;

  /* Enable the GPIO LED Clock */
  LED2_GPIO_CLK_ENABLE();
 800179a:	4b16      	ldr	r3, [pc, #88]	@ (80017f4 <BSP_LED_Init+0x64>)
 800179c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800179e:	4a15      	ldr	r2, [pc, #84]	@ (80017f4 <BSP_LED_Init+0x64>)
 80017a0:	f043 0301 	orr.w	r3, r3, #1
 80017a4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80017a6:	4b13      	ldr	r3, [pc, #76]	@ (80017f4 <BSP_LED_Init+0x64>)
 80017a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	60bb      	str	r3, [r7, #8]
 80017b0:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO_LED pin */
  gpio_init_structure.Pin   = LED_PIN[Led];
 80017b2:	2320      	movs	r3, #32
 80017b4:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 80017b6:	2301      	movs	r3, #1
 80017b8:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_NOPULL;
 80017ba:	2300      	movs	r3, #0
 80017bc:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017be:	2303      	movs	r3, #3
 80017c0:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LED_PORT[Led], &gpio_init_structure);
 80017c2:	79fb      	ldrb	r3, [r7, #7]
 80017c4:	4a0c      	ldr	r2, [pc, #48]	@ (80017f8 <BSP_LED_Init+0x68>)
 80017c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017ca:	f107 020c 	add.w	r2, r7, #12
 80017ce:	4611      	mov	r1, r2
 80017d0:	4618      	mov	r0, r3
 80017d2:	f002 f857 	bl	8003884 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_RESET);
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	4a07      	ldr	r2, [pc, #28]	@ (80017f8 <BSP_LED_Init+0x68>)
 80017da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80017de:	2120      	movs	r1, #32
 80017e0:	2200      	movs	r2, #0
 80017e2:	4618      	mov	r0, r3
 80017e4:	f002 f9e8 	bl	8003bb8 <HAL_GPIO_WritePin>

  return BSP_ERROR_NONE;
 80017e8:	2300      	movs	r3, #0
}
 80017ea:	4618      	mov	r0, r3
 80017ec:	3720      	adds	r7, #32
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000
 80017f8:	2000001c 	.word	0x2000001c

080017fc <BSP_COM_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval BSP error code
  */
int32_t BSP_COM_Init(COM_TypeDef COM, COM_InitTypeDef *COM_Init)
{
 80017fc:	b580      	push	{r7, lr}
 80017fe:	b084      	sub	sp, #16
 8001800:	af00      	add	r7, sp, #0
 8001802:	4603      	mov	r3, r0
 8001804:	6039      	str	r1, [r7, #0]
 8001806:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8001808:	2300      	movs	r3, #0
 800180a:	60fb      	str	r3, [r7, #12]

  if(COM > COMn)
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	2b01      	cmp	r3, #1
 8001810:	d903      	bls.n	800181a <BSP_COM_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8001812:	f06f 0301 	mvn.w	r3, #1
 8001816:	60fb      	str	r3, [r7, #12]
 8001818:	e018      	b.n	800184c <BSP_COM_Init+0x50>
  }
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 0)
    /* Init the UART Msp */
    COM1_MspInit(&hcom_uart[COM]);
 800181a:	79fb      	ldrb	r3, [r7, #7]
 800181c:	2294      	movs	r2, #148	@ 0x94
 800181e:	fb02 f303 	mul.w	r3, r2, r3
 8001822:	4a0d      	ldr	r2, [pc, #52]	@ (8001858 <BSP_COM_Init+0x5c>)
 8001824:	4413      	add	r3, r2
 8001826:	4618      	mov	r0, r3
 8001828:	f000 f84a 	bl	80018c0 <COM1_MspInit>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#endif

    if(MX_LPUART1_Init(&hcom_uart[COM], COM_Init) != HAL_OK)
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	2294      	movs	r2, #148	@ 0x94
 8001830:	fb02 f303 	mul.w	r3, r2, r3
 8001834:	4a08      	ldr	r2, [pc, #32]	@ (8001858 <BSP_COM_Init+0x5c>)
 8001836:	4413      	add	r3, r2
 8001838:	6839      	ldr	r1, [r7, #0]
 800183a:	4618      	mov	r0, r3
 800183c:	f000 f80e 	bl	800185c <MX_LPUART1_Init>
 8001840:	4603      	mov	r3, r0
 8001842:	2b00      	cmp	r3, #0
 8001844:	d002      	beq.n	800184c <BSP_COM_Init+0x50>
    {
      return BSP_ERROR_PERIPH_FAILURE;
 8001846:	f06f 0303 	mvn.w	r3, #3
 800184a:	e000      	b.n	800184e <BSP_COM_Init+0x52>
    }
  }

  return ret;
 800184c:	68fb      	ldr	r3, [r7, #12]
}
 800184e:	4618      	mov	r0, r3
 8001850:	3710      	adds	r7, #16
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}
 8001856:	bf00      	nop
 8001858:	200003cc 	.word	0x200003cc

0800185c <MX_LPUART1_Init>:
  * @param  COM_Init Pointer to a UART_HandleTypeDef structure that contains the
  *                  configuration information for the specified USART peripheral.
  * @retval HAL error code
  */
__weak HAL_StatusTypeDef MX_LPUART1_Init(UART_HandleTypeDef *huart, MX_UART_InitTypeDef *COM_Init)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
 8001864:	6039      	str	r1, [r7, #0]
  /* USART configuration */
 huart->Instance          = COM_USART[COM1];
 8001866:	4b15      	ldr	r3, [pc, #84]	@ (80018bc <MX_LPUART1_Init+0x60>)
 8001868:	681a      	ldr	r2, [r3, #0]
 800186a:	687b      	ldr	r3, [r7, #4]
 800186c:	601a      	str	r2, [r3, #0]
 huart->Init.BaudRate     = COM_Init->BaudRate;
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681a      	ldr	r2, [r3, #0]
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	605a      	str	r2, [r3, #4]
 huart->Init.Mode         = UART_MODE_TX_RX;
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	220c      	movs	r2, #12
 800187a:	615a      	str	r2, [r3, #20]
 huart->Init.Parity       = (uint32_t)COM_Init->Parity;
 800187c:	683b      	ldr	r3, [r7, #0]
 800187e:	895b      	ldrh	r3, [r3, #10]
 8001880:	461a      	mov	r2, r3
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	611a      	str	r2, [r3, #16]
 huart->Init.WordLength   = COM_Init->WordLength;
 8001886:	683b      	ldr	r3, [r7, #0]
 8001888:	685a      	ldr	r2, [r3, #4]
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	609a      	str	r2, [r3, #8]
 huart->Init.StopBits     = (uint32_t)COM_Init->StopBits;
 800188e:	683b      	ldr	r3, [r7, #0]
 8001890:	891b      	ldrh	r3, [r3, #8]
 8001892:	461a      	mov	r2, r3
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	60da      	str	r2, [r3, #12]
 huart->Init.HwFlowCtl    = (uint32_t)COM_Init->HwFlowCtl;
 8001898:	683b      	ldr	r3, [r7, #0]
 800189a:	899b      	ldrh	r3, [r3, #12]
 800189c:	461a      	mov	r2, r3
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	619a      	str	r2, [r3, #24]
 huart->Init.OverSampling = UART_OVERSAMPLING_8;
 80018a2:	687b      	ldr	r3, [r7, #4]
 80018a4:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018a8:	61da      	str	r2, [r3, #28]

 return HAL_UART_Init(huart);
 80018aa:	6878      	ldr	r0, [r7, #4]
 80018ac:	f004 fd0a 	bl	80062c4 <HAL_UART_Init>
 80018b0:	4603      	mov	r3, r0
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3708      	adds	r7, #8
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bd80      	pop	{r7, pc}
 80018ba:	bf00      	nop
 80018bc:	20000020 	.word	0x20000020

080018c0 <COM1_MspInit>:
  * @brief  Initializes COM1 MSP.
  * @param  huart UART handle
  * @retval BSP status
  */
static void COM1_MspInit(UART_HandleTypeDef *huart)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b08a      	sub	sp, #40	@ 0x28
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);

  /* Enable GPIO clock */
  COM1_TX_GPIO_CLK_ENABLE();
 80018c8:	4b22      	ldr	r3, [pc, #136]	@ (8001954 <COM1_MspInit+0x94>)
 80018ca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018cc:	4a21      	ldr	r2, [pc, #132]	@ (8001954 <COM1_MspInit+0x94>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018d4:	4b1f      	ldr	r3, [pc, #124]	@ (8001954 <COM1_MspInit+0x94>)
 80018d6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018d8:	f003 0301 	and.w	r3, r3, #1
 80018dc:	613b      	str	r3, [r7, #16]
 80018de:	693b      	ldr	r3, [r7, #16]
  COM1_RX_GPIO_CLK_ENABLE();
 80018e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001954 <COM1_MspInit+0x94>)
 80018e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018e4:	4a1b      	ldr	r2, [pc, #108]	@ (8001954 <COM1_MspInit+0x94>)
 80018e6:	f043 0301 	orr.w	r3, r3, #1
 80018ea:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80018ec:	4b19      	ldr	r3, [pc, #100]	@ (8001954 <COM1_MspInit+0x94>)
 80018ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80018f0:	f003 0301 	and.w	r3, r3, #1
 80018f4:	60fb      	str	r3, [r7, #12]
 80018f6:	68fb      	ldr	r3, [r7, #12]

  /* Enable USART clock */
  COM1_CLK_ENABLE();
 80018f8:	4b16      	ldr	r3, [pc, #88]	@ (8001954 <COM1_MspInit+0x94>)
 80018fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80018fc:	4a15      	ldr	r2, [pc, #84]	@ (8001954 <COM1_MspInit+0x94>)
 80018fe:	f043 0301 	orr.w	r3, r3, #1
 8001902:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8001904:	4b13      	ldr	r3, [pc, #76]	@ (8001954 <COM1_MspInit+0x94>)
 8001906:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001908:	f003 0301 	and.w	r3, r3, #1
 800190c:	60bb      	str	r3, [r7, #8]
 800190e:	68bb      	ldr	r3, [r7, #8]

  /* Configure USART Tx as alternate function */
  gpio_init_structure.Pin       = COM1_TX_PIN;
 8001910:	2304      	movs	r3, #4
 8001912:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8001914:	2302      	movs	r3, #2
 8001916:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8001918:	2302      	movs	r3, #2
 800191a:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800191c:	2301      	movs	r3, #1
 800191e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Alternate = COM1_TX_AF;
 8001920:	230c      	movs	r3, #12
 8001922:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_TX_GPIO_PORT, &gpio_init_structure);
 8001924:	f107 0314 	add.w	r3, r7, #20
 8001928:	4619      	mov	r1, r3
 800192a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800192e:	f001 ffa9 	bl	8003884 <HAL_GPIO_Init>

  /* Configure USART Rx as alternate function */
  gpio_init_structure.Pin = COM1_RX_PIN;
 8001932:	2308      	movs	r3, #8
 8001934:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8001936:	2302      	movs	r3, #2
 8001938:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Alternate = COM1_RX_AF;
 800193a:	230c      	movs	r3, #12
 800193c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(COM1_RX_GPIO_PORT, &gpio_init_structure);
 800193e:	f107 0314 	add.w	r3, r7, #20
 8001942:	4619      	mov	r1, r3
 8001944:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001948:	f001 ff9c 	bl	8003884 <HAL_GPIO_Init>
}
 800194c:	bf00      	nop
 800194e:	3728      	adds	r7, #40	@ 0x28
 8001950:	46bd      	mov	sp, r7
 8001952:	bd80      	pop	{r7, pc}
 8001954:	40021000 	.word	0x40021000

08001958 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001958:	b580      	push	{r7, lr}
 800195a:	b082      	sub	sp, #8
 800195c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800195e:	2300      	movs	r3, #0
 8001960:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001962:	2003      	movs	r0, #3
 8001964:	f001 fce9 	bl	800333a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001968:	200f      	movs	r0, #15
 800196a:	f7ff fac7 	bl	8000efc <HAL_InitTick>
 800196e:	4603      	mov	r3, r0
 8001970:	2b00      	cmp	r3, #0
 8001972:	d002      	beq.n	800197a <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8001974:	2301      	movs	r3, #1
 8001976:	71fb      	strb	r3, [r7, #7]
 8001978:	e001      	b.n	800197e <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800197a:	f7ff fa9b 	bl	8000eb4 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800197e:	79fb      	ldrb	r3, [r7, #7]

}
 8001980:	4618      	mov	r0, r3
 8001982:	3708      	adds	r7, #8
 8001984:	46bd      	mov	sp, r7
 8001986:	bd80      	pop	{r7, pc}

08001988 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800198c:	4b05      	ldr	r3, [pc, #20]	@ (80019a4 <HAL_IncTick+0x1c>)
 800198e:	681a      	ldr	r2, [r3, #0]
 8001990:	4b05      	ldr	r3, [pc, #20]	@ (80019a8 <HAL_IncTick+0x20>)
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	4413      	add	r3, r2
 8001996:	4a03      	ldr	r2, [pc, #12]	@ (80019a4 <HAL_IncTick+0x1c>)
 8001998:	6013      	str	r3, [r2, #0]
}
 800199a:	bf00      	nop
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	20000460 	.word	0x20000460
 80019a8:	20000028 	.word	0x20000028

080019ac <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  return uwTick;
 80019b0:	4b03      	ldr	r3, [pc, #12]	@ (80019c0 <HAL_GetTick+0x14>)
 80019b2:	681b      	ldr	r3, [r3, #0]
}
 80019b4:	4618      	mov	r0, r3
 80019b6:	46bd      	mov	sp, r7
 80019b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019bc:	4770      	bx	lr
 80019be:	bf00      	nop
 80019c0:	20000460 	.word	0x20000460

080019c4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b084      	sub	sp, #16
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80019cc:	f7ff ffee 	bl	80019ac <HAL_GetTick>
 80019d0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80019d6:	68fb      	ldr	r3, [r7, #12]
 80019d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80019dc:	d004      	beq.n	80019e8 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80019de:	4b09      	ldr	r3, [pc, #36]	@ (8001a04 <HAL_Delay+0x40>)
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	68fa      	ldr	r2, [r7, #12]
 80019e4:	4413      	add	r3, r2
 80019e6:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80019e8:	bf00      	nop
 80019ea:	f7ff ffdf 	bl	80019ac <HAL_GetTick>
 80019ee:	4602      	mov	r2, r0
 80019f0:	68bb      	ldr	r3, [r7, #8]
 80019f2:	1ad3      	subs	r3, r2, r3
 80019f4:	68fa      	ldr	r2, [r7, #12]
 80019f6:	429a      	cmp	r2, r3
 80019f8:	d8f7      	bhi.n	80019ea <HAL_Delay+0x26>
  {
  }
}
 80019fa:	bf00      	nop
 80019fc:	bf00      	nop
 80019fe:	3710      	adds	r7, #16
 8001a00:	46bd      	mov	sp, r7
 8001a02:	bd80      	pop	{r7, pc}
 8001a04:	20000028 	.word	0x20000028

08001a08 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b083      	sub	sp, #12
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	689b      	ldr	r3, [r3, #8]
 8001a16:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001a1a:	683b      	ldr	r3, [r7, #0]
 8001a1c:	431a      	orrs	r2, r3
 8001a1e:	687b      	ldr	r3, [r7, #4]
 8001a20:	609a      	str	r2, [r3, #8]
}
 8001a22:	bf00      	nop
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr

08001a2e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001a2e:	b480      	push	{r7}
 8001a30:	b083      	sub	sp, #12
 8001a32:	af00      	add	r7, sp, #0
 8001a34:	6078      	str	r0, [r7, #4]
 8001a36:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	689b      	ldr	r3, [r3, #8]
 8001a3c:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001a40:	683b      	ldr	r3, [r7, #0]
 8001a42:	431a      	orrs	r2, r3
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	609a      	str	r2, [r3, #8]
}
 8001a48:	bf00      	nop
 8001a4a:	370c      	adds	r7, #12
 8001a4c:	46bd      	mov	sp, r7
 8001a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a52:	4770      	bx	lr

08001a54 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001a54:	b480      	push	{r7}
 8001a56:	b083      	sub	sp, #12
 8001a58:	af00      	add	r7, sp, #0
 8001a5a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	370c      	adds	r7, #12
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
 8001a7c:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	3360      	adds	r3, #96	@ 0x60
 8001a82:	461a      	mov	r2, r3
 8001a84:	68bb      	ldr	r3, [r7, #8]
 8001a86:	009b      	lsls	r3, r3, #2
 8001a88:	4413      	add	r3, r2
 8001a8a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	681a      	ldr	r2, [r3, #0]
 8001a90:	4b08      	ldr	r3, [pc, #32]	@ (8001ab4 <LL_ADC_SetOffset+0x44>)
 8001a92:	4013      	ands	r3, r2
 8001a94:	687a      	ldr	r2, [r7, #4]
 8001a96:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8001a9a:	683a      	ldr	r2, [r7, #0]
 8001a9c:	430a      	orrs	r2, r1
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8001aa4:	697b      	ldr	r3, [r7, #20]
 8001aa6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8001aa8:	bf00      	nop
 8001aaa:	371c      	adds	r7, #28
 8001aac:	46bd      	mov	sp, r7
 8001aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ab2:	4770      	bx	lr
 8001ab4:	03fff000 	.word	0x03fff000

08001ab8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8001ab8:	b480      	push	{r7}
 8001aba:	b085      	sub	sp, #20
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
 8001ac0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	3360      	adds	r3, #96	@ 0x60
 8001ac6:	461a      	mov	r2, r3
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4413      	add	r3, r2
 8001ace:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001ad0:	68fb      	ldr	r3, [r7, #12]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8001ad8:	4618      	mov	r0, r3
 8001ada:	3714      	adds	r7, #20
 8001adc:	46bd      	mov	sp, r7
 8001ade:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae2:	4770      	bx	lr

08001ae4 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001ae4:	b480      	push	{r7}
 8001ae6:	b087      	sub	sp, #28
 8001ae8:	af00      	add	r7, sp, #0
 8001aea:	60f8      	str	r0, [r7, #12]
 8001aec:	60b9      	str	r1, [r7, #8]
 8001aee:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001af0:	68fb      	ldr	r3, [r7, #12]
 8001af2:	3360      	adds	r3, #96	@ 0x60
 8001af4:	461a      	mov	r2, r3
 8001af6:	68bb      	ldr	r3, [r7, #8]
 8001af8:	009b      	lsls	r3, r3, #2
 8001afa:	4413      	add	r3, r2
 8001afc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001afe:	697b      	ldr	r3, [r7, #20]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	431a      	orrs	r2, r3
 8001b0a:	697b      	ldr	r3, [r7, #20]
 8001b0c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001b0e:	bf00      	nop
 8001b10:	371c      	adds	r7, #28
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr

08001b1a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b087      	sub	sp, #28
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	60f8      	str	r0, [r7, #12]
 8001b22:	60b9      	str	r1, [r7, #8]
 8001b24:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b26:	68fb      	ldr	r3, [r7, #12]
 8001b28:	3360      	adds	r3, #96	@ 0x60
 8001b2a:	461a      	mov	r2, r3
 8001b2c:	68bb      	ldr	r3, [r7, #8]
 8001b2e:	009b      	lsls	r3, r3, #2
 8001b30:	4413      	add	r3, r2
 8001b32:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	431a      	orrs	r2, r3
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001b44:	bf00      	nop
 8001b46:	371c      	adds	r7, #28
 8001b48:	46bd      	mov	sp, r7
 8001b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4e:	4770      	bx	lr

08001b50 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001b50:	b480      	push	{r7}
 8001b52:	b087      	sub	sp, #28
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	60f8      	str	r0, [r7, #12]
 8001b58:	60b9      	str	r1, [r7, #8]
 8001b5a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	3360      	adds	r3, #96	@ 0x60
 8001b60:	461a      	mov	r2, r3
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	009b      	lsls	r3, r3, #2
 8001b66:	4413      	add	r3, r2
 8001b68:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b6a:	697b      	ldr	r3, [r7, #20]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	431a      	orrs	r2, r3
 8001b76:	697b      	ldr	r3, [r7, #20]
 8001b78:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001b7a:	bf00      	nop
 8001b7c:	371c      	adds	r7, #28
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr

08001b86 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001b86:	b480      	push	{r7}
 8001b88:	b083      	sub	sp, #12
 8001b8a:	af00      	add	r7, sp, #0
 8001b8c:	6078      	str	r0, [r7, #4]
 8001b8e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	695b      	ldr	r3, [r3, #20]
 8001b94:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	431a      	orrs	r2, r3
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	615a      	str	r2, [r3, #20]
}
 8001ba0:	bf00      	nop
 8001ba2:	370c      	adds	r7, #12
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001baa:	4770      	bx	lr

08001bac <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001bac:	b480      	push	{r7}
 8001bae:	b083      	sub	sp, #12
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	68db      	ldr	r3, [r3, #12]
 8001bb8:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d101      	bne.n	8001bc4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001bc0:	2301      	movs	r3, #1
 8001bc2:	e000      	b.n	8001bc6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001bc4:	2300      	movs	r3, #0
}
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	370c      	adds	r7, #12
 8001bca:	46bd      	mov	sp, r7
 8001bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bd0:	4770      	bx	lr

08001bd2 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001bd2:	b480      	push	{r7}
 8001bd4:	b087      	sub	sp, #28
 8001bd6:	af00      	add	r7, sp, #0
 8001bd8:	60f8      	str	r0, [r7, #12]
 8001bda:	60b9      	str	r1, [r7, #8]
 8001bdc:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001bde:	68fb      	ldr	r3, [r7, #12]
 8001be0:	3330      	adds	r3, #48	@ 0x30
 8001be2:	461a      	mov	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	0a1b      	lsrs	r3, r3, #8
 8001be8:	009b      	lsls	r3, r3, #2
 8001bea:	f003 030c 	and.w	r3, r3, #12
 8001bee:	4413      	add	r3, r2
 8001bf0:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001bf2:	697b      	ldr	r3, [r7, #20]
 8001bf4:	681a      	ldr	r2, [r3, #0]
 8001bf6:	68bb      	ldr	r3, [r7, #8]
 8001bf8:	f003 031f 	and.w	r3, r3, #31
 8001bfc:	211f      	movs	r1, #31
 8001bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001c02:	43db      	mvns	r3, r3
 8001c04:	401a      	ands	r2, r3
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	0e9b      	lsrs	r3, r3, #26
 8001c0a:	f003 011f 	and.w	r1, r3, #31
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	f003 031f 	and.w	r3, r3, #31
 8001c14:	fa01 f303 	lsl.w	r3, r1, r3
 8001c18:	431a      	orrs	r2, r3
 8001c1a:	697b      	ldr	r3, [r7, #20]
 8001c1c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001c1e:	bf00      	nop
 8001c20:	371c      	adds	r7, #28
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr

08001c2a <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001c2a:	b480      	push	{r7}
 8001c2c:	b083      	sub	sp, #12
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001c36:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001c42:	2300      	movs	r3, #0
}
 8001c44:	4618      	mov	r0, r3
 8001c46:	370c      	adds	r7, #12
 8001c48:	46bd      	mov	sp, r7
 8001c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4e:	4770      	bx	lr

08001c50 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001c50:	b480      	push	{r7}
 8001c52:	b087      	sub	sp, #28
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	60f8      	str	r0, [r7, #12]
 8001c58:	60b9      	str	r1, [r7, #8]
 8001c5a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	3314      	adds	r3, #20
 8001c60:	461a      	mov	r2, r3
 8001c62:	68bb      	ldr	r3, [r7, #8]
 8001c64:	0e5b      	lsrs	r3, r3, #25
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	f003 0304 	and.w	r3, r3, #4
 8001c6c:	4413      	add	r3, r2
 8001c6e:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001c70:	697b      	ldr	r3, [r7, #20]
 8001c72:	681a      	ldr	r2, [r3, #0]
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	0d1b      	lsrs	r3, r3, #20
 8001c78:	f003 031f 	and.w	r3, r3, #31
 8001c7c:	2107      	movs	r1, #7
 8001c7e:	fa01 f303 	lsl.w	r3, r1, r3
 8001c82:	43db      	mvns	r3, r3
 8001c84:	401a      	ands	r2, r3
 8001c86:	68bb      	ldr	r3, [r7, #8]
 8001c88:	0d1b      	lsrs	r3, r3, #20
 8001c8a:	f003 031f 	and.w	r3, r3, #31
 8001c8e:	6879      	ldr	r1, [r7, #4]
 8001c90:	fa01 f303 	lsl.w	r3, r1, r3
 8001c94:	431a      	orrs	r2, r3
 8001c96:	697b      	ldr	r3, [r7, #20]
 8001c98:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001c9a:	bf00      	nop
 8001c9c:	371c      	adds	r7, #28
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca4:	4770      	bx	lr
	...

08001ca8 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001ca8:	b480      	push	{r7}
 8001caa:	b085      	sub	sp, #20
 8001cac:	af00      	add	r7, sp, #0
 8001cae:	60f8      	str	r0, [r7, #12]
 8001cb0:	60b9      	str	r1, [r7, #8]
 8001cb2:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001cba:	68bb      	ldr	r3, [r7, #8]
 8001cbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	401a      	ands	r2, r3
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	f003 0318 	and.w	r3, r3, #24
 8001cca:	4908      	ldr	r1, [pc, #32]	@ (8001cec <LL_ADC_SetChannelSingleDiff+0x44>)
 8001ccc:	40d9      	lsrs	r1, r3
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	400b      	ands	r3, r1
 8001cd2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001cd6:	431a      	orrs	r2, r3
 8001cd8:	68fb      	ldr	r3, [r7, #12]
 8001cda:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	0007ffff 	.word	0x0007ffff

08001cf0 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	689b      	ldr	r3, [r3, #8]
 8001cfc:	f003 031f 	and.w	r3, r3, #31
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	370c      	adds	r7, #12
 8001d04:	46bd      	mov	sp, r7
 8001d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0a:	4770      	bx	lr

08001d0c <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001d0c:	b480      	push	{r7}
 8001d0e:	b083      	sub	sp, #12
 8001d10:	af00      	add	r7, sp, #0
 8001d12:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001d1c:	4618      	mov	r0, r3
 8001d1e:	370c      	adds	r7, #12
 8001d20:	46bd      	mov	sp, r7
 8001d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d26:	4770      	bx	lr

08001d28 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b083      	sub	sp, #12
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	689b      	ldr	r3, [r3, #8]
 8001d34:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001d38:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	6093      	str	r3, [r2, #8]
}
 8001d40:	bf00      	nop
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr

08001d4c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001d4c:	b480      	push	{r7}
 8001d4e:	b083      	sub	sp, #12
 8001d50:	af00      	add	r7, sp, #0
 8001d52:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	689b      	ldr	r3, [r3, #8]
 8001d58:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001d5c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001d60:	d101      	bne.n	8001d66 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001d62:	2301      	movs	r3, #1
 8001d64:	e000      	b.n	8001d68 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001d66:	2300      	movs	r3, #0
}
 8001d68:	4618      	mov	r0, r3
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	689b      	ldr	r3, [r3, #8]
 8001d80:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001d84:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001d88:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b083      	sub	sp, #12
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001dac:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001db0:	d101      	bne.n	8001db6 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001db2:	2301      	movs	r3, #1
 8001db4:	e000      	b.n	8001db8 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001db6:	2300      	movs	r3, #0
}
 8001db8:	4618      	mov	r0, r3
 8001dba:	370c      	adds	r7, #12
 8001dbc:	46bd      	mov	sp, r7
 8001dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc2:	4770      	bx	lr

08001dc4 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	689b      	ldr	r3, [r3, #8]
 8001dd0:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001dd4:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001dd8:	f043 0201 	orr.w	r2, r3, #1
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001de0:	bf00      	nop
 8001de2:	370c      	adds	r7, #12
 8001de4:	46bd      	mov	sp, r7
 8001de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dea:	4770      	bx	lr

08001dec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001dec:	b480      	push	{r7}
 8001dee:	b083      	sub	sp, #12
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	689b      	ldr	r3, [r3, #8]
 8001df8:	f003 0301 	and.w	r3, r3, #1
 8001dfc:	2b01      	cmp	r3, #1
 8001dfe:	d101      	bne.n	8001e04 <LL_ADC_IsEnabled+0x18>
 8001e00:	2301      	movs	r3, #1
 8001e02:	e000      	b.n	8001e06 <LL_ADC_IsEnabled+0x1a>
 8001e04:	2300      	movs	r3, #0
}
 8001e06:	4618      	mov	r0, r3
 8001e08:	370c      	adds	r7, #12
 8001e0a:	46bd      	mov	sp, r7
 8001e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e10:	4770      	bx	lr

08001e12 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001e12:	b480      	push	{r7}
 8001e14:	b083      	sub	sp, #12
 8001e16:	af00      	add	r7, sp, #0
 8001e18:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	689b      	ldr	r3, [r3, #8]
 8001e1e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8001e22:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001e26:	f043 0204 	orr.w	r2, r3, #4
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8001e2e:	bf00      	nop
 8001e30:	370c      	adds	r7, #12
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e3a:	b480      	push	{r7}
 8001e3c:	b083      	sub	sp, #12
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	f003 0304 	and.w	r3, r3, #4
 8001e4a:	2b04      	cmp	r3, #4
 8001e4c:	d101      	bne.n	8001e52 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e000      	b.n	8001e54 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001e52:	2300      	movs	r3, #0
}
 8001e54:	4618      	mov	r0, r3
 8001e56:	370c      	adds	r7, #12
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5e:	4770      	bx	lr

08001e60 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001e60:	b480      	push	{r7}
 8001e62:	b083      	sub	sp, #12
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	f003 0308 	and.w	r3, r3, #8
 8001e70:	2b08      	cmp	r3, #8
 8001e72:	d101      	bne.n	8001e78 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001e74:	2301      	movs	r3, #1
 8001e76:	e000      	b.n	8001e7a <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001e78:	2300      	movs	r3, #0
}
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	370c      	adds	r7, #12
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e84:	4770      	bx	lr
	...

08001e88 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001e88:	b590      	push	{r4, r7, lr}
 8001e8a:	b089      	sub	sp, #36	@ 0x24
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001e90:	2300      	movs	r3, #0
 8001e92:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001e94:	2300      	movs	r3, #0
 8001e96:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d101      	bne.n	8001ea2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001e9e:	2301      	movs	r3, #1
 8001ea0:	e167      	b.n	8002172 <HAL_ADC_Init+0x2ea>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	695b      	ldr	r3, [r3, #20]
 8001ea6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d109      	bne.n	8001ec4 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001eb0:	6878      	ldr	r0, [r7, #4]
 8001eb2:	f7fe fbdd 	bl	8000670 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	2200      	movs	r2, #0
 8001eba:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	2200      	movs	r2, #0
 8001ec0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff ff3f 	bl	8001d4c <LL_ADC_IsDeepPowerDownEnabled>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	2b00      	cmp	r3, #0
 8001ed2:	d004      	beq.n	8001ede <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7ff ff25 	bl	8001d28 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff ff5a 	bl	8001d9c <LL_ADC_IsInternalRegulatorEnabled>
 8001ee8:	4603      	mov	r3, r0
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d115      	bne.n	8001f1a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	f7ff ff3e 	bl	8001d74 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001ef8:	4ba0      	ldr	r3, [pc, #640]	@ (800217c <HAL_ADC_Init+0x2f4>)
 8001efa:	681b      	ldr	r3, [r3, #0]
 8001efc:	099b      	lsrs	r3, r3, #6
 8001efe:	4aa0      	ldr	r2, [pc, #640]	@ (8002180 <HAL_ADC_Init+0x2f8>)
 8001f00:	fba2 2303 	umull	r2, r3, r2, r3
 8001f04:	099b      	lsrs	r3, r3, #6
 8001f06:	3301      	adds	r3, #1
 8001f08:	005b      	lsls	r3, r3, #1
 8001f0a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f0c:	e002      	b.n	8001f14 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d1f9      	bne.n	8001f0e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7ff ff3c 	bl	8001d9c <LL_ADC_IsInternalRegulatorEnabled>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d10d      	bne.n	8001f46 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f2e:	f043 0210 	orr.w	r2, r3, #16
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f36:	687b      	ldr	r3, [r7, #4]
 8001f38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f3a:	f043 0201 	orr.w	r2, r3, #1
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 8001f42:	2301      	movs	r3, #1
 8001f44:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7ff ff75 	bl	8001e3a <LL_ADC_REG_IsConversionOngoing>
 8001f50:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f56:	f003 0310 	and.w	r3, r3, #16
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	f040 8100 	bne.w	8002160 <HAL_ADC_Init+0x2d8>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	f040 80fc 	bne.w	8002160 <HAL_ADC_Init+0x2d8>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8001f6c:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 8001f70:	f043 0202 	orr.w	r2, r3, #2
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4618      	mov	r0, r3
 8001f7e:	f7ff ff35 	bl	8001dec <LL_ADC_IsEnabled>
 8001f82:	4603      	mov	r3, r0
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d111      	bne.n	8001fac <HAL_ADC_Init+0x124>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001f88:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8001f8c:	f7ff ff2e 	bl	8001dec <LL_ADC_IsEnabled>
 8001f90:	4604      	mov	r4, r0
 8001f92:	487c      	ldr	r0, [pc, #496]	@ (8002184 <HAL_ADC_Init+0x2fc>)
 8001f94:	f7ff ff2a 	bl	8001dec <LL_ADC_IsEnabled>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	4323      	orrs	r3, r4
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d105      	bne.n	8001fac <HAL_ADC_Init+0x124>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	4619      	mov	r1, r3
 8001fa6:	4878      	ldr	r0, [pc, #480]	@ (8002188 <HAL_ADC_Init+0x300>)
 8001fa8:	f7ff fd2e 	bl	8001a08 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	7f5b      	ldrb	r3, [r3, #29]
 8001fb0:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fb6:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8001fbc:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8001fc2:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fca:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001fcc:	4313      	orrs	r3, r2
 8001fce:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	d106      	bne.n	8001fe8 <HAL_ADC_Init+0x160>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001fde:	3b01      	subs	r3, #1
 8001fe0:	045b      	lsls	r3, r3, #17
 8001fe2:	69ba      	ldr	r2, [r7, #24]
 8001fe4:	4313      	orrs	r3, r2
 8001fe6:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d009      	beq.n	8002004 <HAL_ADC_Init+0x17c>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ff4:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ffc:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ffe:	69ba      	ldr	r2, [r7, #24]
 8002000:	4313      	orrs	r3, r2
 8002002:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	681b      	ldr	r3, [r3, #0]
 8002008:	68da      	ldr	r2, [r3, #12]
 800200a:	4b60      	ldr	r3, [pc, #384]	@ (800218c <HAL_ADC_Init+0x304>)
 800200c:	4013      	ands	r3, r2
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	6812      	ldr	r2, [r2, #0]
 8002012:	69b9      	ldr	r1, [r7, #24]
 8002014:	430b      	orrs	r3, r1
 8002016:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	430a      	orrs	r2, r1
 800202c:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	4618      	mov	r0, r3
 8002034:	f7ff ff14 	bl	8001e60 <LL_ADC_INJ_IsConversionOngoing>
 8002038:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 800203a:	697b      	ldr	r3, [r7, #20]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d16d      	bne.n	800211c <HAL_ADC_Init+0x294>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002040:	693b      	ldr	r3, [r7, #16]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d16a      	bne.n	800211c <HAL_ADC_Init+0x294>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 800204a:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002052:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 8002054:	4313      	orrs	r3, r2
 8002056:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	68db      	ldr	r3, [r3, #12]
 800205e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002062:	f023 0302 	bic.w	r3, r3, #2
 8002066:	687a      	ldr	r2, [r7, #4]
 8002068:	6812      	ldr	r2, [r2, #0]
 800206a:	69b9      	ldr	r1, [r7, #24]
 800206c:	430b      	orrs	r3, r1
 800206e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	691b      	ldr	r3, [r3, #16]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d017      	beq.n	80020a8 <HAL_ADC_Init+0x220>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	681b      	ldr	r3, [r3, #0]
 800207c:	691a      	ldr	r2, [r3, #16]
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8002086:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8002090:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002094:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	6911      	ldr	r1, [r2, #16]
 800209c:	687a      	ldr	r2, [r7, #4]
 800209e:	6812      	ldr	r2, [r2, #0]
 80020a0:	430b      	orrs	r3, r1
 80020a2:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 80020a6:	e013      	b.n	80020d0 <HAL_ADC_Init+0x248>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	691a      	ldr	r2, [r3, #16]
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80020b6:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80020c0:	687a      	ldr	r2, [r7, #4]
 80020c2:	6812      	ldr	r2, [r2, #0]
 80020c4:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80020c8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80020cc:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80020d6:	2b01      	cmp	r3, #1
 80020d8:	d118      	bne.n	800210c <HAL_ADC_Init+0x284>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 80020e4:	f023 0304 	bic.w	r3, r3, #4
 80020e8:	687a      	ldr	r2, [r7, #4]
 80020ea:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 80020ec:	687a      	ldr	r2, [r7, #4]
 80020ee:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 80020f0:	4311      	orrs	r1, r2
 80020f2:	687a      	ldr	r2, [r7, #4]
 80020f4:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 80020f6:	4311      	orrs	r1, r2
 80020f8:	687a      	ldr	r2, [r7, #4]
 80020fa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 80020fc:	430a      	orrs	r2, r1
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f042 0201 	orr.w	r2, r2, #1
 8002108:	611a      	str	r2, [r3, #16]
 800210a:	e007      	b.n	800211c <HAL_ADC_Init+0x294>
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	691a      	ldr	r2, [r3, #16]
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f022 0201 	bic.w	r2, r2, #1
 800211a:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	695b      	ldr	r3, [r3, #20]
 8002120:	2b01      	cmp	r3, #1
 8002122:	d10c      	bne.n	800213e <HAL_ADC_Init+0x2b6>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800212a:	f023 010f 	bic.w	r1, r3, #15
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6a1b      	ldr	r3, [r3, #32]
 8002132:	1e5a      	subs	r2, r3, #1
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	430a      	orrs	r2, r1
 800213a:	631a      	str	r2, [r3, #48]	@ 0x30
 800213c:	e007      	b.n	800214e <HAL_ADC_Init+0x2c6>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f022 020f 	bic.w	r2, r2, #15
 800214c:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002152:	f023 0303 	bic.w	r3, r3, #3
 8002156:	f043 0201 	orr.w	r2, r3, #1
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	65da      	str	r2, [r3, #92]	@ 0x5c
 800215e:	e007      	b.n	8002170 <HAL_ADC_Init+0x2e8>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002164:	f043 0210 	orr.w	r2, r3, #16
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800216c:	2301      	movs	r3, #1
 800216e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002170:	7ffb      	ldrb	r3, [r7, #31]
}
 8002172:	4618      	mov	r0, r3
 8002174:	3724      	adds	r7, #36	@ 0x24
 8002176:	46bd      	mov	sp, r7
 8002178:	bd90      	pop	{r4, r7, pc}
 800217a:	bf00      	nop
 800217c:	20000018 	.word	0x20000018
 8002180:	053e2d63 	.word	0x053e2d63
 8002184:	50000100 	.word	0x50000100
 8002188:	50000300 	.word	0x50000300
 800218c:	fff04007 	.word	0xfff04007

08002190 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	60f8      	str	r0, [r7, #12]
 8002198:	60b9      	str	r1, [r7, #8]
 800219a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 800219c:	4851      	ldr	r0, [pc, #324]	@ (80022e4 <HAL_ADC_Start_DMA+0x154>)
 800219e:	f7ff fda7 	bl	8001cf0 <LL_ADC_GetMultimode>
 80021a2:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80021a4:	68fb      	ldr	r3, [r7, #12]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	4618      	mov	r0, r3
 80021aa:	f7ff fe46 	bl	8001e3a <LL_ADC_REG_IsConversionOngoing>
 80021ae:	4603      	mov	r3, r0
 80021b0:	2b00      	cmp	r3, #0
 80021b2:	f040 808f 	bne.w	80022d4 <HAL_ADC_Start_DMA+0x144>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80021bc:	2b01      	cmp	r3, #1
 80021be:	d101      	bne.n	80021c4 <HAL_ADC_Start_DMA+0x34>
 80021c0:	2302      	movs	r3, #2
 80021c2:	e08a      	b.n	80022da <HAL_ADC_Start_DMA+0x14a>
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	2201      	movs	r2, #1
 80021c8:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	2b00      	cmp	r3, #0
 80021d0:	d005      	beq.n	80021de <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	2b05      	cmp	r3, #5
 80021d6:	d002      	beq.n	80021de <HAL_ADC_Start_DMA+0x4e>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80021d8:	693b      	ldr	r3, [r7, #16]
 80021da:	2b09      	cmp	r3, #9
 80021dc:	d173      	bne.n	80022c6 <HAL_ADC_Start_DMA+0x136>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 80021de:	68f8      	ldr	r0, [r7, #12]
 80021e0:	f000 feb2 	bl	8002f48 <ADC_Enable>
 80021e4:	4603      	mov	r3, r0
 80021e6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80021e8:	7dfb      	ldrb	r3, [r7, #23]
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d166      	bne.n	80022bc <HAL_ADC_Start_DMA+0x12c>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021f2:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 80021f6:	f023 0301 	bic.w	r3, r3, #1
 80021fa:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	65da      	str	r2, [r3, #92]	@ 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	4a38      	ldr	r2, [pc, #224]	@ (80022e8 <HAL_ADC_Start_DMA+0x158>)
 8002208:	4293      	cmp	r3, r2
 800220a:	d002      	beq.n	8002212 <HAL_ADC_Start_DMA+0x82>
 800220c:	68fb      	ldr	r3, [r7, #12]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	e001      	b.n	8002216 <HAL_ADC_Start_DMA+0x86>
 8002212:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002216:	68fa      	ldr	r2, [r7, #12]
 8002218:	6812      	ldr	r2, [r2, #0]
 800221a:	4293      	cmp	r3, r2
 800221c:	d002      	beq.n	8002224 <HAL_ADC_Start_DMA+0x94>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	2b00      	cmp	r3, #0
 8002222:	d105      	bne.n	8002230 <HAL_ADC_Start_DMA+0xa0>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8002224:	68fb      	ldr	r3, [r7, #12]
 8002226:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002228:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	65da      	str	r2, [r3, #92]	@ 0x5c
        }
#endif /* ADC_MULTIMODE_SUPPORT */

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002234:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002238:	2b00      	cmp	r3, #0
 800223a:	d006      	beq.n	800224a <HAL_ADC_Start_DMA+0xba>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800223c:	68fb      	ldr	r3, [r7, #12]
 800223e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002240:	f023 0206 	bic.w	r2, r3, #6
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	661a      	str	r2, [r3, #96]	@ 0x60
 8002248:	e002      	b.n	8002250 <HAL_ADC_Start_DMA+0xc0>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	2200      	movs	r2, #0
 800224e:	661a      	str	r2, [r3, #96]	@ 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002254:	4a25      	ldr	r2, [pc, #148]	@ (80022ec <HAL_ADC_Start_DMA+0x15c>)
 8002256:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8002258:	68fb      	ldr	r3, [r7, #12]
 800225a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800225c:	4a24      	ldr	r2, [pc, #144]	@ (80022f0 <HAL_ADC_Start_DMA+0x160>)
 800225e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002264:	4a23      	ldr	r2, [pc, #140]	@ (80022f4 <HAL_ADC_Start_DMA+0x164>)
 8002266:	635a      	str	r2, [r3, #52]	@ 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8002268:	68fb      	ldr	r3, [r7, #12]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	221c      	movs	r2, #28
 800226e:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	2200      	movs	r2, #0
 8002274:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	685a      	ldr	r2, [r3, #4]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0210 	orr.w	r2, r2, #16
 8002286:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	68da      	ldr	r2, [r3, #12]
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f042 0201 	orr.w	r2, r2, #1
 8002296:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8002298:	68fb      	ldr	r3, [r7, #12]
 800229a:	6d58      	ldr	r0, [r3, #84]	@ 0x54
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	3340      	adds	r3, #64	@ 0x40
 80022a2:	4619      	mov	r1, r3
 80022a4:	68ba      	ldr	r2, [r7, #8]
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	f001 f922 	bl	80034f0 <HAL_DMA_Start_IT>
 80022ac:	4603      	mov	r3, r0
 80022ae:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	4618      	mov	r0, r3
 80022b6:	f7ff fdac 	bl	8001e12 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80022ba:	e00d      	b.n	80022d8 <HAL_ADC_Start_DMA+0x148>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80022bc:	68fb      	ldr	r3, [r7, #12]
 80022be:	2200      	movs	r2, #0
 80022c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
      if (tmp_hal_status == HAL_OK)
 80022c4:	e008      	b.n	80022d8 <HAL_ADC_Start_DMA+0x148>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80022c6:	2301      	movs	r3, #1
 80022c8:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	2200      	movs	r2, #0
 80022ce:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
 80022d2:	e001      	b.n	80022d8 <HAL_ADC_Start_DMA+0x148>
    }
#endif /* ADC_MULTIMODE_SUPPORT */
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80022d4:	2302      	movs	r3, #2
 80022d6:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80022d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80022da:	4618      	mov	r0, r3
 80022dc:	3718      	adds	r7, #24
 80022de:	46bd      	mov	sp, r7
 80022e0:	bd80      	pop	{r7, pc}
 80022e2:	bf00      	nop
 80022e4:	50000300 	.word	0x50000300
 80022e8:	50000100 	.word	0x50000100
 80022ec:	08003055 	.word	0x08003055
 80022f0:	0800312d 	.word	0x0800312d
 80022f4:	08003149 	.word	0x08003149

080022f8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b08a      	sub	sp, #40	@ 0x28
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002300:	2300      	movs	r3, #0
 8002302:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002314:	4883      	ldr	r0, [pc, #524]	@ (8002524 <HAL_ADC_IRQHandler+0x22c>)
 8002316:	f7ff fceb 	bl	8001cf0 <LL_ADC_GetMultimode>
 800231a:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 800231c:	69fb      	ldr	r3, [r7, #28]
 800231e:	f003 0302 	and.w	r3, r3, #2
 8002322:	2b00      	cmp	r3, #0
 8002324:	d017      	beq.n	8002356 <HAL_ADC_IRQHandler+0x5e>
 8002326:	69bb      	ldr	r3, [r7, #24]
 8002328:	f003 0302 	and.w	r3, r3, #2
 800232c:	2b00      	cmp	r3, #0
 800232e:	d012      	beq.n	8002356 <HAL_ADC_IRQHandler+0x5e>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002334:	f003 0310 	and.w	r3, r3, #16
 8002338:	2b00      	cmp	r3, #0
 800233a:	d105      	bne.n	8002348 <HAL_ADC_IRQHandler+0x50>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002340:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002344:	687b      	ldr	r3, [r7, #4]
 8002346:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f000 ff3f 	bl	80031cc <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	2202      	movs	r2, #2
 8002354:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002356:	69fb      	ldr	r3, [r7, #28]
 8002358:	f003 0304 	and.w	r3, r3, #4
 800235c:	2b00      	cmp	r3, #0
 800235e:	d004      	beq.n	800236a <HAL_ADC_IRQHandler+0x72>
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	2b00      	cmp	r3, #0
 8002368:	d10a      	bne.n	8002380 <HAL_ADC_IRQHandler+0x88>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800236a:	69fb      	ldr	r3, [r7, #28]
 800236c:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002370:	2b00      	cmp	r3, #0
 8002372:	f000 8085 	beq.w	8002480 <HAL_ADC_IRQHandler+0x188>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	f003 0308 	and.w	r3, r3, #8
 800237c:	2b00      	cmp	r3, #0
 800237e:	d07f      	beq.n	8002480 <HAL_ADC_IRQHandler+0x188>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002384:	f003 0310 	and.w	r3, r3, #16
 8002388:	2b00      	cmp	r3, #0
 800238a:	d105      	bne.n	8002398 <HAL_ADC_IRQHandler+0xa0>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002390:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7ff fc05 	bl	8001bac <LL_ADC_REG_IsTriggerSourceSWStart>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d064      	beq.n	8002472 <HAL_ADC_IRQHandler+0x17a>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	4a5e      	ldr	r2, [pc, #376]	@ (8002528 <HAL_ADC_IRQHandler+0x230>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d002      	beq.n	80023b8 <HAL_ADC_IRQHandler+0xc0>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	e001      	b.n	80023bc <HAL_ADC_IRQHandler+0xc4>
 80023b8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023bc:	687a      	ldr	r2, [r7, #4]
 80023be:	6812      	ldr	r2, [r2, #0]
 80023c0:	4293      	cmp	r3, r2
 80023c2:	d008      	beq.n	80023d6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80023c4:	697b      	ldr	r3, [r7, #20]
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d005      	beq.n	80023d6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80023ca:	697b      	ldr	r3, [r7, #20]
 80023cc:	2b05      	cmp	r3, #5
 80023ce:	d002      	beq.n	80023d6 <HAL_ADC_IRQHandler+0xde>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	2b09      	cmp	r3, #9
 80023d4:	d104      	bne.n	80023e0 <HAL_ADC_IRQHandler+0xe8>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	68db      	ldr	r3, [r3, #12]
 80023dc:	623b      	str	r3, [r7, #32]
 80023de:	e00d      	b.n	80023fc <HAL_ADC_IRQHandler+0x104>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a50      	ldr	r2, [pc, #320]	@ (8002528 <HAL_ADC_IRQHandler+0x230>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d002      	beq.n	80023f0 <HAL_ADC_IRQHandler+0xf8>
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	e001      	b.n	80023f4 <HAL_ADC_IRQHandler+0xfc>
 80023f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80023f4:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	68db      	ldr	r3, [r3, #12]
 80023fa:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 80023fc:	6a3b      	ldr	r3, [r7, #32]
 80023fe:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002402:	2b00      	cmp	r3, #0
 8002404:	d135      	bne.n	8002472 <HAL_ADC_IRQHandler+0x17a>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	f003 0308 	and.w	r3, r3, #8
 8002410:	2b08      	cmp	r3, #8
 8002412:	d12e      	bne.n	8002472 <HAL_ADC_IRQHandler+0x17a>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	4618      	mov	r0, r3
 800241a:	f7ff fd0e 	bl	8001e3a <LL_ADC_REG_IsConversionOngoing>
 800241e:	4603      	mov	r3, r0
 8002420:	2b00      	cmp	r3, #0
 8002422:	d11a      	bne.n	800245a <HAL_ADC_IRQHandler+0x162>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	681b      	ldr	r3, [r3, #0]
 8002428:	685a      	ldr	r2, [r3, #4]
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	f022 020c 	bic.w	r2, r2, #12
 8002432:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002438:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002444:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002448:	2b00      	cmp	r3, #0
 800244a:	d112      	bne.n	8002472 <HAL_ADC_IRQHandler+0x17a>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002450:	f043 0201 	orr.w	r2, r3, #1
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002458:	e00b      	b.n	8002472 <HAL_ADC_IRQHandler+0x17a>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800245e:	f043 0210 	orr.w	r2, r3, #16
 8002462:	687b      	ldr	r3, [r7, #4]
 8002464:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800246a:	f043 0201 	orr.w	r2, r3, #1
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002472:	6878      	ldr	r0, [r7, #4]
 8002474:	f7fe fcfc 	bl	8000e70 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	220c      	movs	r2, #12
 800247e:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	f003 0320 	and.w	r3, r3, #32
 8002486:	2b00      	cmp	r3, #0
 8002488:	d004      	beq.n	8002494 <HAL_ADC_IRQHandler+0x19c>
 800248a:	69bb      	ldr	r3, [r7, #24]
 800248c:	f003 0320 	and.w	r3, r3, #32
 8002490:	2b00      	cmp	r3, #0
 8002492:	d10b      	bne.n	80024ac <HAL_ADC_IRQHandler+0x1b4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002494:	69fb      	ldr	r3, [r7, #28]
 8002496:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800249a:	2b00      	cmp	r3, #0
 800249c:	f000 809e 	beq.w	80025dc <HAL_ADC_IRQHandler+0x2e4>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	f000 8098 	beq.w	80025dc <HAL_ADC_IRQHandler+0x2e4>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024b0:	f003 0310 	and.w	r3, r3, #16
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d105      	bne.n	80024c4 <HAL_ADC_IRQHandler+0x1cc>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024bc:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80024c4:	687b      	ldr	r3, [r7, #4]
 80024c6:	681b      	ldr	r3, [r3, #0]
 80024c8:	4618      	mov	r0, r3
 80024ca:	f7ff fbae 	bl	8001c2a <LL_ADC_INJ_IsTriggerSourceSWStart>
 80024ce:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fb69 	bl	8001bac <LL_ADC_REG_IsTriggerSourceSWStart>
 80024da:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a11      	ldr	r2, [pc, #68]	@ (8002528 <HAL_ADC_IRQHandler+0x230>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d002      	beq.n	80024ec <HAL_ADC_IRQHandler+0x1f4>
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	e001      	b.n	80024f0 <HAL_ADC_IRQHandler+0x1f8>
 80024ec:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80024f0:	687a      	ldr	r2, [r7, #4]
 80024f2:	6812      	ldr	r2, [r2, #0]
 80024f4:	4293      	cmp	r3, r2
 80024f6:	d008      	beq.n	800250a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d005      	beq.n	800250a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2b06      	cmp	r3, #6
 8002502:	d002      	beq.n	800250a <HAL_ADC_IRQHandler+0x212>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002504:	697b      	ldr	r3, [r7, #20]
 8002506:	2b07      	cmp	r3, #7
 8002508:	d104      	bne.n	8002514 <HAL_ADC_IRQHandler+0x21c>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	68db      	ldr	r3, [r3, #12]
 8002510:	623b      	str	r3, [r7, #32]
 8002512:	e011      	b.n	8002538 <HAL_ADC_IRQHandler+0x240>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	4a03      	ldr	r2, [pc, #12]	@ (8002528 <HAL_ADC_IRQHandler+0x230>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d006      	beq.n	800252c <HAL_ADC_IRQHandler+0x234>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	e005      	b.n	8002530 <HAL_ADC_IRQHandler+0x238>
 8002524:	50000300 	.word	0x50000300
 8002528:	50000100 	.word	0x50000100
 800252c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002530:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002532:	693b      	ldr	r3, [r7, #16]
 8002534:	68db      	ldr	r3, [r3, #12]
 8002536:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	2b00      	cmp	r3, #0
 800253c:	d047      	beq.n	80025ce <HAL_ADC_IRQHandler+0x2d6>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 800253e:	6a3b      	ldr	r3, [r7, #32]
 8002540:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d007      	beq.n	8002558 <HAL_ADC_IRQHandler+0x260>
 8002548:	68bb      	ldr	r3, [r7, #8]
 800254a:	2b00      	cmp	r3, #0
 800254c:	d03f      	beq.n	80025ce <HAL_ADC_IRQHandler+0x2d6>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 800254e:	6a3b      	ldr	r3, [r7, #32]
 8002550:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8002554:	2b00      	cmp	r3, #0
 8002556:	d13a      	bne.n	80025ce <HAL_ADC_IRQHandler+0x2d6>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002562:	2b40      	cmp	r3, #64	@ 0x40
 8002564:	d133      	bne.n	80025ce <HAL_ADC_IRQHandler+0x2d6>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8002566:	6a3b      	ldr	r3, [r7, #32]
 8002568:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800256c:	2b00      	cmp	r3, #0
 800256e:	d12e      	bne.n	80025ce <HAL_ADC_IRQHandler+0x2d6>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f7ff fc73 	bl	8001e60 <LL_ADC_INJ_IsConversionOngoing>
 800257a:	4603      	mov	r3, r0
 800257c:	2b00      	cmp	r3, #0
 800257e:	d11a      	bne.n	80025b6 <HAL_ADC_IRQHandler+0x2be>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	685a      	ldr	r2, [r3, #4]
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 800258e:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002594:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d112      	bne.n	80025ce <HAL_ADC_IRQHandler+0x2d6>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ac:	f043 0201 	orr.w	r2, r3, #1
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80025b4:	e00b      	b.n	80025ce <HAL_ADC_IRQHandler+0x2d6>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ba:	f043 0210 	orr.w	r2, r3, #16
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80025c2:	687b      	ldr	r3, [r7, #4]
 80025c4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80025c6:	f043 0201 	orr.w	r2, r3, #1
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80025ce:	6878      	ldr	r0, [r7, #4]
 80025d0:	f000 fdd4 	bl	800317c <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	2260      	movs	r2, #96	@ 0x60
 80025da:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80025dc:	69fb      	ldr	r3, [r7, #28]
 80025de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d011      	beq.n	800260a <HAL_ADC_IRQHandler+0x312>
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d00c      	beq.n	800260a <HAL_ADC_IRQHandler+0x312>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f4:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 80025fc:	6878      	ldr	r0, [r7, #4]
 80025fe:	f000 f89f 	bl	8002740 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	2280      	movs	r2, #128	@ 0x80
 8002608:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002610:	2b00      	cmp	r3, #0
 8002612:	d012      	beq.n	800263a <HAL_ADC_IRQHandler+0x342>
 8002614:	69bb      	ldr	r3, [r7, #24]
 8002616:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800261a:	2b00      	cmp	r3, #0
 800261c:	d00d      	beq.n	800263a <HAL_ADC_IRQHandler+0x342>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002622:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800262a:	6878      	ldr	r0, [r7, #4]
 800262c:	f000 fdba 	bl	80031a4 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002638:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 800263a:	69fb      	ldr	r3, [r7, #28]
 800263c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002640:	2b00      	cmp	r3, #0
 8002642:	d012      	beq.n	800266a <HAL_ADC_IRQHandler+0x372>
 8002644:	69bb      	ldr	r3, [r7, #24]
 8002646:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800264a:	2b00      	cmp	r3, #0
 800264c:	d00d      	beq.n	800266a <HAL_ADC_IRQHandler+0x372>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002652:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 800265a:	6878      	ldr	r0, [r7, #4]
 800265c:	f000 fdac 	bl	80031b8 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002668:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 800266a:	69fb      	ldr	r3, [r7, #28]
 800266c:	f003 0310 	and.w	r3, r3, #16
 8002670:	2b00      	cmp	r3, #0
 8002672:	d036      	beq.n	80026e2 <HAL_ADC_IRQHandler+0x3ea>
 8002674:	69bb      	ldr	r3, [r7, #24]
 8002676:	f003 0310 	and.w	r3, r3, #16
 800267a:	2b00      	cmp	r3, #0
 800267c:	d031      	beq.n	80026e2 <HAL_ADC_IRQHandler+0x3ea>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002682:	2b00      	cmp	r3, #0
 8002684:	d102      	bne.n	800268c <HAL_ADC_IRQHandler+0x394>
    {
      overrun_error = 1UL;
 8002686:	2301      	movs	r3, #1
 8002688:	627b      	str	r3, [r7, #36]	@ 0x24
 800268a:	e014      	b.n	80026b6 <HAL_ADC_IRQHandler+0x3be>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	2b00      	cmp	r3, #0
 8002690:	d008      	beq.n	80026a4 <HAL_ADC_IRQHandler+0x3ac>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002692:	4825      	ldr	r0, [pc, #148]	@ (8002728 <HAL_ADC_IRQHandler+0x430>)
 8002694:	f7ff fb3a 	bl	8001d0c <LL_ADC_GetMultiDMATransfer>
 8002698:	4603      	mov	r3, r0
 800269a:	2b00      	cmp	r3, #0
 800269c:	d00b      	beq.n	80026b6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 800269e:	2301      	movs	r3, #1
 80026a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80026a2:	e008      	b.n	80026b6 <HAL_ADC_IRQHandler+0x3be>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	68db      	ldr	r3, [r3, #12]
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d001      	beq.n	80026b6 <HAL_ADC_IRQHandler+0x3be>
        {
          overrun_error = 1UL;
 80026b2:	2301      	movs	r3, #1
 80026b4:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80026b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d10e      	bne.n	80026da <HAL_ADC_IRQHandler+0x3e2>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c0:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026cc:	f043 0202 	orr.w	r2, r3, #2
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80026d4:	6878      	ldr	r0, [r7, #4]
 80026d6:	f000 f83d 	bl	8002754 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	681b      	ldr	r3, [r3, #0]
 80026de:	2210      	movs	r2, #16
 80026e0:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d018      	beq.n	800271e <HAL_ADC_IRQHandler+0x426>
 80026ec:	69bb      	ldr	r3, [r7, #24]
 80026ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d013      	beq.n	800271e <HAL_ADC_IRQHandler+0x426>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026fa:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002706:	f043 0208 	orr.w	r2, r3, #8
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002716:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002718:	6878      	ldr	r0, [r7, #4]
 800271a:	f000 fd39 	bl	8003190 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800271e:	bf00      	nop
 8002720:	3728      	adds	r7, #40	@ 0x28
 8002722:	46bd      	mov	sp, r7
 8002724:	bd80      	pop	{r7, pc}
 8002726:	bf00      	nop
 8002728:	50000300 	.word	0x50000300

0800272c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 800272c:	b480      	push	{r7}
 800272e:	b083      	sub	sp, #12
 8002730:	af00      	add	r7, sp, #0
 8002732:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8002734:	bf00      	nop
 8002736:	370c      	adds	r7, #12
 8002738:	46bd      	mov	sp, r7
 800273a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800273e:	4770      	bx	lr

08002740 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002740:	b480      	push	{r7}
 8002742:	b083      	sub	sp, #12
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002748:	bf00      	nop
 800274a:	370c      	adds	r7, #12
 800274c:	46bd      	mov	sp, r7
 800274e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002752:	4770      	bx	lr

08002754 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8002754:	b480      	push	{r7}
 8002756:	b083      	sub	sp, #12
 8002758:	af00      	add	r7, sp, #0
 800275a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 800275c:	bf00      	nop
 800275e:	370c      	adds	r7, #12
 8002760:	46bd      	mov	sp, r7
 8002762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002766:	4770      	bx	lr

08002768 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002768:	b580      	push	{r7, lr}
 800276a:	b0b6      	sub	sp, #216	@ 0xd8
 800276c:	af00      	add	r7, sp, #0
 800276e:	6078      	str	r0, [r7, #4]
 8002770:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002772:	2300      	movs	r3, #0
 8002774:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002778:	2300      	movs	r3, #0
 800277a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002782:	2b01      	cmp	r3, #1
 8002784:	d101      	bne.n	800278a <HAL_ADC_ConfigChannel+0x22>
 8002786:	2302      	movs	r3, #2
 8002788:	e3c8      	b.n	8002f1c <HAL_ADC_ConfigChannel+0x7b4>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	2201      	movs	r2, #1
 800278e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	4618      	mov	r0, r3
 8002798:	f7ff fb4f 	bl	8001e3a <LL_ADC_REG_IsConversionOngoing>
 800279c:	4603      	mov	r3, r0
 800279e:	2b00      	cmp	r3, #0
 80027a0:	f040 83ad 	bne.w	8002efe <HAL_ADC_ConfigChannel+0x796>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6818      	ldr	r0, [r3, #0]
 80027a8:	683b      	ldr	r3, [r7, #0]
 80027aa:	6859      	ldr	r1, [r3, #4]
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	461a      	mov	r2, r3
 80027b2:	f7ff fa0e 	bl	8001bd2 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff fb3d 	bl	8001e3a <LL_ADC_REG_IsConversionOngoing>
 80027c0:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	681b      	ldr	r3, [r3, #0]
 80027c8:	4618      	mov	r0, r3
 80027ca:	f7ff fb49 	bl	8001e60 <LL_ADC_INJ_IsConversionOngoing>
 80027ce:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80027d2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	f040 81d9 	bne.w	8002b8e <HAL_ADC_ConfigChannel+0x426>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80027dc:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80027e0:	2b00      	cmp	r3, #0
 80027e2:	f040 81d4 	bne.w	8002b8e <HAL_ADC_ConfigChannel+0x426>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 80027e6:	683b      	ldr	r3, [r7, #0]
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 80027ee:	d10f      	bne.n	8002810 <HAL_ADC_ConfigChannel+0xa8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	6818      	ldr	r0, [r3, #0]
 80027f4:	683b      	ldr	r3, [r7, #0]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	2200      	movs	r2, #0
 80027fa:	4619      	mov	r1, r3
 80027fc:	f7ff fa28 	bl	8001c50 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002808:	4618      	mov	r0, r3
 800280a:	f7ff f9bc 	bl	8001b86 <LL_ADC_SetSamplingTimeCommonConfig>
 800280e:	e00e      	b.n	800282e <HAL_ADC_ConfigChannel+0xc6>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	6818      	ldr	r0, [r3, #0]
 8002814:	683b      	ldr	r3, [r7, #0]
 8002816:	6819      	ldr	r1, [r3, #0]
 8002818:	683b      	ldr	r3, [r7, #0]
 800281a:	689b      	ldr	r3, [r3, #8]
 800281c:	461a      	mov	r2, r3
 800281e:	f7ff fa17 	bl	8001c50 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	2100      	movs	r1, #0
 8002828:	4618      	mov	r0, r3
 800282a:	f7ff f9ac 	bl	8001b86 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 800282e:	683b      	ldr	r3, [r7, #0]
 8002830:	695a      	ldr	r2, [r3, #20]
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	68db      	ldr	r3, [r3, #12]
 8002838:	08db      	lsrs	r3, r3, #3
 800283a:	f003 0303 	and.w	r3, r3, #3
 800283e:	005b      	lsls	r3, r3, #1
 8002840:	fa02 f303 	lsl.w	r3, r2, r3
 8002844:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002848:	683b      	ldr	r3, [r7, #0]
 800284a:	691b      	ldr	r3, [r3, #16]
 800284c:	2b04      	cmp	r3, #4
 800284e:	d022      	beq.n	8002896 <HAL_ADC_ConfigChannel+0x12e>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	6919      	ldr	r1, [r3, #16]
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681a      	ldr	r2, [r3, #0]
 800285c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002860:	f7ff f906 	bl	8001a70 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	683b      	ldr	r3, [r7, #0]
 800286a:	6919      	ldr	r1, [r3, #16]
 800286c:	683b      	ldr	r3, [r7, #0]
 800286e:	699b      	ldr	r3, [r3, #24]
 8002870:	461a      	mov	r2, r3
 8002872:	f7ff f952 	bl	8001b1a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	6818      	ldr	r0, [r3, #0]
 800287a:	683b      	ldr	r3, [r7, #0]
 800287c:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002882:	2b01      	cmp	r3, #1
 8002884:	d102      	bne.n	800288c <HAL_ADC_ConfigChannel+0x124>
 8002886:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800288a:	e000      	b.n	800288e <HAL_ADC_ConfigChannel+0x126>
 800288c:	2300      	movs	r3, #0
 800288e:	461a      	mov	r2, r3
 8002890:	f7ff f95e 	bl	8001b50 <LL_ADC_SetOffsetSaturation>
 8002894:	e17b      	b.n	8002b8e <HAL_ADC_ConfigChannel+0x426>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	2100      	movs	r1, #0
 800289c:	4618      	mov	r0, r3
 800289e:	f7ff f90b 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 80028a2:	4603      	mov	r3, r0
 80028a4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80028a8:	2b00      	cmp	r3, #0
 80028aa:	d10a      	bne.n	80028c2 <HAL_ADC_ConfigChannel+0x15a>
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	2100      	movs	r1, #0
 80028b2:	4618      	mov	r0, r3
 80028b4:	f7ff f900 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 80028b8:	4603      	mov	r3, r0
 80028ba:	0e9b      	lsrs	r3, r3, #26
 80028bc:	f003 021f 	and.w	r2, r3, #31
 80028c0:	e01e      	b.n	8002900 <HAL_ADC_ConfigChannel+0x198>
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	2100      	movs	r1, #0
 80028c8:	4618      	mov	r0, r3
 80028ca:	f7ff f8f5 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 80028ce:	4603      	mov	r3, r0
 80028d0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80028d4:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80028d8:	fa93 f3a3 	rbit	r3, r3
 80028dc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80028e0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80028e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 80028e8:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <HAL_ADC_ConfigChannel+0x18c>
  {
    return 32U;
 80028f0:	2320      	movs	r3, #32
 80028f2:	e004      	b.n	80028fe <HAL_ADC_ConfigChannel+0x196>
  }
  return __builtin_clz(value);
 80028f4:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80028f8:	fab3 f383 	clz	r3, r3
 80028fc:	b2db      	uxtb	r3, r3
 80028fe:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	681b      	ldr	r3, [r3, #0]
 8002904:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002908:	2b00      	cmp	r3, #0
 800290a:	d105      	bne.n	8002918 <HAL_ADC_ConfigChannel+0x1b0>
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	0e9b      	lsrs	r3, r3, #26
 8002912:	f003 031f 	and.w	r3, r3, #31
 8002916:	e018      	b.n	800294a <HAL_ADC_ConfigChannel+0x1e2>
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002920:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002924:	fa93 f3a3 	rbit	r3, r3
 8002928:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 800292c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002930:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002934:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d101      	bne.n	8002940 <HAL_ADC_ConfigChannel+0x1d8>
    return 32U;
 800293c:	2320      	movs	r3, #32
 800293e:	e004      	b.n	800294a <HAL_ADC_ConfigChannel+0x1e2>
  return __builtin_clz(value);
 8002940:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002944:	fab3 f383 	clz	r3, r3
 8002948:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800294a:	429a      	cmp	r2, r3
 800294c:	d106      	bne.n	800295c <HAL_ADC_ConfigChannel+0x1f4>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2200      	movs	r2, #0
 8002954:	2100      	movs	r1, #0
 8002956:	4618      	mov	r0, r3
 8002958:	f7ff f8c4 	bl	8001ae4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2101      	movs	r1, #1
 8002962:	4618      	mov	r0, r3
 8002964:	f7ff f8a8 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 8002968:	4603      	mov	r3, r0
 800296a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800296e:	2b00      	cmp	r3, #0
 8002970:	d10a      	bne.n	8002988 <HAL_ADC_ConfigChannel+0x220>
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	2101      	movs	r1, #1
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff f89d 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 800297e:	4603      	mov	r3, r0
 8002980:	0e9b      	lsrs	r3, r3, #26
 8002982:	f003 021f 	and.w	r2, r3, #31
 8002986:	e01e      	b.n	80029c6 <HAL_ADC_ConfigChannel+0x25e>
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	2101      	movs	r1, #1
 800298e:	4618      	mov	r0, r3
 8002990:	f7ff f892 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 8002994:	4603      	mov	r3, r0
 8002996:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800299a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800299e:	fa93 f3a3 	rbit	r3, r3
 80029a2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 80029a6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80029aa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 80029ae:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d101      	bne.n	80029ba <HAL_ADC_ConfigChannel+0x252>
    return 32U;
 80029b6:	2320      	movs	r3, #32
 80029b8:	e004      	b.n	80029c4 <HAL_ADC_ConfigChannel+0x25c>
  return __builtin_clz(value);
 80029ba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80029be:	fab3 f383 	clz	r3, r3
 80029c2:	b2db      	uxtb	r3, r3
 80029c4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80029c6:	683b      	ldr	r3, [r7, #0]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d105      	bne.n	80029de <HAL_ADC_ConfigChannel+0x276>
 80029d2:	683b      	ldr	r3, [r7, #0]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	0e9b      	lsrs	r3, r3, #26
 80029d8:	f003 031f 	and.w	r3, r3, #31
 80029dc:	e018      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x2a8>
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	681b      	ldr	r3, [r3, #0]
 80029e2:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80029e6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80029ea:	fa93 f3a3 	rbit	r3, r3
 80029ee:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 80029f2:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80029f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 80029fa:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d101      	bne.n	8002a06 <HAL_ADC_ConfigChannel+0x29e>
    return 32U;
 8002a02:	2320      	movs	r3, #32
 8002a04:	e004      	b.n	8002a10 <HAL_ADC_ConfigChannel+0x2a8>
  return __builtin_clz(value);
 8002a06:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002a0a:	fab3 f383 	clz	r3, r3
 8002a0e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002a10:	429a      	cmp	r2, r3
 8002a12:	d106      	bne.n	8002a22 <HAL_ADC_ConfigChannel+0x2ba>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	2200      	movs	r2, #0
 8002a1a:	2101      	movs	r1, #1
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7ff f861 	bl	8001ae4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	681b      	ldr	r3, [r3, #0]
 8002a26:	2102      	movs	r1, #2
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f7ff f845 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 8002a2e:	4603      	mov	r3, r0
 8002a30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d10a      	bne.n	8002a4e <HAL_ADC_ConfigChannel+0x2e6>
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	2102      	movs	r1, #2
 8002a3e:	4618      	mov	r0, r3
 8002a40:	f7ff f83a 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 8002a44:	4603      	mov	r3, r0
 8002a46:	0e9b      	lsrs	r3, r3, #26
 8002a48:	f003 021f 	and.w	r2, r3, #31
 8002a4c:	e01e      	b.n	8002a8c <HAL_ADC_ConfigChannel+0x324>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	2102      	movs	r1, #2
 8002a54:	4618      	mov	r0, r3
 8002a56:	f7ff f82f 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002a60:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002a64:	fa93 f3a3 	rbit	r3, r3
 8002a68:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 8002a6c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002a70:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 8002a74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a78:	2b00      	cmp	r3, #0
 8002a7a:	d101      	bne.n	8002a80 <HAL_ADC_ConfigChannel+0x318>
    return 32U;
 8002a7c:	2320      	movs	r3, #32
 8002a7e:	e004      	b.n	8002a8a <HAL_ADC_ConfigChannel+0x322>
  return __builtin_clz(value);
 8002a80:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8002a84:	fab3 f383 	clz	r3, r3
 8002a88:	b2db      	uxtb	r3, r3
 8002a8a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d105      	bne.n	8002aa4 <HAL_ADC_ConfigChannel+0x33c>
 8002a98:	683b      	ldr	r3, [r7, #0]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	0e9b      	lsrs	r3, r3, #26
 8002a9e:	f003 031f 	and.w	r3, r3, #31
 8002aa2:	e016      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x36a>
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002aac:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002ab0:	fa93 f3a3 	rbit	r3, r3
 8002ab4:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8002ab6:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8002ab8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 8002abc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d101      	bne.n	8002ac8 <HAL_ADC_ConfigChannel+0x360>
    return 32U;
 8002ac4:	2320      	movs	r3, #32
 8002ac6:	e004      	b.n	8002ad2 <HAL_ADC_ConfigChannel+0x36a>
  return __builtin_clz(value);
 8002ac8:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002acc:	fab3 f383 	clz	r3, r3
 8002ad0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8002ad2:	429a      	cmp	r2, r3
 8002ad4:	d106      	bne.n	8002ae4 <HAL_ADC_ConfigChannel+0x37c>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	2200      	movs	r2, #0
 8002adc:	2102      	movs	r1, #2
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f7ff f800 	bl	8001ae4 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	2103      	movs	r1, #3
 8002aea:	4618      	mov	r0, r3
 8002aec:	f7fe ffe4 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 8002af0:	4603      	mov	r3, r0
 8002af2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d10a      	bne.n	8002b10 <HAL_ADC_ConfigChannel+0x3a8>
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2103      	movs	r1, #3
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fe ffd9 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 8002b06:	4603      	mov	r3, r0
 8002b08:	0e9b      	lsrs	r3, r3, #26
 8002b0a:	f003 021f 	and.w	r2, r3, #31
 8002b0e:	e017      	b.n	8002b40 <HAL_ADC_ConfigChannel+0x3d8>
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2103      	movs	r1, #3
 8002b16:	4618      	mov	r0, r3
 8002b18:	f7fe ffce 	bl	8001ab8 <LL_ADC_GetOffsetChannel>
 8002b1c:	4603      	mov	r3, r0
 8002b1e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002b22:	fa93 f3a3 	rbit	r3, r3
 8002b26:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8002b28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002b2a:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8002b2c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	d101      	bne.n	8002b36 <HAL_ADC_ConfigChannel+0x3ce>
    return 32U;
 8002b32:	2320      	movs	r3, #32
 8002b34:	e003      	b.n	8002b3e <HAL_ADC_ConfigChannel+0x3d6>
  return __builtin_clz(value);
 8002b36:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002b38:	fab3 f383 	clz	r3, r3
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002b40:	683b      	ldr	r3, [r7, #0]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d105      	bne.n	8002b58 <HAL_ADC_ConfigChannel+0x3f0>
 8002b4c:	683b      	ldr	r3, [r7, #0]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	0e9b      	lsrs	r3, r3, #26
 8002b52:	f003 031f 	and.w	r3, r3, #31
 8002b56:	e011      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x414>
 8002b58:	683b      	ldr	r3, [r7, #0]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002b5e:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002b60:	fa93 f3a3 	rbit	r3, r3
 8002b64:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 8002b66:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002b68:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 8002b6a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d101      	bne.n	8002b74 <HAL_ADC_ConfigChannel+0x40c>
    return 32U;
 8002b70:	2320      	movs	r3, #32
 8002b72:	e003      	b.n	8002b7c <HAL_ADC_ConfigChannel+0x414>
  return __builtin_clz(value);
 8002b74:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002b76:	fab3 f383 	clz	r3, r3
 8002b7a:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d106      	bne.n	8002b8e <HAL_ADC_ConfigChannel+0x426>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	2200      	movs	r2, #0
 8002b86:	2103      	movs	r1, #3
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fe ffab 	bl	8001ae4 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7ff f92a 	bl	8001dec <LL_ADC_IsEnabled>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	f040 8140 	bne.w	8002e20 <HAL_ADC_ConfigChannel+0x6b8>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	6818      	ldr	r0, [r3, #0]
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	6819      	ldr	r1, [r3, #0]
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	461a      	mov	r2, r3
 8002bae:	f7ff f87b 	bl	8001ca8 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	68db      	ldr	r3, [r3, #12]
 8002bb6:	4a8f      	ldr	r2, [pc, #572]	@ (8002df4 <HAL_ADC_ConfigChannel+0x68c>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	f040 8131 	bne.w	8002e20 <HAL_ADC_ConfigChannel+0x6b8>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bca:	2b00      	cmp	r3, #0
 8002bcc:	d10b      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x47e>
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	0e9b      	lsrs	r3, r3, #26
 8002bd4:	3301      	adds	r3, #1
 8002bd6:	f003 031f 	and.w	r3, r3, #31
 8002bda:	2b09      	cmp	r3, #9
 8002bdc:	bf94      	ite	ls
 8002bde:	2301      	movls	r3, #1
 8002be0:	2300      	movhi	r3, #0
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	e019      	b.n	8002c1a <HAL_ADC_ConfigChannel+0x4b2>
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002bec:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002bee:	fa93 f3a3 	rbit	r3, r3
 8002bf2:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8002bf4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8002bf6:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8002bf8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d101      	bne.n	8002c02 <HAL_ADC_ConfigChannel+0x49a>
    return 32U;
 8002bfe:	2320      	movs	r3, #32
 8002c00:	e003      	b.n	8002c0a <HAL_ADC_ConfigChannel+0x4a2>
  return __builtin_clz(value);
 8002c02:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002c04:	fab3 f383 	clz	r3, r3
 8002c08:	b2db      	uxtb	r3, r3
 8002c0a:	3301      	adds	r3, #1
 8002c0c:	f003 031f 	and.w	r3, r3, #31
 8002c10:	2b09      	cmp	r3, #9
 8002c12:	bf94      	ite	ls
 8002c14:	2301      	movls	r3, #1
 8002c16:	2300      	movhi	r3, #0
 8002c18:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d079      	beq.n	8002d12 <HAL_ADC_ConfigChannel+0x5aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002c1e:	683b      	ldr	r3, [r7, #0]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d107      	bne.n	8002c3a <HAL_ADC_ConfigChannel+0x4d2>
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	0e9b      	lsrs	r3, r3, #26
 8002c30:	3301      	adds	r3, #1
 8002c32:	069b      	lsls	r3, r3, #26
 8002c34:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c38:	e015      	b.n	8002c66 <HAL_ADC_ConfigChannel+0x4fe>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002c42:	fa93 f3a3 	rbit	r3, r3
 8002c46:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 8002c48:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002c4a:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 8002c4c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c4e:	2b00      	cmp	r3, #0
 8002c50:	d101      	bne.n	8002c56 <HAL_ADC_ConfigChannel+0x4ee>
    return 32U;
 8002c52:	2320      	movs	r3, #32
 8002c54:	e003      	b.n	8002c5e <HAL_ADC_ConfigChannel+0x4f6>
  return __builtin_clz(value);
 8002c56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8002c58:	fab3 f383 	clz	r3, r3
 8002c5c:	b2db      	uxtb	r3, r3
 8002c5e:	3301      	adds	r3, #1
 8002c60:	069b      	lsls	r3, r3, #26
 8002c62:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002c66:	683b      	ldr	r3, [r7, #0]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d109      	bne.n	8002c86 <HAL_ADC_ConfigChannel+0x51e>
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	0e9b      	lsrs	r3, r3, #26
 8002c78:	3301      	adds	r3, #1
 8002c7a:	f003 031f 	and.w	r3, r3, #31
 8002c7e:	2101      	movs	r1, #1
 8002c80:	fa01 f303 	lsl.w	r3, r1, r3
 8002c84:	e017      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0x54e>
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002c8c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c8e:	fa93 f3a3 	rbit	r3, r3
 8002c92:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 8002c94:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c96:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8002c98:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	d101      	bne.n	8002ca2 <HAL_ADC_ConfigChannel+0x53a>
    return 32U;
 8002c9e:	2320      	movs	r3, #32
 8002ca0:	e003      	b.n	8002caa <HAL_ADC_ConfigChannel+0x542>
  return __builtin_clz(value);
 8002ca2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002ca4:	fab3 f383 	clz	r3, r3
 8002ca8:	b2db      	uxtb	r3, r3
 8002caa:	3301      	adds	r3, #1
 8002cac:	f003 031f 	and.w	r3, r3, #31
 8002cb0:	2101      	movs	r1, #1
 8002cb2:	fa01 f303 	lsl.w	r3, r1, r3
 8002cb6:	ea42 0103 	orr.w	r1, r2, r3
 8002cba:	683b      	ldr	r3, [r7, #0]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d10a      	bne.n	8002cdc <HAL_ADC_ConfigChannel+0x574>
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	0e9b      	lsrs	r3, r3, #26
 8002ccc:	3301      	adds	r3, #1
 8002cce:	f003 021f 	and.w	r2, r3, #31
 8002cd2:	4613      	mov	r3, r2
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	4413      	add	r3, r2
 8002cd8:	051b      	lsls	r3, r3, #20
 8002cda:	e018      	b.n	8002d0e <HAL_ADC_ConfigChannel+0x5a6>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ce2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002ce4:	fa93 f3a3 	rbit	r3, r3
 8002ce8:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8002cea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8002cee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d101      	bne.n	8002cf8 <HAL_ADC_ConfigChannel+0x590>
    return 32U;
 8002cf4:	2320      	movs	r3, #32
 8002cf6:	e003      	b.n	8002d00 <HAL_ADC_ConfigChannel+0x598>
  return __builtin_clz(value);
 8002cf8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002cfa:	fab3 f383 	clz	r3, r3
 8002cfe:	b2db      	uxtb	r3, r3
 8002d00:	3301      	adds	r3, #1
 8002d02:	f003 021f 	and.w	r2, r3, #31
 8002d06:	4613      	mov	r3, r2
 8002d08:	005b      	lsls	r3, r3, #1
 8002d0a:	4413      	add	r3, r2
 8002d0c:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002d0e:	430b      	orrs	r3, r1
 8002d10:	e081      	b.n	8002e16 <HAL_ADC_ConfigChannel+0x6ae>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d107      	bne.n	8002d2e <HAL_ADC_ConfigChannel+0x5c6>
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	0e9b      	lsrs	r3, r3, #26
 8002d24:	3301      	adds	r3, #1
 8002d26:	069b      	lsls	r3, r3, #26
 8002d28:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d2c:	e015      	b.n	8002d5a <HAL_ADC_ConfigChannel+0x5f2>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d34:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002d36:	fa93 f3a3 	rbit	r3, r3
 8002d3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 8002d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002d3e:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 8002d40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d101      	bne.n	8002d4a <HAL_ADC_ConfigChannel+0x5e2>
    return 32U;
 8002d46:	2320      	movs	r3, #32
 8002d48:	e003      	b.n	8002d52 <HAL_ADC_ConfigChannel+0x5ea>
  return __builtin_clz(value);
 8002d4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d4c:	fab3 f383 	clz	r3, r3
 8002d50:	b2db      	uxtb	r3, r3
 8002d52:	3301      	adds	r3, #1
 8002d54:	069b      	lsls	r3, r3, #26
 8002d56:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8002d5a:	683b      	ldr	r3, [r7, #0]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d109      	bne.n	8002d7a <HAL_ADC_ConfigChannel+0x612>
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	0e9b      	lsrs	r3, r3, #26
 8002d6c:	3301      	adds	r3, #1
 8002d6e:	f003 031f 	and.w	r3, r3, #31
 8002d72:	2101      	movs	r1, #1
 8002d74:	fa01 f303 	lsl.w	r3, r1, r3
 8002d78:	e017      	b.n	8002daa <HAL_ADC_ConfigChannel+0x642>
 8002d7a:	683b      	ldr	r3, [r7, #0]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002d80:	6a3b      	ldr	r3, [r7, #32]
 8002d82:	fa93 f3a3 	rbit	r3, r3
 8002d86:	61fb      	str	r3, [r7, #28]
  return result;
 8002d88:	69fb      	ldr	r3, [r7, #28]
 8002d8a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 8002d8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d101      	bne.n	8002d96 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002d92:	2320      	movs	r3, #32
 8002d94:	e003      	b.n	8002d9e <HAL_ADC_ConfigChannel+0x636>
  return __builtin_clz(value);
 8002d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d98:	fab3 f383 	clz	r3, r3
 8002d9c:	b2db      	uxtb	r3, r3
 8002d9e:	3301      	adds	r3, #1
 8002da0:	f003 031f 	and.w	r3, r3, #31
 8002da4:	2101      	movs	r1, #1
 8002da6:	fa01 f303 	lsl.w	r3, r1, r3
 8002daa:	ea42 0103 	orr.w	r1, r2, r3
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d10d      	bne.n	8002dd6 <HAL_ADC_ConfigChannel+0x66e>
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	0e9b      	lsrs	r3, r3, #26
 8002dc0:	3301      	adds	r3, #1
 8002dc2:	f003 021f 	and.w	r2, r3, #31
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	3b1e      	subs	r3, #30
 8002dce:	051b      	lsls	r3, r3, #20
 8002dd0:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002dd4:	e01e      	b.n	8002e14 <HAL_ADC_ConfigChannel+0x6ac>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	fa93 f3a3 	rbit	r3, r3
 8002de2:	613b      	str	r3, [r7, #16]
  return result;
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d104      	bne.n	8002df8 <HAL_ADC_ConfigChannel+0x690>
    return 32U;
 8002dee:	2320      	movs	r3, #32
 8002df0:	e006      	b.n	8002e00 <HAL_ADC_ConfigChannel+0x698>
 8002df2:	bf00      	nop
 8002df4:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8002df8:	69bb      	ldr	r3, [r7, #24]
 8002dfa:	fab3 f383 	clz	r3, r3
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	3301      	adds	r3, #1
 8002e02:	f003 021f 	and.w	r2, r3, #31
 8002e06:	4613      	mov	r3, r2
 8002e08:	005b      	lsls	r3, r3, #1
 8002e0a:	4413      	add	r3, r2
 8002e0c:	3b1e      	subs	r3, #30
 8002e0e:	051b      	lsls	r3, r3, #20
 8002e10:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e14:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 8002e16:	683a      	ldr	r2, [r7, #0]
 8002e18:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002e1a:	4619      	mov	r1, r3
 8002e1c:	f7fe ff18 	bl	8001c50 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	681a      	ldr	r2, [r3, #0]
 8002e24:	4b3f      	ldr	r3, [pc, #252]	@ (8002f24 <HAL_ADC_ConfigChannel+0x7bc>)
 8002e26:	4013      	ands	r3, r2
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	d071      	beq.n	8002f10 <HAL_ADC_ConfigChannel+0x7a8>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002e2c:	483e      	ldr	r0, [pc, #248]	@ (8002f28 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e2e:	f7fe fe11 	bl	8001a54 <LL_ADC_GetCommonPathInternalCh>
 8002e32:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a3c      	ldr	r2, [pc, #240]	@ (8002f2c <HAL_ADC_ConfigChannel+0x7c4>)
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d004      	beq.n	8002e4a <HAL_ADC_ConfigChannel+0x6e2>
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4a3a      	ldr	r2, [pc, #232]	@ (8002f30 <HAL_ADC_ConfigChannel+0x7c8>)
 8002e46:	4293      	cmp	r3, r2
 8002e48:	d127      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x732>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8002e4a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e4e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d121      	bne.n	8002e9a <HAL_ADC_ConfigChannel+0x732>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002e5e:	d157      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002e60:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002e64:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8002e68:	4619      	mov	r1, r3
 8002e6a:	482f      	ldr	r0, [pc, #188]	@ (8002f28 <HAL_ADC_ConfigChannel+0x7c0>)
 8002e6c:	f7fe fddf 	bl	8001a2e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e70:	4b30      	ldr	r3, [pc, #192]	@ (8002f34 <HAL_ADC_ConfigChannel+0x7cc>)
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	099b      	lsrs	r3, r3, #6
 8002e76:	4a30      	ldr	r2, [pc, #192]	@ (8002f38 <HAL_ADC_ConfigChannel+0x7d0>)
 8002e78:	fba2 2303 	umull	r2, r3, r2, r3
 8002e7c:	099b      	lsrs	r3, r3, #6
 8002e7e:	1c5a      	adds	r2, r3, #1
 8002e80:	4613      	mov	r3, r2
 8002e82:	005b      	lsls	r3, r3, #1
 8002e84:	4413      	add	r3, r2
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e8a:	e002      	b.n	8002e92 <HAL_ADC_ConfigChannel+0x72a>
          {
            wait_loop_index--;
 8002e8c:	68fb      	ldr	r3, [r7, #12]
 8002e8e:	3b01      	subs	r3, #1
 8002e90:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d1f9      	bne.n	8002e8c <HAL_ADC_ConfigChannel+0x724>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002e98:	e03a      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x7a8>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8002e9a:	683b      	ldr	r3, [r7, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4a27      	ldr	r2, [pc, #156]	@ (8002f3c <HAL_ADC_ConfigChannel+0x7d4>)
 8002ea0:	4293      	cmp	r3, r2
 8002ea2:	d113      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x764>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002ea4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ea8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d10d      	bne.n	8002ecc <HAL_ADC_ConfigChannel+0x764>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eb0:	687b      	ldr	r3, [r7, #4]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	4a22      	ldr	r2, [pc, #136]	@ (8002f40 <HAL_ADC_ConfigChannel+0x7d8>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d02a      	beq.n	8002f10 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eba:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ebe:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8002ec2:	4619      	mov	r1, r3
 8002ec4:	4818      	ldr	r0, [pc, #96]	@ (8002f28 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ec6:	f7fe fdb2 	bl	8001a2e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002eca:	e021      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x7a8>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	4a1c      	ldr	r2, [pc, #112]	@ (8002f44 <HAL_ADC_ConfigChannel+0x7dc>)
 8002ed2:	4293      	cmp	r3, r2
 8002ed4:	d11c      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x7a8>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002ed6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002eda:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d116      	bne.n	8002f10 <HAL_ADC_ConfigChannel+0x7a8>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4a16      	ldr	r2, [pc, #88]	@ (8002f40 <HAL_ADC_ConfigChannel+0x7d8>)
 8002ee8:	4293      	cmp	r3, r2
 8002eea:	d011      	beq.n	8002f10 <HAL_ADC_ConfigChannel+0x7a8>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002eec:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8002ef0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002ef4:	4619      	mov	r1, r3
 8002ef6:	480c      	ldr	r0, [pc, #48]	@ (8002f28 <HAL_ADC_ConfigChannel+0x7c0>)
 8002ef8:	f7fe fd99 	bl	8001a2e <LL_ADC_SetCommonPathInternalCh>
 8002efc:	e008      	b.n	8002f10 <HAL_ADC_ConfigChannel+0x7a8>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f02:	f043 0220 	orr.w	r2, r3, #32
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f0a:	2301      	movs	r3, #1
 8002f0c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	2200      	movs	r2, #0
 8002f14:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8002f18:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	37d8      	adds	r7, #216	@ 0xd8
 8002f20:	46bd      	mov	sp, r7
 8002f22:	bd80      	pop	{r7, pc}
 8002f24:	80080000 	.word	0x80080000
 8002f28:	50000300 	.word	0x50000300
 8002f2c:	c3210000 	.word	0xc3210000
 8002f30:	90c00010 	.word	0x90c00010
 8002f34:	20000018 	.word	0x20000018
 8002f38:	053e2d63 	.word	0x053e2d63
 8002f3c:	c7520000 	.word	0xc7520000
 8002f40:	50000100 	.word	0x50000100
 8002f44:	cb840000 	.word	0xcb840000

08002f48 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002f50:	2300      	movs	r3, #0
 8002f52:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe ff47 	bl	8001dec <LL_ADC_IsEnabled>
 8002f5e:	4603      	mov	r3, r0
 8002f60:	2b00      	cmp	r3, #0
 8002f62:	d169      	bne.n	8003038 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	689a      	ldr	r2, [r3, #8]
 8002f6a:	4b36      	ldr	r3, [pc, #216]	@ (8003044 <ADC_Enable+0xfc>)
 8002f6c:	4013      	ands	r3, r2
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d00d      	beq.n	8002f8e <ADC_Enable+0x46>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002f76:	f043 0210 	orr.w	r2, r3, #16
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002f82:	f043 0201 	orr.w	r2, r3, #1
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	661a      	str	r2, [r3, #96]	@ 0x60

      return HAL_ERROR;
 8002f8a:	2301      	movs	r3, #1
 8002f8c:	e055      	b.n	800303a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4618      	mov	r0, r3
 8002f94:	f7fe ff16 	bl	8001dc4 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002f98:	482b      	ldr	r0, [pc, #172]	@ (8003048 <ADC_Enable+0x100>)
 8002f9a:	f7fe fd5b 	bl	8001a54 <LL_ADC_GetCommonPathInternalCh>
 8002f9e:	4603      	mov	r3, r0
         & LL_ADC_PATH_INTERNAL_TEMPSENSOR) != 0UL)
 8002fa0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance))
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d013      	beq.n	8002fd0 <ADC_Enable+0x88>

      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002fa8:	4b28      	ldr	r3, [pc, #160]	@ (800304c <ADC_Enable+0x104>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	099b      	lsrs	r3, r3, #6
 8002fae:	4a28      	ldr	r2, [pc, #160]	@ (8003050 <ADC_Enable+0x108>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	099b      	lsrs	r3, r3, #6
 8002fb6:	1c5a      	adds	r2, r3, #1
 8002fb8:	4613      	mov	r3, r2
 8002fba:	005b      	lsls	r3, r3, #1
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fc2:	e002      	b.n	8002fca <ADC_Enable+0x82>
      {
        wait_loop_index--;
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002fca:	68bb      	ldr	r3, [r7, #8]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d1f9      	bne.n	8002fc4 <ADC_Enable+0x7c>
      }
    }

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8002fd0:	f7fe fcec 	bl	80019ac <HAL_GetTick>
 8002fd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002fd6:	e028      	b.n	800302a <ADC_Enable+0xe2>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fe ff05 	bl	8001dec <LL_ADC_IsEnabled>
 8002fe2:	4603      	mov	r3, r0
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d104      	bne.n	8002ff2 <ADC_Enable+0xaa>
      {
        LL_ADC_Enable(hadc->Instance);
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fe fee9 	bl	8001dc4 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002ff2:	f7fe fcdb 	bl	80019ac <HAL_GetTick>
 8002ff6:	4602      	mov	r2, r0
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	1ad3      	subs	r3, r2, r3
 8002ffc:	2b02      	cmp	r3, #2
 8002ffe:	d914      	bls.n	800302a <ADC_Enable+0xe2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0301 	and.w	r3, r3, #1
 800300a:	2b01      	cmp	r3, #1
 800300c:	d00d      	beq.n	800302a <ADC_Enable+0xe2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003012:	f043 0210 	orr.w	r2, r3, #16
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	65da      	str	r2, [r3, #92]	@ 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800301e:	f043 0201 	orr.w	r2, r3, #1
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	661a      	str	r2, [r3, #96]	@ 0x60

          return HAL_ERROR;
 8003026:	2301      	movs	r3, #1
 8003028:	e007      	b.n	800303a <ADC_Enable+0xf2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	f003 0301 	and.w	r3, r3, #1
 8003034:	2b01      	cmp	r3, #1
 8003036:	d1cf      	bne.n	8002fd8 <ADC_Enable+0x90>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003038:	2300      	movs	r3, #0
}
 800303a:	4618      	mov	r0, r3
 800303c:	3710      	adds	r7, #16
 800303e:	46bd      	mov	sp, r7
 8003040:	bd80      	pop	{r7, pc}
 8003042:	bf00      	nop
 8003044:	8000003f 	.word	0x8000003f
 8003048:	50000300 	.word	0x50000300
 800304c:	20000018 	.word	0x20000018
 8003050:	053e2d63 	.word	0x053e2d63

08003054 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003060:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003066:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800306a:	2b00      	cmp	r3, #0
 800306c:	d14b      	bne.n	8003106 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800306e:	68fb      	ldr	r3, [r7, #12]
 8003070:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003072:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f003 0308 	and.w	r3, r3, #8
 8003084:	2b00      	cmp	r3, #0
 8003086:	d021      	beq.n	80030cc <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4618      	mov	r0, r3
 800308e:	f7fe fd8d 	bl	8001bac <LL_ADC_REG_IsTriggerSourceSWStart>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d032      	beq.n	80030fe <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68db      	ldr	r3, [r3, #12]
 800309e:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d12b      	bne.n	80030fe <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030a6:	68fb      	ldr	r3, [r7, #12]
 80030a8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030aa:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	65da      	str	r2, [r3, #92]	@ 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030b2:	68fb      	ldr	r3, [r7, #12]
 80030b4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030b6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d11f      	bne.n	80030fe <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030be:	68fb      	ldr	r3, [r7, #12]
 80030c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030c2:	f043 0201 	orr.w	r2, r3, #1
 80030c6:	68fb      	ldr	r3, [r7, #12]
 80030c8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80030ca:	e018      	b.n	80030fe <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 80030cc:	68fb      	ldr	r3, [r7, #12]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
 80030d2:	f003 0302 	and.w	r3, r3, #2
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d111      	bne.n	80030fe <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80030da:	68fb      	ldr	r3, [r7, #12]
 80030dc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030de:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	65da      	str	r2, [r3, #92]	@ 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80030e6:	68fb      	ldr	r3, [r7, #12]
 80030e8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d105      	bne.n	80030fe <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80030f2:	68fb      	ldr	r3, [r7, #12]
 80030f4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80030f6:	f043 0201 	orr.w	r2, r3, #1
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80030fe:	68f8      	ldr	r0, [r7, #12]
 8003100:	f7fd feb6 	bl	8000e70 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003104:	e00e      	b.n	8003124 <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800310a:	f003 0310 	and.w	r3, r3, #16
 800310e:	2b00      	cmp	r3, #0
 8003110:	d003      	beq.n	800311a <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003112:	68f8      	ldr	r0, [r7, #12]
 8003114:	f7ff fb1e 	bl	8002754 <HAL_ADC_ErrorCallback>
}
 8003118:	e004      	b.n	8003124 <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800311e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003120:	6878      	ldr	r0, [r7, #4]
 8003122:	4798      	blx	r3
}
 8003124:	bf00      	nop
 8003126:	3710      	adds	r7, #16
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}

0800312c <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 800312c:	b580      	push	{r7, lr}
 800312e:	b084      	sub	sp, #16
 8003130:	af00      	add	r7, sp, #0
 8003132:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003138:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800313a:	68f8      	ldr	r0, [r7, #12]
 800313c:	f7ff faf6 	bl	800272c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003140:	bf00      	nop
 8003142:	3710      	adds	r7, #16
 8003144:	46bd      	mov	sp, r7
 8003146:	bd80      	pop	{r7, pc}

08003148 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b084      	sub	sp, #16
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003154:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800315a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003166:	f043 0204 	orr.w	r2, r3, #4
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 800316e:	68f8      	ldr	r0, [r7, #12]
 8003170:	f7ff faf0 	bl	8002754 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003174:	bf00      	nop
 8003176:	3710      	adds	r7, #16
 8003178:	46bd      	mov	sp, r7
 800317a:	bd80      	pop	{r7, pc}

0800317c <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800317c:	b480      	push	{r7}
 800317e:	b083      	sub	sp, #12
 8003180:	af00      	add	r7, sp, #0
 8003182:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003184:	bf00      	nop
 8003186:	370c      	adds	r7, #12
 8003188:	46bd      	mov	sp, r7
 800318a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318e:	4770      	bx	lr

08003190 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8003190:	b480      	push	{r7}
 8003192:	b083      	sub	sp, #12
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003198:	bf00      	nop
 800319a:	370c      	adds	r7, #12
 800319c:	46bd      	mov	sp, r7
 800319e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031a2:	4770      	bx	lr

080031a4 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 80031a4:	b480      	push	{r7}
 80031a6:	b083      	sub	sp, #12
 80031a8:	af00      	add	r7, sp, #0
 80031aa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 80031ac:	bf00      	nop
 80031ae:	370c      	adds	r7, #12
 80031b0:	46bd      	mov	sp, r7
 80031b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b6:	4770      	bx	lr

080031b8 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b083      	sub	sp, #12
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 80031c0:	bf00      	nop
 80031c2:	370c      	adds	r7, #12
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr

080031cc <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 80031cc:	b480      	push	{r7}
 80031ce:	b083      	sub	sp, #12
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 80031d4:	bf00      	nop
 80031d6:	370c      	adds	r7, #12
 80031d8:	46bd      	mov	sp, r7
 80031da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031de:	4770      	bx	lr

080031e0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031e0:	b480      	push	{r7}
 80031e2:	b085      	sub	sp, #20
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	f003 0307 	and.w	r3, r3, #7
 80031ee:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031f0:	4b0c      	ldr	r3, [pc, #48]	@ (8003224 <__NVIC_SetPriorityGrouping+0x44>)
 80031f2:	68db      	ldr	r3, [r3, #12]
 80031f4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031f6:	68ba      	ldr	r2, [r7, #8]
 80031f8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031fc:	4013      	ands	r3, r2
 80031fe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003208:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800320c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003210:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003212:	4a04      	ldr	r2, [pc, #16]	@ (8003224 <__NVIC_SetPriorityGrouping+0x44>)
 8003214:	68bb      	ldr	r3, [r7, #8]
 8003216:	60d3      	str	r3, [r2, #12]
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr
 8003224:	e000ed00 	.word	0xe000ed00

08003228 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003228:	b480      	push	{r7}
 800322a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800322c:	4b04      	ldr	r3, [pc, #16]	@ (8003240 <__NVIC_GetPriorityGrouping+0x18>)
 800322e:	68db      	ldr	r3, [r3, #12]
 8003230:	0a1b      	lsrs	r3, r3, #8
 8003232:	f003 0307 	and.w	r3, r3, #7
}
 8003236:	4618      	mov	r0, r3
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000ed00 	.word	0xe000ed00

08003244 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003252:	2b00      	cmp	r3, #0
 8003254:	db0b      	blt.n	800326e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003256:	79fb      	ldrb	r3, [r7, #7]
 8003258:	f003 021f 	and.w	r2, r3, #31
 800325c:	4907      	ldr	r1, [pc, #28]	@ (800327c <__NVIC_EnableIRQ+0x38>)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	095b      	lsrs	r3, r3, #5
 8003264:	2001      	movs	r0, #1
 8003266:	fa00 f202 	lsl.w	r2, r0, r2
 800326a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800326e:	bf00      	nop
 8003270:	370c      	adds	r7, #12
 8003272:	46bd      	mov	sp, r7
 8003274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003278:	4770      	bx	lr
 800327a:	bf00      	nop
 800327c:	e000e100 	.word	0xe000e100

08003280 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003280:	b480      	push	{r7}
 8003282:	b083      	sub	sp, #12
 8003284:	af00      	add	r7, sp, #0
 8003286:	4603      	mov	r3, r0
 8003288:	6039      	str	r1, [r7, #0]
 800328a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800328c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003290:	2b00      	cmp	r3, #0
 8003292:	db0a      	blt.n	80032aa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	b2da      	uxtb	r2, r3
 8003298:	490c      	ldr	r1, [pc, #48]	@ (80032cc <__NVIC_SetPriority+0x4c>)
 800329a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329e:	0112      	lsls	r2, r2, #4
 80032a0:	b2d2      	uxtb	r2, r2
 80032a2:	440b      	add	r3, r1
 80032a4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032a8:	e00a      	b.n	80032c0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032aa:	683b      	ldr	r3, [r7, #0]
 80032ac:	b2da      	uxtb	r2, r3
 80032ae:	4908      	ldr	r1, [pc, #32]	@ (80032d0 <__NVIC_SetPriority+0x50>)
 80032b0:	79fb      	ldrb	r3, [r7, #7]
 80032b2:	f003 030f 	and.w	r3, r3, #15
 80032b6:	3b04      	subs	r3, #4
 80032b8:	0112      	lsls	r2, r2, #4
 80032ba:	b2d2      	uxtb	r2, r2
 80032bc:	440b      	add	r3, r1
 80032be:	761a      	strb	r2, [r3, #24]
}
 80032c0:	bf00      	nop
 80032c2:	370c      	adds	r7, #12
 80032c4:	46bd      	mov	sp, r7
 80032c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ca:	4770      	bx	lr
 80032cc:	e000e100 	.word	0xe000e100
 80032d0:	e000ed00 	.word	0xe000ed00

080032d4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d4:	b480      	push	{r7}
 80032d6:	b089      	sub	sp, #36	@ 0x24
 80032d8:	af00      	add	r7, sp, #0
 80032da:	60f8      	str	r0, [r7, #12]
 80032dc:	60b9      	str	r1, [r7, #8]
 80032de:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	f003 0307 	and.w	r3, r3, #7
 80032e6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	f1c3 0307 	rsb	r3, r3, #7
 80032ee:	2b04      	cmp	r3, #4
 80032f0:	bf28      	it	cs
 80032f2:	2304      	movcs	r3, #4
 80032f4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	3304      	adds	r3, #4
 80032fa:	2b06      	cmp	r3, #6
 80032fc:	d902      	bls.n	8003304 <NVIC_EncodePriority+0x30>
 80032fe:	69fb      	ldr	r3, [r7, #28]
 8003300:	3b03      	subs	r3, #3
 8003302:	e000      	b.n	8003306 <NVIC_EncodePriority+0x32>
 8003304:	2300      	movs	r3, #0
 8003306:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003308:	f04f 32ff 	mov.w	r2, #4294967295
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	fa02 f303 	lsl.w	r3, r2, r3
 8003312:	43da      	mvns	r2, r3
 8003314:	68bb      	ldr	r3, [r7, #8]
 8003316:	401a      	ands	r2, r3
 8003318:	697b      	ldr	r3, [r7, #20]
 800331a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800331c:	f04f 31ff 	mov.w	r1, #4294967295
 8003320:	697b      	ldr	r3, [r7, #20]
 8003322:	fa01 f303 	lsl.w	r3, r1, r3
 8003326:	43d9      	mvns	r1, r3
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800332c:	4313      	orrs	r3, r2
         );
}
 800332e:	4618      	mov	r0, r3
 8003330:	3724      	adds	r7, #36	@ 0x24
 8003332:	46bd      	mov	sp, r7
 8003334:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003338:	4770      	bx	lr

0800333a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800333a:	b580      	push	{r7, lr}
 800333c:	b082      	sub	sp, #8
 800333e:	af00      	add	r7, sp, #0
 8003340:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003342:	6878      	ldr	r0, [r7, #4]
 8003344:	f7ff ff4c 	bl	80031e0 <__NVIC_SetPriorityGrouping>
}
 8003348:	bf00      	nop
 800334a:	3708      	adds	r7, #8
 800334c:	46bd      	mov	sp, r7
 800334e:	bd80      	pop	{r7, pc}

08003350 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	4603      	mov	r3, r0
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
 800335c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800335e:	f7ff ff63 	bl	8003228 <__NVIC_GetPriorityGrouping>
 8003362:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003364:	687a      	ldr	r2, [r7, #4]
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	6978      	ldr	r0, [r7, #20]
 800336a:	f7ff ffb3 	bl	80032d4 <NVIC_EncodePriority>
 800336e:	4602      	mov	r2, r0
 8003370:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003374:	4611      	mov	r1, r2
 8003376:	4618      	mov	r0, r3
 8003378:	f7ff ff82 	bl	8003280 <__NVIC_SetPriority>
}
 800337c:	bf00      	nop
 800337e:	3718      	adds	r7, #24
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}

08003384 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003384:	b580      	push	{r7, lr}
 8003386:	b082      	sub	sp, #8
 8003388:	af00      	add	r7, sp, #0
 800338a:	4603      	mov	r3, r0
 800338c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800338e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003392:	4618      	mov	r0, r3
 8003394:	f7ff ff56 	bl	8003244 <__NVIC_EnableIRQ>
}
 8003398:	bf00      	nop
 800339a:	3708      	adds	r7, #8
 800339c:	46bd      	mov	sp, r7
 800339e:	bd80      	pop	{r7, pc}

080033a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033a0:	b580      	push	{r7, lr}
 80033a2:	b084      	sub	sp, #16
 80033a4:	af00      	add	r7, sp, #0
 80033a6:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d101      	bne.n	80033b2 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80033ae:	2301      	movs	r3, #1
 80033b0:	e08d      	b.n	80034ce <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	461a      	mov	r2, r3
 80033b8:	4b47      	ldr	r3, [pc, #284]	@ (80034d8 <HAL_DMA_Init+0x138>)
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d80f      	bhi.n	80033de <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	461a      	mov	r2, r3
 80033c4:	4b45      	ldr	r3, [pc, #276]	@ (80034dc <HAL_DMA_Init+0x13c>)
 80033c6:	4413      	add	r3, r2
 80033c8:	4a45      	ldr	r2, [pc, #276]	@ (80034e0 <HAL_DMA_Init+0x140>)
 80033ca:	fba2 2303 	umull	r2, r3, r2, r3
 80033ce:	091b      	lsrs	r3, r3, #4
 80033d0:	009a      	lsls	r2, r3, #2
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	4a42      	ldr	r2, [pc, #264]	@ (80034e4 <HAL_DMA_Init+0x144>)
 80033da:	641a      	str	r2, [r3, #64]	@ 0x40
 80033dc:	e00e      	b.n	80033fc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	4b40      	ldr	r3, [pc, #256]	@ (80034e8 <HAL_DMA_Init+0x148>)
 80033e6:	4413      	add	r3, r2
 80033e8:	4a3d      	ldr	r2, [pc, #244]	@ (80034e0 <HAL_DMA_Init+0x140>)
 80033ea:	fba2 2303 	umull	r2, r3, r2, r3
 80033ee:	091b      	lsrs	r3, r3, #4
 80033f0:	009a      	lsls	r2, r3, #2
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a3c      	ldr	r2, [pc, #240]	@ (80034ec <HAL_DMA_Init+0x14c>)
 80033fa:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2202      	movs	r2, #2
 8003400:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8003412:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003416:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8003420:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	691b      	ldr	r3, [r3, #16]
 8003426:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800342c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	699b      	ldr	r3, [r3, #24]
 8003432:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003438:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	6a1b      	ldr	r3, [r3, #32]
 800343e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003440:	68fa      	ldr	r2, [r7, #12]
 8003442:	4313      	orrs	r3, r2
 8003444:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	68fa      	ldr	r2, [r7, #12]
 800344c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800344e:	6878      	ldr	r0, [r7, #4]
 8003450:	f000 f9b6 	bl	80037c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	689b      	ldr	r3, [r3, #8]
 8003458:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800345c:	d102      	bne.n	8003464 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	2200      	movs	r2, #0
 8003462:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800346c:	b2d2      	uxtb	r2, r2
 800346e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003474:	687a      	ldr	r2, [r7, #4]
 8003476:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8003478:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	2b00      	cmp	r3, #0
 8003480:	d010      	beq.n	80034a4 <HAL_DMA_Init+0x104>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b04      	cmp	r3, #4
 8003488:	d80c      	bhi.n	80034a4 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800348a:	6878      	ldr	r0, [r7, #4]
 800348c:	f000 f9d6 	bl	800383c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003494:	2200      	movs	r2, #0
 8003496:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800349c:	687a      	ldr	r2, [r7, #4]
 800349e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 80034a0:	605a      	str	r2, [r3, #4]
 80034a2:	e008      	b.n	80034b6 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2200      	movs	r2, #0
 80034a8:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2200      	movs	r2, #0
 80034ae:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2200      	movs	r2, #0
 80034b4:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2200      	movs	r2, #0
 80034ba:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	2201      	movs	r2, #1
 80034c0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	2200      	movs	r2, #0
 80034c8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80034cc:	2300      	movs	r3, #0
}
 80034ce:	4618      	mov	r0, r3
 80034d0:	3710      	adds	r7, #16
 80034d2:	46bd      	mov	sp, r7
 80034d4:	bd80      	pop	{r7, pc}
 80034d6:	bf00      	nop
 80034d8:	40020407 	.word	0x40020407
 80034dc:	bffdfff8 	.word	0xbffdfff8
 80034e0:	cccccccd 	.word	0xcccccccd
 80034e4:	40020000 	.word	0x40020000
 80034e8:	bffdfbf8 	.word	0xbffdfbf8
 80034ec:	40020400 	.word	0x40020400

080034f0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	60f8      	str	r0, [r7, #12]
 80034f8:	60b9      	str	r1, [r7, #8]
 80034fa:	607a      	str	r2, [r7, #4]
 80034fc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034fe:	2300      	movs	r3, #0
 8003500:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003508:	2b01      	cmp	r3, #1
 800350a:	d101      	bne.n	8003510 <HAL_DMA_Start_IT+0x20>
 800350c:	2302      	movs	r3, #2
 800350e:	e066      	b.n	80035de <HAL_DMA_Start_IT+0xee>
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2201      	movs	r2, #1
 8003514:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 800351e:	b2db      	uxtb	r3, r3
 8003520:	2b01      	cmp	r3, #1
 8003522:	d155      	bne.n	80035d0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003524:	68fb      	ldr	r3, [r7, #12]
 8003526:	2202      	movs	r2, #2
 8003528:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800352c:	68fb      	ldr	r3, [r7, #12]
 800352e:	2200      	movs	r2, #0
 8003530:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f022 0201 	bic.w	r2, r2, #1
 8003540:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	68b9      	ldr	r1, [r7, #8]
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f000 f8fb 	bl	8003744 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003552:	2b00      	cmp	r3, #0
 8003554:	d008      	beq.n	8003568 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f042 020e 	orr.w	r2, r2, #14
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	e00f      	b.n	8003588 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681a      	ldr	r2, [r3, #0]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f022 0204 	bic.w	r2, r2, #4
 8003576:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	681a      	ldr	r2, [r3, #0]
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f042 020a 	orr.w	r2, r2, #10
 8003586:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003592:	2b00      	cmp	r3, #0
 8003594:	d007      	beq.n	80035a6 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800359a:	681a      	ldr	r2, [r3, #0]
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80035a0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035a4:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d007      	beq.n	80035be <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b2:	681a      	ldr	r2, [r3, #0]
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80035bc:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	681a      	ldr	r2, [r3, #0]
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f042 0201 	orr.w	r2, r2, #1
 80035cc:	601a      	str	r2, [r3, #0]
 80035ce:	e005      	b.n	80035dc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	2200      	movs	r2, #0
 80035d4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80035d8:	2302      	movs	r3, #2
 80035da:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80035dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80035de:	4618      	mov	r0, r3
 80035e0:	3718      	adds	r7, #24
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}

080035e6 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80035e6:	b580      	push	{r7, lr}
 80035e8:	b084      	sub	sp, #16
 80035ea:	af00      	add	r7, sp, #0
 80035ec:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003602:	f003 031f 	and.w	r3, r3, #31
 8003606:	2204      	movs	r2, #4
 8003608:	409a      	lsls	r2, r3
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	4013      	ands	r3, r2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d026      	beq.n	8003660 <HAL_DMA_IRQHandler+0x7a>
 8003612:	68bb      	ldr	r3, [r7, #8]
 8003614:	f003 0304 	and.w	r3, r3, #4
 8003618:	2b00      	cmp	r3, #0
 800361a:	d021      	beq.n	8003660 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f003 0320 	and.w	r3, r3, #32
 8003626:	2b00      	cmp	r3, #0
 8003628:	d107      	bne.n	800363a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	681a      	ldr	r2, [r3, #0]
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f022 0204 	bic.w	r2, r2, #4
 8003638:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363e:	f003 021f 	and.w	r2, r3, #31
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003646:	2104      	movs	r1, #4
 8003648:	fa01 f202 	lsl.w	r2, r1, r2
 800364c:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003652:	2b00      	cmp	r3, #0
 8003654:	d071      	beq.n	800373a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800365a:	6878      	ldr	r0, [r7, #4]
 800365c:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800365e:	e06c      	b.n	800373a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003664:	f003 031f 	and.w	r3, r3, #31
 8003668:	2202      	movs	r2, #2
 800366a:	409a      	lsls	r2, r3
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	4013      	ands	r3, r2
 8003670:	2b00      	cmp	r3, #0
 8003672:	d02e      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8003674:	68bb      	ldr	r3, [r7, #8]
 8003676:	f003 0302 	and.w	r3, r3, #2
 800367a:	2b00      	cmp	r3, #0
 800367c:	d029      	beq.n	80036d2 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0320 	and.w	r3, r3, #32
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10b      	bne.n	80036a4 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	681a      	ldr	r2, [r3, #0]
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	f022 020a 	bic.w	r2, r2, #10
 800369a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036a8:	f003 021f 	and.w	r2, r3, #31
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036b0:	2102      	movs	r1, #2
 80036b2:	fa01 f202 	lsl.w	r2, r1, r2
 80036b6:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036c4:	2b00      	cmp	r3, #0
 80036c6:	d038      	beq.n	800373a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80036cc:	6878      	ldr	r0, [r7, #4]
 80036ce:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80036d0:	e033      	b.n	800373a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80036d6:	f003 031f 	and.w	r3, r3, #31
 80036da:	2208      	movs	r2, #8
 80036dc:	409a      	lsls	r2, r3
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	4013      	ands	r3, r2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d02a      	beq.n	800373c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 80036e6:	68bb      	ldr	r3, [r7, #8]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d025      	beq.n	800373c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	681a      	ldr	r2, [r3, #0]
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f022 020e 	bic.w	r2, r2, #14
 80036fe:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003704:	f003 021f 	and.w	r2, r3, #31
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800370c:	2101      	movs	r1, #1
 800370e:	fa01 f202 	lsl.w	r2, r1, r2
 8003712:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2201      	movs	r2, #1
 8003718:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2201      	movs	r2, #1
 800371e:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	2200      	movs	r2, #0
 8003726:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800372e:	2b00      	cmp	r3, #0
 8003730:	d004      	beq.n	800373c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800373a:	bf00      	nop
 800373c:	bf00      	nop
}
 800373e:	3710      	adds	r7, #16
 8003740:	46bd      	mov	sp, r7
 8003742:	bd80      	pop	{r7, pc}

08003744 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003744:	b480      	push	{r7}
 8003746:	b085      	sub	sp, #20
 8003748:	af00      	add	r7, sp, #0
 800374a:	60f8      	str	r0, [r7, #12]
 800374c:	60b9      	str	r1, [r7, #8]
 800374e:	607a      	str	r2, [r7, #4]
 8003750:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003756:	68fa      	ldr	r2, [r7, #12]
 8003758:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800375a:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003760:	2b00      	cmp	r3, #0
 8003762:	d004      	beq.n	800376e <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003768:	68fa      	ldr	r2, [r7, #12]
 800376a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800376c:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003772:	f003 021f 	and.w	r2, r3, #31
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800377a:	2101      	movs	r1, #1
 800377c:	fa01 f202 	lsl.w	r2, r1, r2
 8003780:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	683a      	ldr	r2, [r7, #0]
 8003788:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	2b10      	cmp	r3, #16
 8003790:	d108      	bne.n	80037a4 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	687a      	ldr	r2, [r7, #4]
 8003798:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	681b      	ldr	r3, [r3, #0]
 800379e:	68ba      	ldr	r2, [r7, #8]
 80037a0:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80037a2:	e007      	b.n	80037b4 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	68ba      	ldr	r2, [r7, #8]
 80037aa:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	687a      	ldr	r2, [r7, #4]
 80037b2:	60da      	str	r2, [r3, #12]
}
 80037b4:	bf00      	nop
 80037b6:	3714      	adds	r7, #20
 80037b8:	46bd      	mov	sp, r7
 80037ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037be:	4770      	bx	lr

080037c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b087      	sub	sp, #28
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	461a      	mov	r2, r3
 80037ce:	4b16      	ldr	r3, [pc, #88]	@ (8003828 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d802      	bhi.n	80037da <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80037d4:	4b15      	ldr	r3, [pc, #84]	@ (800382c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80037d6:	617b      	str	r3, [r7, #20]
 80037d8:	e001      	b.n	80037de <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G414xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx) || defined (STM32G411xC)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G411xB) || defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80037da:	4b15      	ldr	r3, [pc, #84]	@ (8003830 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80037dc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	3b08      	subs	r3, #8
 80037ea:	4a12      	ldr	r2, [pc, #72]	@ (8003834 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80037ec:	fba2 2303 	umull	r2, r3, r2, r3
 80037f0:	091b      	lsrs	r3, r3, #4
 80037f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037f8:	089b      	lsrs	r3, r3, #2
 80037fa:	009a      	lsls	r2, r3, #2
 80037fc:	693b      	ldr	r3, [r7, #16]
 80037fe:	4413      	add	r3, r2
 8003800:	461a      	mov	r2, r3
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	4a0b      	ldr	r2, [pc, #44]	@ (8003838 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800380a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f003 031f 	and.w	r3, r3, #31
 8003812:	2201      	movs	r2, #1
 8003814:	409a      	lsls	r2, r3
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	651a      	str	r2, [r3, #80]	@ 0x50
}
 800381a:	bf00      	nop
 800381c:	371c      	adds	r7, #28
 800381e:	46bd      	mov	sp, r7
 8003820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003824:	4770      	bx	lr
 8003826:	bf00      	nop
 8003828:	40020407 	.word	0x40020407
 800382c:	40020800 	.word	0x40020800
 8003830:	40020820 	.word	0x40020820
 8003834:	cccccccd 	.word	0xcccccccd
 8003838:	40020880 	.word	0x40020880

0800383c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800383c:	b480      	push	{r7}
 800383e:	b085      	sub	sp, #20
 8003840:	af00      	add	r7, sp, #0
 8003842:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	685b      	ldr	r3, [r3, #4]
 8003848:	b2db      	uxtb	r3, r3
 800384a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800384c:	68fa      	ldr	r2, [r7, #12]
 800384e:	4b0b      	ldr	r3, [pc, #44]	@ (800387c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8003850:	4413      	add	r3, r2
 8003852:	009b      	lsls	r3, r3, #2
 8003854:	461a      	mov	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	4a08      	ldr	r2, [pc, #32]	@ (8003880 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800385e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	3b01      	subs	r3, #1
 8003864:	f003 031f 	and.w	r3, r3, #31
 8003868:	2201      	movs	r2, #1
 800386a:	409a      	lsls	r2, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8003870:	bf00      	nop
 8003872:	3714      	adds	r7, #20
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr
 800387c:	1000823f 	.word	0x1000823f
 8003880:	40020940 	.word	0x40020940

08003884 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003884:	b480      	push	{r7}
 8003886:	b087      	sub	sp, #28
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800388e:	2300      	movs	r3, #0
 8003890:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003892:	e15a      	b.n	8003b4a <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	681a      	ldr	r2, [r3, #0]
 8003898:	2101      	movs	r1, #1
 800389a:	697b      	ldr	r3, [r7, #20]
 800389c:	fa01 f303 	lsl.w	r3, r1, r3
 80038a0:	4013      	ands	r3, r2
 80038a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	f000 814c 	beq.w	8003b44 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	f003 0303 	and.w	r3, r3, #3
 80038b4:	2b01      	cmp	r3, #1
 80038b6:	d005      	beq.n	80038c4 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80038b8:	683b      	ldr	r3, [r7, #0]
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80038c0:	2b02      	cmp	r3, #2
 80038c2:	d130      	bne.n	8003926 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	005b      	lsls	r3, r3, #1
 80038ce:	2203      	movs	r2, #3
 80038d0:	fa02 f303 	lsl.w	r3, r2, r3
 80038d4:	43db      	mvns	r3, r3
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4013      	ands	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80038dc:	683b      	ldr	r3, [r7, #0]
 80038de:	68da      	ldr	r2, [r3, #12]
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	005b      	lsls	r3, r3, #1
 80038e4:	fa02 f303 	lsl.w	r3, r2, r3
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	693a      	ldr	r2, [r7, #16]
 80038f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	685b      	ldr	r3, [r3, #4]
 80038f8:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80038fa:	2201      	movs	r2, #1
 80038fc:	697b      	ldr	r3, [r7, #20]
 80038fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003902:	43db      	mvns	r3, r3
 8003904:	693a      	ldr	r2, [r7, #16]
 8003906:	4013      	ands	r3, r2
 8003908:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	091b      	lsrs	r3, r3, #4
 8003910:	f003 0201 	and.w	r2, r3, #1
 8003914:	697b      	ldr	r3, [r7, #20]
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	693a      	ldr	r2, [r7, #16]
 800391c:	4313      	orrs	r3, r2
 800391e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	693a      	ldr	r2, [r7, #16]
 8003924:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	685b      	ldr	r3, [r3, #4]
 800392a:	f003 0303 	and.w	r3, r3, #3
 800392e:	2b03      	cmp	r3, #3
 8003930:	d017      	beq.n	8003962 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003938:	697b      	ldr	r3, [r7, #20]
 800393a:	005b      	lsls	r3, r3, #1
 800393c:	2203      	movs	r2, #3
 800393e:	fa02 f303 	lsl.w	r3, r2, r3
 8003942:	43db      	mvns	r3, r3
 8003944:	693a      	ldr	r2, [r7, #16]
 8003946:	4013      	ands	r3, r2
 8003948:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	689a      	ldr	r2, [r3, #8]
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	005b      	lsls	r3, r3, #1
 8003952:	fa02 f303 	lsl.w	r3, r2, r3
 8003956:	693a      	ldr	r2, [r7, #16]
 8003958:	4313      	orrs	r3, r2
 800395a:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	693a      	ldr	r2, [r7, #16]
 8003960:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	685b      	ldr	r3, [r3, #4]
 8003966:	f003 0303 	and.w	r3, r3, #3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d123      	bne.n	80039b6 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	08da      	lsrs	r2, r3, #3
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	3208      	adds	r2, #8
 8003976:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800397a:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800397c:	697b      	ldr	r3, [r7, #20]
 800397e:	f003 0307 	and.w	r3, r3, #7
 8003982:	009b      	lsls	r3, r3, #2
 8003984:	220f      	movs	r2, #15
 8003986:	fa02 f303 	lsl.w	r3, r2, r3
 800398a:	43db      	mvns	r3, r3
 800398c:	693a      	ldr	r2, [r7, #16]
 800398e:	4013      	ands	r3, r2
 8003990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	691a      	ldr	r2, [r3, #16]
 8003996:	697b      	ldr	r3, [r7, #20]
 8003998:	f003 0307 	and.w	r3, r3, #7
 800399c:	009b      	lsls	r3, r3, #2
 800399e:	fa02 f303 	lsl.w	r3, r2, r3
 80039a2:	693a      	ldr	r2, [r7, #16]
 80039a4:	4313      	orrs	r3, r2
 80039a6:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80039a8:	697b      	ldr	r3, [r7, #20]
 80039aa:	08da      	lsrs	r2, r3, #3
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	3208      	adds	r2, #8
 80039b0:	6939      	ldr	r1, [r7, #16]
 80039b2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80039bc:	697b      	ldr	r3, [r7, #20]
 80039be:	005b      	lsls	r3, r3, #1
 80039c0:	2203      	movs	r2, #3
 80039c2:	fa02 f303 	lsl.w	r3, r2, r3
 80039c6:	43db      	mvns	r3, r3
 80039c8:	693a      	ldr	r2, [r7, #16]
 80039ca:	4013      	ands	r3, r2
 80039cc:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	f003 0203 	and.w	r2, r3, #3
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	005b      	lsls	r3, r3, #1
 80039da:	fa02 f303 	lsl.w	r3, r2, r3
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	693a      	ldr	r2, [r7, #16]
 80039e8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80039ea:	683b      	ldr	r3, [r7, #0]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	f000 80a6 	beq.w	8003b44 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80039f8:	4b5b      	ldr	r3, [pc, #364]	@ (8003b68 <HAL_GPIO_Init+0x2e4>)
 80039fa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80039fc:	4a5a      	ldr	r2, [pc, #360]	@ (8003b68 <HAL_GPIO_Init+0x2e4>)
 80039fe:	f043 0301 	orr.w	r3, r3, #1
 8003a02:	6613      	str	r3, [r2, #96]	@ 0x60
 8003a04:	4b58      	ldr	r3, [pc, #352]	@ (8003b68 <HAL_GPIO_Init+0x2e4>)
 8003a06:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	60bb      	str	r3, [r7, #8]
 8003a0e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a10:	4a56      	ldr	r2, [pc, #344]	@ (8003b6c <HAL_GPIO_Init+0x2e8>)
 8003a12:	697b      	ldr	r3, [r7, #20]
 8003a14:	089b      	lsrs	r3, r3, #2
 8003a16:	3302      	adds	r3, #2
 8003a18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a1c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f003 0303 	and.w	r3, r3, #3
 8003a24:	009b      	lsls	r3, r3, #2
 8003a26:	220f      	movs	r2, #15
 8003a28:	fa02 f303 	lsl.w	r3, r2, r3
 8003a2c:	43db      	mvns	r3, r3
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4013      	ands	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003a3a:	d01f      	beq.n	8003a7c <HAL_GPIO_Init+0x1f8>
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a4c      	ldr	r2, [pc, #304]	@ (8003b70 <HAL_GPIO_Init+0x2ec>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d019      	beq.n	8003a78 <HAL_GPIO_Init+0x1f4>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	4a4b      	ldr	r2, [pc, #300]	@ (8003b74 <HAL_GPIO_Init+0x2f0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d013      	beq.n	8003a74 <HAL_GPIO_Init+0x1f0>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a4a      	ldr	r2, [pc, #296]	@ (8003b78 <HAL_GPIO_Init+0x2f4>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00d      	beq.n	8003a70 <HAL_GPIO_Init+0x1ec>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a49      	ldr	r2, [pc, #292]	@ (8003b7c <HAL_GPIO_Init+0x2f8>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d007      	beq.n	8003a6c <HAL_GPIO_Init+0x1e8>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a48      	ldr	r2, [pc, #288]	@ (8003b80 <HAL_GPIO_Init+0x2fc>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d101      	bne.n	8003a68 <HAL_GPIO_Init+0x1e4>
 8003a64:	2305      	movs	r3, #5
 8003a66:	e00a      	b.n	8003a7e <HAL_GPIO_Init+0x1fa>
 8003a68:	2306      	movs	r3, #6
 8003a6a:	e008      	b.n	8003a7e <HAL_GPIO_Init+0x1fa>
 8003a6c:	2304      	movs	r3, #4
 8003a6e:	e006      	b.n	8003a7e <HAL_GPIO_Init+0x1fa>
 8003a70:	2303      	movs	r3, #3
 8003a72:	e004      	b.n	8003a7e <HAL_GPIO_Init+0x1fa>
 8003a74:	2302      	movs	r3, #2
 8003a76:	e002      	b.n	8003a7e <HAL_GPIO_Init+0x1fa>
 8003a78:	2301      	movs	r3, #1
 8003a7a:	e000      	b.n	8003a7e <HAL_GPIO_Init+0x1fa>
 8003a7c:	2300      	movs	r3, #0
 8003a7e:	697a      	ldr	r2, [r7, #20]
 8003a80:	f002 0203 	and.w	r2, r2, #3
 8003a84:	0092      	lsls	r2, r2, #2
 8003a86:	4093      	lsls	r3, r2
 8003a88:	693a      	ldr	r2, [r7, #16]
 8003a8a:	4313      	orrs	r3, r2
 8003a8c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003a8e:	4937      	ldr	r1, [pc, #220]	@ (8003b6c <HAL_GPIO_Init+0x2e8>)
 8003a90:	697b      	ldr	r3, [r7, #20]
 8003a92:	089b      	lsrs	r3, r3, #2
 8003a94:	3302      	adds	r3, #2
 8003a96:	693a      	ldr	r2, [r7, #16]
 8003a98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8003a9c:	4b39      	ldr	r3, [pc, #228]	@ (8003b84 <HAL_GPIO_Init+0x300>)
 8003a9e:	689b      	ldr	r3, [r3, #8]
 8003aa0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	43db      	mvns	r3, r3
 8003aa6:	693a      	ldr	r2, [r7, #16]
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003ab4:	2b00      	cmp	r3, #0
 8003ab6:	d003      	beq.n	8003ac0 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8003ab8:	693a      	ldr	r2, [r7, #16]
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	4313      	orrs	r3, r2
 8003abe:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003ac0:	4a30      	ldr	r2, [pc, #192]	@ (8003b84 <HAL_GPIO_Init+0x300>)
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003ac6:	4b2f      	ldr	r3, [pc, #188]	@ (8003b84 <HAL_GPIO_Init+0x300>)
 8003ac8:	68db      	ldr	r3, [r3, #12]
 8003aca:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	43db      	mvns	r3, r3
 8003ad0:	693a      	ldr	r2, [r7, #16]
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	685b      	ldr	r3, [r3, #4]
 8003ada:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8003ae2:	693a      	ldr	r2, [r7, #16]
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	4313      	orrs	r3, r2
 8003ae8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003aea:	4a26      	ldr	r2, [pc, #152]	@ (8003b84 <HAL_GPIO_Init+0x300>)
 8003aec:	693b      	ldr	r3, [r7, #16]
 8003aee:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003af0:	4b24      	ldr	r3, [pc, #144]	@ (8003b84 <HAL_GPIO_Init+0x300>)
 8003af2:	685b      	ldr	r3, [r3, #4]
 8003af4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	43db      	mvns	r3, r3
 8003afa:	693a      	ldr	r2, [r7, #16]
 8003afc:	4013      	ands	r3, r2
 8003afe:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	685b      	ldr	r3, [r3, #4]
 8003b04:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b08:	2b00      	cmp	r3, #0
 8003b0a:	d003      	beq.n	8003b14 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003b0c:	693a      	ldr	r2, [r7, #16]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4313      	orrs	r3, r2
 8003b12:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003b14:	4a1b      	ldr	r2, [pc, #108]	@ (8003b84 <HAL_GPIO_Init+0x300>)
 8003b16:	693b      	ldr	r3, [r7, #16]
 8003b18:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003b1a:	4b1a      	ldr	r3, [pc, #104]	@ (8003b84 <HAL_GPIO_Init+0x300>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	43db      	mvns	r3, r3
 8003b24:	693a      	ldr	r2, [r7, #16]
 8003b26:	4013      	ands	r3, r2
 8003b28:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8003b36:	693a      	ldr	r2, [r7, #16]
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003b3e:	4a11      	ldr	r2, [pc, #68]	@ (8003b84 <HAL_GPIO_Init+0x300>)
 8003b40:	693b      	ldr	r3, [r7, #16]
 8003b42:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003b44:	697b      	ldr	r3, [r7, #20]
 8003b46:	3301      	adds	r3, #1
 8003b48:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	681a      	ldr	r2, [r3, #0]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	fa22 f303 	lsr.w	r3, r2, r3
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	f47f ae9d 	bne.w	8003894 <HAL_GPIO_Init+0x10>
  }
}
 8003b5a:	bf00      	nop
 8003b5c:	bf00      	nop
 8003b5e:	371c      	adds	r7, #28
 8003b60:	46bd      	mov	sp, r7
 8003b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b66:	4770      	bx	lr
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	40010000 	.word	0x40010000
 8003b70:	48000400 	.word	0x48000400
 8003b74:	48000800 	.word	0x48000800
 8003b78:	48000c00 	.word	0x48000c00
 8003b7c:	48001000 	.word	0x48001000
 8003b80:	48001400 	.word	0x48001400
 8003b84:	40010400 	.word	0x40010400

08003b88 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003b88:	b480      	push	{r7}
 8003b8a:	b085      	sub	sp, #20
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
 8003b90:	460b      	mov	r3, r1
 8003b92:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	691a      	ldr	r2, [r3, #16]
 8003b98:	887b      	ldrh	r3, [r7, #2]
 8003b9a:	4013      	ands	r3, r2
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003ba0:	2301      	movs	r3, #1
 8003ba2:	73fb      	strb	r3, [r7, #15]
 8003ba4:	e001      	b.n	8003baa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003baa:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3714      	adds	r7, #20
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb6:	4770      	bx	lr

08003bb8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bb8:	b480      	push	{r7}
 8003bba:	b083      	sub	sp, #12
 8003bbc:	af00      	add	r7, sp, #0
 8003bbe:	6078      	str	r0, [r7, #4]
 8003bc0:	460b      	mov	r3, r1
 8003bc2:	807b      	strh	r3, [r7, #2]
 8003bc4:	4613      	mov	r3, r2
 8003bc6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003bc8:	787b      	ldrb	r3, [r7, #1]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d003      	beq.n	8003bd6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8003bce:	887a      	ldrh	r2, [r7, #2]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8003bd4:	e002      	b.n	8003bdc <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8003bd6:	887a      	ldrh	r2, [r7, #2]
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	629a      	str	r2, [r3, #40]	@ 0x28
}
 8003bdc:	bf00      	nop
 8003bde:	370c      	adds	r7, #12
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b082      	sub	sp, #8
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8003bf2:	4b08      	ldr	r3, [pc, #32]	@ (8003c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003bf4:	695a      	ldr	r2, [r3, #20]
 8003bf6:	88fb      	ldrh	r3, [r7, #6]
 8003bf8:	4013      	ands	r3, r2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d006      	beq.n	8003c0c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003bfe:	4a05      	ldr	r2, [pc, #20]	@ (8003c14 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003c00:	88fb      	ldrh	r3, [r7, #6]
 8003c02:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003c04:	88fb      	ldrh	r3, [r7, #6]
 8003c06:	4618      	mov	r0, r3
 8003c08:	f7fd f87a 	bl	8000d00 <HAL_GPIO_EXTI_Callback>
  }
}
 8003c0c:	bf00      	nop
 8003c0e:	3708      	adds	r7, #8
 8003c10:	46bd      	mov	sp, r7
 8003c12:	bd80      	pop	{r7, pc}
 8003c14:	40010400 	.word	0x40010400

08003c18 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d141      	bne.n	8003caa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003c26:	4b4b      	ldr	r3, [pc, #300]	@ (8003d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003c2e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c32:	d131      	bne.n	8003c98 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c34:	4b47      	ldr	r3, [pc, #284]	@ (8003d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c36:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c3a:	4a46      	ldr	r2, [pc, #280]	@ (8003d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c3c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003c40:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003c44:	4b43      	ldr	r3, [pc, #268]	@ (8003d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c4c:	4a41      	ldr	r2, [pc, #260]	@ (8003d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c4e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003c52:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003c54:	4b40      	ldr	r3, [pc, #256]	@ (8003d58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	2232      	movs	r2, #50	@ 0x32
 8003c5a:	fb02 f303 	mul.w	r3, r2, r3
 8003c5e:	4a3f      	ldr	r2, [pc, #252]	@ (8003d5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003c60:	fba2 2303 	umull	r2, r3, r2, r3
 8003c64:	0c9b      	lsrs	r3, r3, #18
 8003c66:	3301      	adds	r3, #1
 8003c68:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c6a:	e002      	b.n	8003c72 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c72:	4b38      	ldr	r3, [pc, #224]	@ (8003d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c7e:	d102      	bne.n	8003c86 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003c80:	68fb      	ldr	r3, [r7, #12]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d1f2      	bne.n	8003c6c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c86:	4b33      	ldr	r3, [pc, #204]	@ (8003d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c88:	695b      	ldr	r3, [r3, #20]
 8003c8a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c8e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c92:	d158      	bne.n	8003d46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003c94:	2303      	movs	r3, #3
 8003c96:	e057      	b.n	8003d48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c98:	4b2e      	ldr	r3, [pc, #184]	@ (8003d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003c9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c9e:	4a2d      	ldr	r2, [pc, #180]	@ (8003d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003ca0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003ca4:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003ca8:	e04d      	b.n	8003d46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003cb0:	d141      	bne.n	8003d36 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003cb2:	4b28      	ldr	r3, [pc, #160]	@ (8003d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003cba:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cbe:	d131      	bne.n	8003d24 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003cc0:	4b24      	ldr	r3, [pc, #144]	@ (8003d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003cc6:	4a23      	ldr	r2, [pc, #140]	@ (8003d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ccc:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003cd0:	4b20      	ldr	r3, [pc, #128]	@ (8003d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003cd8:	4a1e      	ldr	r2, [pc, #120]	@ (8003d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003cda:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003cde:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003ce0:	4b1d      	ldr	r3, [pc, #116]	@ (8003d58 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2232      	movs	r2, #50	@ 0x32
 8003ce6:	fb02 f303 	mul.w	r3, r2, r3
 8003cea:	4a1c      	ldr	r2, [pc, #112]	@ (8003d5c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003cec:	fba2 2303 	umull	r2, r3, r2, r3
 8003cf0:	0c9b      	lsrs	r3, r3, #18
 8003cf2:	3301      	adds	r3, #1
 8003cf4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cf6:	e002      	b.n	8003cfe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003cfe:	4b15      	ldr	r3, [pc, #84]	@ (8003d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d00:	695b      	ldr	r3, [r3, #20]
 8003d02:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d0a:	d102      	bne.n	8003d12 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d1f2      	bne.n	8003cf8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003d12:	4b10      	ldr	r3, [pc, #64]	@ (8003d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d14:	695b      	ldr	r3, [r3, #20]
 8003d16:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d1a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d1e:	d112      	bne.n	8003d46 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003d20:	2303      	movs	r3, #3
 8003d22:	e011      	b.n	8003d48 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003d24:	4b0b      	ldr	r3, [pc, #44]	@ (8003d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d26:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8003d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d2c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003d30:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003d34:	e007      	b.n	8003d46 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003d36:	4b07      	ldr	r3, [pc, #28]	@ (8003d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003d3e:	4a05      	ldr	r2, [pc, #20]	@ (8003d54 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003d40:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003d44:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003d46:	2300      	movs	r3, #0
}
 8003d48:	4618      	mov	r0, r3
 8003d4a:	3714      	adds	r7, #20
 8003d4c:	46bd      	mov	sp, r7
 8003d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d52:	4770      	bx	lr
 8003d54:	40007000 	.word	0x40007000
 8003d58:	20000018 	.word	0x20000018
 8003d5c:	431bde83 	.word	0x431bde83

08003d60 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003d60:	b480      	push	{r7}
 8003d62:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003d64:	4b05      	ldr	r3, [pc, #20]	@ (8003d7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	4a04      	ldr	r2, [pc, #16]	@ (8003d7c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003d6a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003d6e:	6093      	str	r3, [r2, #8]
}
 8003d70:	bf00      	nop
 8003d72:	46bd      	mov	sp, r7
 8003d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d78:	4770      	bx	lr
 8003d7a:	bf00      	nop
 8003d7c:	40007000 	.word	0x40007000

08003d80 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d80:	b580      	push	{r7, lr}
 8003d82:	b088      	sub	sp, #32
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2b00      	cmp	r3, #0
 8003d8c:	d101      	bne.n	8003d92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d8e:	2301      	movs	r3, #1
 8003d90:	e2fe      	b.n	8004390 <HAL_RCC_OscConfig+0x610>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	681b      	ldr	r3, [r3, #0]
 8003d96:	f003 0301 	and.w	r3, r3, #1
 8003d9a:	2b00      	cmp	r3, #0
 8003d9c:	d075      	beq.n	8003e8a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d9e:	4b97      	ldr	r3, [pc, #604]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003da0:	689b      	ldr	r3, [r3, #8]
 8003da2:	f003 030c 	and.w	r3, r3, #12
 8003da6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003da8:	4b94      	ldr	r3, [pc, #592]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003daa:	68db      	ldr	r3, [r3, #12]
 8003dac:	f003 0303 	and.w	r3, r3, #3
 8003db0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003db2:	69bb      	ldr	r3, [r7, #24]
 8003db4:	2b0c      	cmp	r3, #12
 8003db6:	d102      	bne.n	8003dbe <HAL_RCC_OscConfig+0x3e>
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2b03      	cmp	r3, #3
 8003dbc:	d002      	beq.n	8003dc4 <HAL_RCC_OscConfig+0x44>
 8003dbe:	69bb      	ldr	r3, [r7, #24]
 8003dc0:	2b08      	cmp	r3, #8
 8003dc2:	d10b      	bne.n	8003ddc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dc4:	4b8d      	ldr	r3, [pc, #564]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d05b      	beq.n	8003e88 <HAL_RCC_OscConfig+0x108>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	685b      	ldr	r3, [r3, #4]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d157      	bne.n	8003e88 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e2d9      	b.n	8004390 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003de4:	d106      	bne.n	8003df4 <HAL_RCC_OscConfig+0x74>
 8003de6:	4b85      	ldr	r3, [pc, #532]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	4a84      	ldr	r2, [pc, #528]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003dec:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003df0:	6013      	str	r3, [r2, #0]
 8003df2:	e01d      	b.n	8003e30 <HAL_RCC_OscConfig+0xb0>
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	685b      	ldr	r3, [r3, #4]
 8003df8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003dfc:	d10c      	bne.n	8003e18 <HAL_RCC_OscConfig+0x98>
 8003dfe:	4b7f      	ldr	r3, [pc, #508]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	4a7e      	ldr	r2, [pc, #504]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003e04:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003e08:	6013      	str	r3, [r2, #0]
 8003e0a:	4b7c      	ldr	r3, [pc, #496]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	4a7b      	ldr	r2, [pc, #492]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003e10:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003e14:	6013      	str	r3, [r2, #0]
 8003e16:	e00b      	b.n	8003e30 <HAL_RCC_OscConfig+0xb0>
 8003e18:	4b78      	ldr	r3, [pc, #480]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	4a77      	ldr	r2, [pc, #476]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003e1e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003e22:	6013      	str	r3, [r2, #0]
 8003e24:	4b75      	ldr	r3, [pc, #468]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	4a74      	ldr	r2, [pc, #464]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003e2a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003e2e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	685b      	ldr	r3, [r3, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d013      	beq.n	8003e60 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e38:	f7fd fdb8 	bl	80019ac <HAL_GetTick>
 8003e3c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e3e:	e008      	b.n	8003e52 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e40:	f7fd fdb4 	bl	80019ac <HAL_GetTick>
 8003e44:	4602      	mov	r2, r0
 8003e46:	693b      	ldr	r3, [r7, #16]
 8003e48:	1ad3      	subs	r3, r2, r3
 8003e4a:	2b64      	cmp	r3, #100	@ 0x64
 8003e4c:	d901      	bls.n	8003e52 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	e29e      	b.n	8004390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003e52:	4b6a      	ldr	r3, [pc, #424]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e5a:	2b00      	cmp	r3, #0
 8003e5c:	d0f0      	beq.n	8003e40 <HAL_RCC_OscConfig+0xc0>
 8003e5e:	e014      	b.n	8003e8a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e60:	f7fd fda4 	bl	80019ac <HAL_GetTick>
 8003e64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e66:	e008      	b.n	8003e7a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003e68:	f7fd fda0 	bl	80019ac <HAL_GetTick>
 8003e6c:	4602      	mov	r2, r0
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	1ad3      	subs	r3, r2, r3
 8003e72:	2b64      	cmp	r3, #100	@ 0x64
 8003e74:	d901      	bls.n	8003e7a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e76:	2303      	movs	r3, #3
 8003e78:	e28a      	b.n	8004390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e7a:	4b60      	ldr	r3, [pc, #384]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d1f0      	bne.n	8003e68 <HAL_RCC_OscConfig+0xe8>
 8003e86:	e000      	b.n	8003e8a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e88:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f003 0302 	and.w	r3, r3, #2
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d075      	beq.n	8003f82 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e96:	4b59      	ldr	r3, [pc, #356]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003e98:	689b      	ldr	r3, [r3, #8]
 8003e9a:	f003 030c 	and.w	r3, r3, #12
 8003e9e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003ea0:	4b56      	ldr	r3, [pc, #344]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	f003 0303 	and.w	r3, r3, #3
 8003ea8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003eaa:	69bb      	ldr	r3, [r7, #24]
 8003eac:	2b0c      	cmp	r3, #12
 8003eae:	d102      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x136>
 8003eb0:	697b      	ldr	r3, [r7, #20]
 8003eb2:	2b02      	cmp	r3, #2
 8003eb4:	d002      	beq.n	8003ebc <HAL_RCC_OscConfig+0x13c>
 8003eb6:	69bb      	ldr	r3, [r7, #24]
 8003eb8:	2b04      	cmp	r3, #4
 8003eba:	d11f      	bne.n	8003efc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ebc:	4b4f      	ldr	r3, [pc, #316]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d005      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x154>
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	68db      	ldr	r3, [r3, #12]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d101      	bne.n	8003ed4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8003ed0:	2301      	movs	r3, #1
 8003ed2:	e25d      	b.n	8004390 <HAL_RCC_OscConfig+0x610>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ed4:	4b49      	ldr	r3, [pc, #292]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003ed6:	685b      	ldr	r3, [r3, #4]
 8003ed8:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	061b      	lsls	r3, r3, #24
 8003ee2:	4946      	ldr	r1, [pc, #280]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003ee4:	4313      	orrs	r3, r2
 8003ee6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ee8:	4b45      	ldr	r3, [pc, #276]	@ (8004000 <HAL_RCC_OscConfig+0x280>)
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4618      	mov	r0, r3
 8003eee:	f7fd f805 	bl	8000efc <HAL_InitTick>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d043      	beq.n	8003f80 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e249      	b.n	8004390 <HAL_RCC_OscConfig+0x610>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	68db      	ldr	r3, [r3, #12]
 8003f00:	2b00      	cmp	r3, #0
 8003f02:	d023      	beq.n	8003f4c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003f04:	4b3d      	ldr	r3, [pc, #244]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	4a3c      	ldr	r2, [pc, #240]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003f0a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003f0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f10:	f7fd fd4c 	bl	80019ac <HAL_GetTick>
 8003f14:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f16:	e008      	b.n	8003f2a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f18:	f7fd fd48 	bl	80019ac <HAL_GetTick>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	693b      	ldr	r3, [r7, #16]
 8003f20:	1ad3      	subs	r3, r2, r3
 8003f22:	2b02      	cmp	r3, #2
 8003f24:	d901      	bls.n	8003f2a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003f26:	2303      	movs	r3, #3
 8003f28:	e232      	b.n	8004390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003f2a:	4b34      	ldr	r3, [pc, #208]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d0f0      	beq.n	8003f18 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003f36:	4b31      	ldr	r3, [pc, #196]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003f38:	685b      	ldr	r3, [r3, #4]
 8003f3a:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	691b      	ldr	r3, [r3, #16]
 8003f42:	061b      	lsls	r3, r3, #24
 8003f44:	492d      	ldr	r1, [pc, #180]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	604b      	str	r3, [r1, #4]
 8003f4a:	e01a      	b.n	8003f82 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f4c:	4b2b      	ldr	r3, [pc, #172]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	4a2a      	ldr	r2, [pc, #168]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003f52:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f58:	f7fd fd28 	bl	80019ac <HAL_GetTick>
 8003f5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f5e:	e008      	b.n	8003f72 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f60:	f7fd fd24 	bl	80019ac <HAL_GetTick>
 8003f64:	4602      	mov	r2, r0
 8003f66:	693b      	ldr	r3, [r7, #16]
 8003f68:	1ad3      	subs	r3, r2, r3
 8003f6a:	2b02      	cmp	r3, #2
 8003f6c:	d901      	bls.n	8003f72 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8003f6e:	2303      	movs	r3, #3
 8003f70:	e20e      	b.n	8004390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f72:	4b22      	ldr	r3, [pc, #136]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d1f0      	bne.n	8003f60 <HAL_RCC_OscConfig+0x1e0>
 8003f7e:	e000      	b.n	8003f82 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f80:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 0308 	and.w	r3, r3, #8
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d041      	beq.n	8004012 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	695b      	ldr	r3, [r3, #20]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d01c      	beq.n	8003fd0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f96:	4b19      	ldr	r3, [pc, #100]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003f98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f9c:	4a17      	ldr	r2, [pc, #92]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003f9e:	f043 0301 	orr.w	r3, r3, #1
 8003fa2:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fa6:	f7fd fd01 	bl	80019ac <HAL_GetTick>
 8003faa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fac:	e008      	b.n	8003fc0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fae:	f7fd fcfd 	bl	80019ac <HAL_GetTick>
 8003fb2:	4602      	mov	r2, r0
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	1ad3      	subs	r3, r2, r3
 8003fb8:	2b02      	cmp	r3, #2
 8003fba:	d901      	bls.n	8003fc0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e1e7      	b.n	8004390 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fc0:	4b0e      	ldr	r3, [pc, #56]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003fc2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fc6:	f003 0302 	and.w	r3, r3, #2
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d0ef      	beq.n	8003fae <HAL_RCC_OscConfig+0x22e>
 8003fce:	e020      	b.n	8004012 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fd0:	4b0a      	ldr	r3, [pc, #40]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003fd2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fd6:	4a09      	ldr	r2, [pc, #36]	@ (8003ffc <HAL_RCC_OscConfig+0x27c>)
 8003fd8:	f023 0301 	bic.w	r3, r3, #1
 8003fdc:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fe0:	f7fd fce4 	bl	80019ac <HAL_GetTick>
 8003fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fe6:	e00d      	b.n	8004004 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fe8:	f7fd fce0 	bl	80019ac <HAL_GetTick>
 8003fec:	4602      	mov	r2, r0
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	1ad3      	subs	r3, r2, r3
 8003ff2:	2b02      	cmp	r3, #2
 8003ff4:	d906      	bls.n	8004004 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8003ff6:	2303      	movs	r3, #3
 8003ff8:	e1ca      	b.n	8004390 <HAL_RCC_OscConfig+0x610>
 8003ffa:	bf00      	nop
 8003ffc:	40021000 	.word	0x40021000
 8004000:	20000024 	.word	0x20000024
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004004:	4b8c      	ldr	r3, [pc, #560]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 8004006:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800400a:	f003 0302 	and.w	r3, r3, #2
 800400e:	2b00      	cmp	r3, #0
 8004010:	d1ea      	bne.n	8003fe8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f003 0304 	and.w	r3, r3, #4
 800401a:	2b00      	cmp	r3, #0
 800401c:	f000 80a6 	beq.w	800416c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004020:	2300      	movs	r3, #0
 8004022:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004024:	4b84      	ldr	r3, [pc, #528]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 8004026:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004028:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800402c:	2b00      	cmp	r3, #0
 800402e:	d101      	bne.n	8004034 <HAL_RCC_OscConfig+0x2b4>
 8004030:	2301      	movs	r3, #1
 8004032:	e000      	b.n	8004036 <HAL_RCC_OscConfig+0x2b6>
 8004034:	2300      	movs	r3, #0
 8004036:	2b00      	cmp	r3, #0
 8004038:	d00d      	beq.n	8004056 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800403a:	4b7f      	ldr	r3, [pc, #508]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 800403c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800403e:	4a7e      	ldr	r2, [pc, #504]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 8004040:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004044:	6593      	str	r3, [r2, #88]	@ 0x58
 8004046:	4b7c      	ldr	r3, [pc, #496]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 8004048:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800404a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800404e:	60fb      	str	r3, [r7, #12]
 8004050:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004052:	2301      	movs	r3, #1
 8004054:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004056:	4b79      	ldr	r3, [pc, #484]	@ (800423c <HAL_RCC_OscConfig+0x4bc>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800405e:	2b00      	cmp	r3, #0
 8004060:	d118      	bne.n	8004094 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004062:	4b76      	ldr	r3, [pc, #472]	@ (800423c <HAL_RCC_OscConfig+0x4bc>)
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	4a75      	ldr	r2, [pc, #468]	@ (800423c <HAL_RCC_OscConfig+0x4bc>)
 8004068:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800406c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800406e:	f7fd fc9d 	bl	80019ac <HAL_GetTick>
 8004072:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004074:	e008      	b.n	8004088 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004076:	f7fd fc99 	bl	80019ac <HAL_GetTick>
 800407a:	4602      	mov	r2, r0
 800407c:	693b      	ldr	r3, [r7, #16]
 800407e:	1ad3      	subs	r3, r2, r3
 8004080:	2b02      	cmp	r3, #2
 8004082:	d901      	bls.n	8004088 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004084:	2303      	movs	r3, #3
 8004086:	e183      	b.n	8004390 <HAL_RCC_OscConfig+0x610>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004088:	4b6c      	ldr	r3, [pc, #432]	@ (800423c <HAL_RCC_OscConfig+0x4bc>)
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004090:	2b00      	cmp	r3, #0
 8004092:	d0f0      	beq.n	8004076 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	689b      	ldr	r3, [r3, #8]
 8004098:	2b01      	cmp	r3, #1
 800409a:	d108      	bne.n	80040ae <HAL_RCC_OscConfig+0x32e>
 800409c:	4b66      	ldr	r3, [pc, #408]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 800409e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040a2:	4a65      	ldr	r2, [pc, #404]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 80040a4:	f043 0301 	orr.w	r3, r3, #1
 80040a8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040ac:	e024      	b.n	80040f8 <HAL_RCC_OscConfig+0x378>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	689b      	ldr	r3, [r3, #8]
 80040b2:	2b05      	cmp	r3, #5
 80040b4:	d110      	bne.n	80040d8 <HAL_RCC_OscConfig+0x358>
 80040b6:	4b60      	ldr	r3, [pc, #384]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 80040b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040bc:	4a5e      	ldr	r2, [pc, #376]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 80040be:	f043 0304 	orr.w	r3, r3, #4
 80040c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040c6:	4b5c      	ldr	r3, [pc, #368]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 80040c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040cc:	4a5a      	ldr	r2, [pc, #360]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 80040ce:	f043 0301 	orr.w	r3, r3, #1
 80040d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040d6:	e00f      	b.n	80040f8 <HAL_RCC_OscConfig+0x378>
 80040d8:	4b57      	ldr	r3, [pc, #348]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 80040da:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040de:	4a56      	ldr	r2, [pc, #344]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 80040e0:	f023 0301 	bic.w	r3, r3, #1
 80040e4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040e8:	4b53      	ldr	r3, [pc, #332]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 80040ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040ee:	4a52      	ldr	r2, [pc, #328]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 80040f0:	f023 0304 	bic.w	r3, r3, #4
 80040f4:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	2b00      	cmp	r3, #0
 80040fe:	d016      	beq.n	800412e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004100:	f7fd fc54 	bl	80019ac <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004106:	e00a      	b.n	800411e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004108:	f7fd fc50 	bl	80019ac <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004116:	4293      	cmp	r3, r2
 8004118:	d901      	bls.n	800411e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e138      	b.n	8004390 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800411e:	4b46      	ldr	r3, [pc, #280]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 8004120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004124:	f003 0302 	and.w	r3, r3, #2
 8004128:	2b00      	cmp	r3, #0
 800412a:	d0ed      	beq.n	8004108 <HAL_RCC_OscConfig+0x388>
 800412c:	e015      	b.n	800415a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412e:	f7fd fc3d 	bl	80019ac <HAL_GetTick>
 8004132:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004134:	e00a      	b.n	800414c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004136:	f7fd fc39 	bl	80019ac <HAL_GetTick>
 800413a:	4602      	mov	r2, r0
 800413c:	693b      	ldr	r3, [r7, #16]
 800413e:	1ad3      	subs	r3, r2, r3
 8004140:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004144:	4293      	cmp	r3, r2
 8004146:	d901      	bls.n	800414c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8004148:	2303      	movs	r3, #3
 800414a:	e121      	b.n	8004390 <HAL_RCC_OscConfig+0x610>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800414c:	4b3a      	ldr	r3, [pc, #232]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d1ed      	bne.n	8004136 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800415a:	7ffb      	ldrb	r3, [r7, #31]
 800415c:	2b01      	cmp	r3, #1
 800415e:	d105      	bne.n	800416c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004160:	4b35      	ldr	r3, [pc, #212]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 8004162:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004164:	4a34      	ldr	r2, [pc, #208]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 8004166:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800416a:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	f003 0320 	and.w	r3, r3, #32
 8004174:	2b00      	cmp	r3, #0
 8004176:	d03c      	beq.n	80041f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d01c      	beq.n	80041ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004180:	4b2d      	ldr	r3, [pc, #180]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 8004182:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8004186:	4a2c      	ldr	r2, [pc, #176]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 8004188:	f043 0301 	orr.w	r3, r3, #1
 800418c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004190:	f7fd fc0c 	bl	80019ac <HAL_GetTick>
 8004194:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8004196:	e008      	b.n	80041aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8004198:	f7fd fc08 	bl	80019ac <HAL_GetTick>
 800419c:	4602      	mov	r2, r0
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	1ad3      	subs	r3, r2, r3
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d901      	bls.n	80041aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80041a6:	2303      	movs	r3, #3
 80041a8:	e0f2      	b.n	8004390 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041aa:	4b23      	ldr	r3, [pc, #140]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 80041ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041b0:	f003 0302 	and.w	r3, r3, #2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	d0ef      	beq.n	8004198 <HAL_RCC_OscConfig+0x418>
 80041b8:	e01b      	b.n	80041f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041ba:	4b1f      	ldr	r3, [pc, #124]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 80041bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041c0:	4a1d      	ldr	r2, [pc, #116]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 80041c2:	f023 0301 	bic.w	r3, r3, #1
 80041c6:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041ca:	f7fd fbef 	bl	80019ac <HAL_GetTick>
 80041ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041d0:	e008      	b.n	80041e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041d2:	f7fd fbeb 	bl	80019ac <HAL_GetTick>
 80041d6:	4602      	mov	r2, r0
 80041d8:	693b      	ldr	r3, [r7, #16]
 80041da:	1ad3      	subs	r3, r2, r3
 80041dc:	2b02      	cmp	r3, #2
 80041de:	d901      	bls.n	80041e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80041e0:	2303      	movs	r3, #3
 80041e2:	e0d5      	b.n	8004390 <HAL_RCC_OscConfig+0x610>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041e4:	4b14      	ldr	r3, [pc, #80]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 80041e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1ef      	bne.n	80041d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	69db      	ldr	r3, [r3, #28]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	f000 80c9 	beq.w	800438e <HAL_RCC_OscConfig+0x60e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80041fc:	4b0e      	ldr	r3, [pc, #56]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 80041fe:	689b      	ldr	r3, [r3, #8]
 8004200:	f003 030c 	and.w	r3, r3, #12
 8004204:	2b0c      	cmp	r3, #12
 8004206:	f000 8083 	beq.w	8004310 <HAL_RCC_OscConfig+0x590>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	69db      	ldr	r3, [r3, #28]
 800420e:	2b02      	cmp	r3, #2
 8004210:	d15e      	bne.n	80042d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004212:	4b09      	ldr	r3, [pc, #36]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	4a08      	ldr	r2, [pc, #32]	@ (8004238 <HAL_RCC_OscConfig+0x4b8>)
 8004218:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800421c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800421e:	f7fd fbc5 	bl	80019ac <HAL_GetTick>
 8004222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004224:	e00c      	b.n	8004240 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004226:	f7fd fbc1 	bl	80019ac <HAL_GetTick>
 800422a:	4602      	mov	r2, r0
 800422c:	693b      	ldr	r3, [r7, #16]
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	2b02      	cmp	r3, #2
 8004232:	d905      	bls.n	8004240 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8004234:	2303      	movs	r3, #3
 8004236:	e0ab      	b.n	8004390 <HAL_RCC_OscConfig+0x610>
 8004238:	40021000 	.word	0x40021000
 800423c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004240:	4b55      	ldr	r3, [pc, #340]	@ (8004398 <HAL_RCC_OscConfig+0x618>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004248:	2b00      	cmp	r3, #0
 800424a:	d1ec      	bne.n	8004226 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800424c:	4b52      	ldr	r3, [pc, #328]	@ (8004398 <HAL_RCC_OscConfig+0x618>)
 800424e:	68da      	ldr	r2, [r3, #12]
 8004250:	4b52      	ldr	r3, [pc, #328]	@ (800439c <HAL_RCC_OscConfig+0x61c>)
 8004252:	4013      	ands	r3, r2
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6a11      	ldr	r1, [r2, #32]
 8004258:	687a      	ldr	r2, [r7, #4]
 800425a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800425c:	3a01      	subs	r2, #1
 800425e:	0112      	lsls	r2, r2, #4
 8004260:	4311      	orrs	r1, r2
 8004262:	687a      	ldr	r2, [r7, #4]
 8004264:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004266:	0212      	lsls	r2, r2, #8
 8004268:	4311      	orrs	r1, r2
 800426a:	687a      	ldr	r2, [r7, #4]
 800426c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800426e:	0852      	lsrs	r2, r2, #1
 8004270:	3a01      	subs	r2, #1
 8004272:	0552      	lsls	r2, r2, #21
 8004274:	4311      	orrs	r1, r2
 8004276:	687a      	ldr	r2, [r7, #4]
 8004278:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800427a:	0852      	lsrs	r2, r2, #1
 800427c:	3a01      	subs	r2, #1
 800427e:	0652      	lsls	r2, r2, #25
 8004280:	4311      	orrs	r1, r2
 8004282:	687a      	ldr	r2, [r7, #4]
 8004284:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004286:	06d2      	lsls	r2, r2, #27
 8004288:	430a      	orrs	r2, r1
 800428a:	4943      	ldr	r1, [pc, #268]	@ (8004398 <HAL_RCC_OscConfig+0x618>)
 800428c:	4313      	orrs	r3, r2
 800428e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004290:	4b41      	ldr	r3, [pc, #260]	@ (8004398 <HAL_RCC_OscConfig+0x618>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	4a40      	ldr	r2, [pc, #256]	@ (8004398 <HAL_RCC_OscConfig+0x618>)
 8004296:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800429a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800429c:	4b3e      	ldr	r3, [pc, #248]	@ (8004398 <HAL_RCC_OscConfig+0x618>)
 800429e:	68db      	ldr	r3, [r3, #12]
 80042a0:	4a3d      	ldr	r2, [pc, #244]	@ (8004398 <HAL_RCC_OscConfig+0x618>)
 80042a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80042a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042a8:	f7fd fb80 	bl	80019ac <HAL_GetTick>
 80042ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042ae:	e008      	b.n	80042c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042b0:	f7fd fb7c 	bl	80019ac <HAL_GetTick>
 80042b4:	4602      	mov	r2, r0
 80042b6:	693b      	ldr	r3, [r7, #16]
 80042b8:	1ad3      	subs	r3, r2, r3
 80042ba:	2b02      	cmp	r3, #2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e066      	b.n	8004390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80042c2:	4b35      	ldr	r3, [pc, #212]	@ (8004398 <HAL_RCC_OscConfig+0x618>)
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d0f0      	beq.n	80042b0 <HAL_RCC_OscConfig+0x530>
 80042ce:	e05e      	b.n	800438e <HAL_RCC_OscConfig+0x60e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042d0:	4b31      	ldr	r3, [pc, #196]	@ (8004398 <HAL_RCC_OscConfig+0x618>)
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	4a30      	ldr	r2, [pc, #192]	@ (8004398 <HAL_RCC_OscConfig+0x618>)
 80042d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80042da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80042dc:	f7fd fb66 	bl	80019ac <HAL_GetTick>
 80042e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042e2:	e008      	b.n	80042f6 <HAL_RCC_OscConfig+0x576>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042e4:	f7fd fb62 	bl	80019ac <HAL_GetTick>
 80042e8:	4602      	mov	r2, r0
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	1ad3      	subs	r3, r2, r3
 80042ee:	2b02      	cmp	r3, #2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x576>
          {
            return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e04c      	b.n	8004390 <HAL_RCC_OscConfig+0x610>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80042f6:	4b28      	ldr	r3, [pc, #160]	@ (8004398 <HAL_RCC_OscConfig+0x618>)
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1f0      	bne.n	80042e4 <HAL_RCC_OscConfig+0x564>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004302:	4b25      	ldr	r3, [pc, #148]	@ (8004398 <HAL_RCC_OscConfig+0x618>)
 8004304:	68da      	ldr	r2, [r3, #12]
 8004306:	4924      	ldr	r1, [pc, #144]	@ (8004398 <HAL_RCC_OscConfig+0x618>)
 8004308:	4b25      	ldr	r3, [pc, #148]	@ (80043a0 <HAL_RCC_OscConfig+0x620>)
 800430a:	4013      	ands	r3, r2
 800430c:	60cb      	str	r3, [r1, #12]
 800430e:	e03e      	b.n	800438e <HAL_RCC_OscConfig+0x60e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	69db      	ldr	r3, [r3, #28]
 8004314:	2b01      	cmp	r3, #1
 8004316:	d101      	bne.n	800431c <HAL_RCC_OscConfig+0x59c>
      {
        return HAL_ERROR;
 8004318:	2301      	movs	r3, #1
 800431a:	e039      	b.n	8004390 <HAL_RCC_OscConfig+0x610>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800431c:	4b1e      	ldr	r3, [pc, #120]	@ (8004398 <HAL_RCC_OscConfig+0x618>)
 800431e:	68db      	ldr	r3, [r3, #12]
 8004320:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f003 0203 	and.w	r2, r3, #3
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	6a1b      	ldr	r3, [r3, #32]
 800432c:	429a      	cmp	r2, r3
 800432e:	d12c      	bne.n	800438a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004330:	697b      	ldr	r3, [r7, #20]
 8004332:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800433a:	3b01      	subs	r3, #1
 800433c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800433e:	429a      	cmp	r2, r3
 8004340:	d123      	bne.n	800438a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004342:	697b      	ldr	r3, [r7, #20]
 8004344:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800434c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800434e:	429a      	cmp	r2, r3
 8004350:	d11b      	bne.n	800438a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004352:	697b      	ldr	r3, [r7, #20]
 8004354:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800435c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800435e:	429a      	cmp	r2, r3
 8004360:	d113      	bne.n	800438a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800436c:	085b      	lsrs	r3, r3, #1
 800436e:	3b01      	subs	r3, #1
 8004370:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004372:	429a      	cmp	r2, r3
 8004374:	d109      	bne.n	800438a <HAL_RCC_OscConfig+0x60a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004376:	697b      	ldr	r3, [r7, #20]
 8004378:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004380:	085b      	lsrs	r3, r3, #1
 8004382:	3b01      	subs	r3, #1
 8004384:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004386:	429a      	cmp	r2, r3
 8004388:	d001      	beq.n	800438e <HAL_RCC_OscConfig+0x60e>
      {
        return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <HAL_RCC_OscConfig+0x610>
      }
    }
  }
  }

  return HAL_OK;
 800438e:	2300      	movs	r3, #0
}
 8004390:	4618      	mov	r0, r3
 8004392:	3720      	adds	r7, #32
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}
 8004398:	40021000 	.word	0x40021000
 800439c:	019f800c 	.word	0x019f800c
 80043a0:	feeefffc 	.word	0xfeeefffc

080043a4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80043a4:	b580      	push	{r7, lr}
 80043a6:	b086      	sub	sp, #24
 80043a8:	af00      	add	r7, sp, #0
 80043aa:	6078      	str	r0, [r7, #4]
 80043ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80043ae:	2300      	movs	r3, #0
 80043b0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d101      	bne.n	80043bc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	e11e      	b.n	80045fa <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80043bc:	4b91      	ldr	r3, [pc, #580]	@ (8004604 <HAL_RCC_ClockConfig+0x260>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	f003 030f 	and.w	r3, r3, #15
 80043c4:	683a      	ldr	r2, [r7, #0]
 80043c6:	429a      	cmp	r2, r3
 80043c8:	d910      	bls.n	80043ec <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80043ca:	4b8e      	ldr	r3, [pc, #568]	@ (8004604 <HAL_RCC_ClockConfig+0x260>)
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f023 020f 	bic.w	r2, r3, #15
 80043d2:	498c      	ldr	r1, [pc, #560]	@ (8004604 <HAL_RCC_ClockConfig+0x260>)
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	4313      	orrs	r3, r2
 80043d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80043da:	4b8a      	ldr	r3, [pc, #552]	@ (8004604 <HAL_RCC_ClockConfig+0x260>)
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	f003 030f 	and.w	r3, r3, #15
 80043e2:	683a      	ldr	r2, [r7, #0]
 80043e4:	429a      	cmp	r2, r3
 80043e6:	d001      	beq.n	80043ec <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80043e8:	2301      	movs	r3, #1
 80043ea:	e106      	b.n	80045fa <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	f003 0301 	and.w	r3, r3, #1
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d073      	beq.n	80044e0 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	2b03      	cmp	r3, #3
 80043fe:	d129      	bne.n	8004454 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8004400:	4b81      	ldr	r3, [pc, #516]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004408:	2b00      	cmp	r3, #0
 800440a:	d101      	bne.n	8004410 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800440c:	2301      	movs	r3, #1
 800440e:	e0f4      	b.n	80045fa <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8004410:	f000 f9d0 	bl	80047b4 <RCC_GetSysClockFreqFromPLLSource>
 8004414:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8004416:	693b      	ldr	r3, [r7, #16]
 8004418:	4a7c      	ldr	r2, [pc, #496]	@ (800460c <HAL_RCC_ClockConfig+0x268>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d93f      	bls.n	800449e <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800441e:	4b7a      	ldr	r3, [pc, #488]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 8004420:	689b      	ldr	r3, [r3, #8]
 8004422:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d009      	beq.n	800443e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8004432:	2b00      	cmp	r3, #0
 8004434:	d033      	beq.n	800449e <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800443a:	2b00      	cmp	r3, #0
 800443c:	d12f      	bne.n	800449e <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800443e:	4b72      	ldr	r3, [pc, #456]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 8004440:	689b      	ldr	r3, [r3, #8]
 8004442:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004446:	4a70      	ldr	r2, [pc, #448]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 8004448:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800444c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800444e:	2380      	movs	r3, #128	@ 0x80
 8004450:	617b      	str	r3, [r7, #20]
 8004452:	e024      	b.n	800449e <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	685b      	ldr	r3, [r3, #4]
 8004458:	2b02      	cmp	r3, #2
 800445a:	d107      	bne.n	800446c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800445c:	4b6a      	ldr	r3, [pc, #424]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004464:	2b00      	cmp	r3, #0
 8004466:	d109      	bne.n	800447c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004468:	2301      	movs	r3, #1
 800446a:	e0c6      	b.n	80045fa <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800446c:	4b66      	ldr	r3, [pc, #408]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004474:	2b00      	cmp	r3, #0
 8004476:	d101      	bne.n	800447c <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8004478:	2301      	movs	r3, #1
 800447a:	e0be      	b.n	80045fa <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 800447c:	f000 f8ce 	bl	800461c <HAL_RCC_GetSysClockFreq>
 8004480:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004482:	693b      	ldr	r3, [r7, #16]
 8004484:	4a61      	ldr	r2, [pc, #388]	@ (800460c <HAL_RCC_ClockConfig+0x268>)
 8004486:	4293      	cmp	r3, r2
 8004488:	d909      	bls.n	800449e <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800448a:	4b5f      	ldr	r3, [pc, #380]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 800448c:	689b      	ldr	r3, [r3, #8]
 800448e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004492:	4a5d      	ldr	r2, [pc, #372]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 8004494:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004498:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800449a:	2380      	movs	r3, #128	@ 0x80
 800449c:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800449e:	4b5a      	ldr	r3, [pc, #360]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 80044a0:	689b      	ldr	r3, [r3, #8]
 80044a2:	f023 0203 	bic.w	r2, r3, #3
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	685b      	ldr	r3, [r3, #4]
 80044aa:	4957      	ldr	r1, [pc, #348]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 80044ac:	4313      	orrs	r3, r2
 80044ae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80044b0:	f7fd fa7c 	bl	80019ac <HAL_GetTick>
 80044b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044b6:	e00a      	b.n	80044ce <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80044b8:	f7fd fa78 	bl	80019ac <HAL_GetTick>
 80044bc:	4602      	mov	r2, r0
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	1ad3      	subs	r3, r2, r3
 80044c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d901      	bls.n	80044ce <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80044ca:	2303      	movs	r3, #3
 80044cc:	e095      	b.n	80045fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80044ce:	4b4e      	ldr	r3, [pc, #312]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 80044d0:	689b      	ldr	r3, [r3, #8]
 80044d2:	f003 020c 	and.w	r2, r3, #12
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	009b      	lsls	r3, r3, #2
 80044dc:	429a      	cmp	r2, r3
 80044de:	d1eb      	bne.n	80044b8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f003 0302 	and.w	r3, r3, #2
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d023      	beq.n	8004534 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	f003 0304 	and.w	r3, r3, #4
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044f8:	4b43      	ldr	r3, [pc, #268]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	4a42      	ldr	r2, [pc, #264]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 80044fe:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8004502:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f003 0308 	and.w	r3, r3, #8
 800450c:	2b00      	cmp	r3, #0
 800450e:	d007      	beq.n	8004520 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8004510:	4b3d      	ldr	r3, [pc, #244]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 8004512:	689b      	ldr	r3, [r3, #8]
 8004514:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8004518:	4a3b      	ldr	r2, [pc, #236]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 800451a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800451e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004520:	4b39      	ldr	r3, [pc, #228]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 8004522:	689b      	ldr	r3, [r3, #8]
 8004524:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	4936      	ldr	r1, [pc, #216]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 800452e:	4313      	orrs	r3, r2
 8004530:	608b      	str	r3, [r1, #8]
 8004532:	e008      	b.n	8004546 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8004534:	697b      	ldr	r3, [r7, #20]
 8004536:	2b80      	cmp	r3, #128	@ 0x80
 8004538:	d105      	bne.n	8004546 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800453a:	4b33      	ldr	r3, [pc, #204]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 800453c:	689b      	ldr	r3, [r3, #8]
 800453e:	4a32      	ldr	r2, [pc, #200]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 8004540:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004544:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004546:	4b2f      	ldr	r3, [pc, #188]	@ (8004604 <HAL_RCC_ClockConfig+0x260>)
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f003 030f 	and.w	r3, r3, #15
 800454e:	683a      	ldr	r2, [r7, #0]
 8004550:	429a      	cmp	r2, r3
 8004552:	d21d      	bcs.n	8004590 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004554:	4b2b      	ldr	r3, [pc, #172]	@ (8004604 <HAL_RCC_ClockConfig+0x260>)
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	f023 020f 	bic.w	r2, r3, #15
 800455c:	4929      	ldr	r1, [pc, #164]	@ (8004604 <HAL_RCC_ClockConfig+0x260>)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	4313      	orrs	r3, r2
 8004562:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8004564:	f7fd fa22 	bl	80019ac <HAL_GetTick>
 8004568:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	e00a      	b.n	8004582 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800456c:	f7fd fa1e 	bl	80019ac <HAL_GetTick>
 8004570:	4602      	mov	r2, r0
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	1ad3      	subs	r3, r2, r3
 8004576:	f241 3288 	movw	r2, #5000	@ 0x1388
 800457a:	4293      	cmp	r3, r2
 800457c:	d901      	bls.n	8004582 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 800457e:	2303      	movs	r3, #3
 8004580:	e03b      	b.n	80045fa <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004582:	4b20      	ldr	r3, [pc, #128]	@ (8004604 <HAL_RCC_ClockConfig+0x260>)
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	f003 030f 	and.w	r3, r3, #15
 800458a:	683a      	ldr	r2, [r7, #0]
 800458c:	429a      	cmp	r2, r3
 800458e:	d1ed      	bne.n	800456c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0304 	and.w	r3, r3, #4
 8004598:	2b00      	cmp	r3, #0
 800459a:	d008      	beq.n	80045ae <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800459c:	4b1a      	ldr	r3, [pc, #104]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	68db      	ldr	r3, [r3, #12]
 80045a8:	4917      	ldr	r1, [pc, #92]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 80045aa:	4313      	orrs	r3, r2
 80045ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f003 0308 	and.w	r3, r3, #8
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d009      	beq.n	80045ce <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045ba:	4b13      	ldr	r3, [pc, #76]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 80045bc:	689b      	ldr	r3, [r3, #8]
 80045be:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	490f      	ldr	r1, [pc, #60]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 80045ca:	4313      	orrs	r3, r2
 80045cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80045ce:	f000 f825 	bl	800461c <HAL_RCC_GetSysClockFreq>
 80045d2:	4602      	mov	r2, r0
 80045d4:	4b0c      	ldr	r3, [pc, #48]	@ (8004608 <HAL_RCC_ClockConfig+0x264>)
 80045d6:	689b      	ldr	r3, [r3, #8]
 80045d8:	091b      	lsrs	r3, r3, #4
 80045da:	f003 030f 	and.w	r3, r3, #15
 80045de:	490c      	ldr	r1, [pc, #48]	@ (8004610 <HAL_RCC_ClockConfig+0x26c>)
 80045e0:	5ccb      	ldrb	r3, [r1, r3]
 80045e2:	f003 031f 	and.w	r3, r3, #31
 80045e6:	fa22 f303 	lsr.w	r3, r2, r3
 80045ea:	4a0a      	ldr	r2, [pc, #40]	@ (8004614 <HAL_RCC_ClockConfig+0x270>)
 80045ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80045ee:	4b0a      	ldr	r3, [pc, #40]	@ (8004618 <HAL_RCC_ClockConfig+0x274>)
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	4618      	mov	r0, r3
 80045f4:	f7fc fc82 	bl	8000efc <HAL_InitTick>
 80045f8:	4603      	mov	r3, r0
}
 80045fa:	4618      	mov	r0, r3
 80045fc:	3718      	adds	r7, #24
 80045fe:	46bd      	mov	sp, r7
 8004600:	bd80      	pop	{r7, pc}
 8004602:	bf00      	nop
 8004604:	40022000 	.word	0x40022000
 8004608:	40021000 	.word	0x40021000
 800460c:	04c4b400 	.word	0x04c4b400
 8004610:	08006fb0 	.word	0x08006fb0
 8004614:	20000018 	.word	0x20000018
 8004618:	20000024 	.word	0x20000024

0800461c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800461c:	b480      	push	{r7}
 800461e:	b087      	sub	sp, #28
 8004620:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8004622:	4b2c      	ldr	r3, [pc, #176]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	2b04      	cmp	r3, #4
 800462c:	d102      	bne.n	8004634 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800462e:	4b2a      	ldr	r3, [pc, #168]	@ (80046d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004630:	613b      	str	r3, [r7, #16]
 8004632:	e047      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8004634:	4b27      	ldr	r3, [pc, #156]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	f003 030c 	and.w	r3, r3, #12
 800463c:	2b08      	cmp	r3, #8
 800463e:	d102      	bne.n	8004646 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8004640:	4b26      	ldr	r3, [pc, #152]	@ (80046dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004642:	613b      	str	r3, [r7, #16]
 8004644:	e03e      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8004646:	4b23      	ldr	r3, [pc, #140]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004648:	689b      	ldr	r3, [r3, #8]
 800464a:	f003 030c 	and.w	r3, r3, #12
 800464e:	2b0c      	cmp	r3, #12
 8004650:	d136      	bne.n	80046c0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004652:	4b20      	ldr	r3, [pc, #128]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f003 0303 	and.w	r3, r3, #3
 800465a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800465c:	4b1d      	ldr	r3, [pc, #116]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	091b      	lsrs	r3, r3, #4
 8004662:	f003 030f 	and.w	r3, r3, #15
 8004666:	3301      	adds	r3, #1
 8004668:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	2b03      	cmp	r3, #3
 800466e:	d10c      	bne.n	800468a <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004670:	4a1a      	ldr	r2, [pc, #104]	@ (80046dc <HAL_RCC_GetSysClockFreq+0xc0>)
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	fbb2 f3f3 	udiv	r3, r2, r3
 8004678:	4a16      	ldr	r2, [pc, #88]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 800467a:	68d2      	ldr	r2, [r2, #12]
 800467c:	0a12      	lsrs	r2, r2, #8
 800467e:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004682:	fb02 f303 	mul.w	r3, r2, r3
 8004686:	617b      	str	r3, [r7, #20]
      break;
 8004688:	e00c      	b.n	80046a4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800468a:	4a13      	ldr	r2, [pc, #76]	@ (80046d8 <HAL_RCC_GetSysClockFreq+0xbc>)
 800468c:	68bb      	ldr	r3, [r7, #8]
 800468e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004692:	4a10      	ldr	r2, [pc, #64]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004694:	68d2      	ldr	r2, [r2, #12]
 8004696:	0a12      	lsrs	r2, r2, #8
 8004698:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800469c:	fb02 f303 	mul.w	r3, r2, r3
 80046a0:	617b      	str	r3, [r7, #20]
      break;
 80046a2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80046a4:	4b0b      	ldr	r3, [pc, #44]	@ (80046d4 <HAL_RCC_GetSysClockFreq+0xb8>)
 80046a6:	68db      	ldr	r3, [r3, #12]
 80046a8:	0e5b      	lsrs	r3, r3, #25
 80046aa:	f003 0303 	and.w	r3, r3, #3
 80046ae:	3301      	adds	r3, #1
 80046b0:	005b      	lsls	r3, r3, #1
 80046b2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80046b4:	697a      	ldr	r2, [r7, #20]
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80046bc:	613b      	str	r3, [r7, #16]
 80046be:	e001      	b.n	80046c4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80046c0:	2300      	movs	r3, #0
 80046c2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80046c4:	693b      	ldr	r3, [r7, #16]
}
 80046c6:	4618      	mov	r0, r3
 80046c8:	371c      	adds	r7, #28
 80046ca:	46bd      	mov	sp, r7
 80046cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046d0:	4770      	bx	lr
 80046d2:	bf00      	nop
 80046d4:	40021000 	.word	0x40021000
 80046d8:	00f42400 	.word	0x00f42400
 80046dc:	007a1200 	.word	0x007a1200

080046e0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80046e0:	b480      	push	{r7}
 80046e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80046e4:	4b03      	ldr	r3, [pc, #12]	@ (80046f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80046e6:	681b      	ldr	r3, [r3, #0]
}
 80046e8:	4618      	mov	r0, r3
 80046ea:	46bd      	mov	sp, r7
 80046ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f0:	4770      	bx	lr
 80046f2:	bf00      	nop
 80046f4:	20000018 	.word	0x20000018

080046f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80046f8:	b580      	push	{r7, lr}
 80046fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80046fc:	f7ff fff0 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 8004700:	4602      	mov	r2, r0
 8004702:	4b06      	ldr	r3, [pc, #24]	@ (800471c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004704:	689b      	ldr	r3, [r3, #8]
 8004706:	0a1b      	lsrs	r3, r3, #8
 8004708:	f003 0307 	and.w	r3, r3, #7
 800470c:	4904      	ldr	r1, [pc, #16]	@ (8004720 <HAL_RCC_GetPCLK1Freq+0x28>)
 800470e:	5ccb      	ldrb	r3, [r1, r3]
 8004710:	f003 031f 	and.w	r3, r3, #31
 8004714:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004718:	4618      	mov	r0, r3
 800471a:	bd80      	pop	{r7, pc}
 800471c:	40021000 	.word	0x40021000
 8004720:	08006fc0 	.word	0x08006fc0

08004724 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004724:	b580      	push	{r7, lr}
 8004726:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8004728:	f7ff ffda 	bl	80046e0 <HAL_RCC_GetHCLKFreq>
 800472c:	4602      	mov	r2, r0
 800472e:	4b06      	ldr	r3, [pc, #24]	@ (8004748 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004730:	689b      	ldr	r3, [r3, #8]
 8004732:	0adb      	lsrs	r3, r3, #11
 8004734:	f003 0307 	and.w	r3, r3, #7
 8004738:	4904      	ldr	r1, [pc, #16]	@ (800474c <HAL_RCC_GetPCLK2Freq+0x28>)
 800473a:	5ccb      	ldrb	r3, [r1, r3]
 800473c:	f003 031f 	and.w	r3, r3, #31
 8004740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004744:	4618      	mov	r0, r3
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40021000 	.word	0x40021000
 800474c:	08006fc0 	.word	0x08006fc0

08004750 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
 8004758:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	220f      	movs	r2, #15
 800475e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004760:	4b12      	ldr	r3, [pc, #72]	@ (80047ac <HAL_RCC_GetClockConfig+0x5c>)
 8004762:	689b      	ldr	r3, [r3, #8]
 8004764:	f003 0203 	and.w	r2, r3, #3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800476c:	4b0f      	ldr	r3, [pc, #60]	@ (80047ac <HAL_RCC_GetClockConfig+0x5c>)
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004778:	4b0c      	ldr	r3, [pc, #48]	@ (80047ac <HAL_RCC_GetClockConfig+0x5c>)
 800477a:	689b      	ldr	r3, [r3, #8]
 800477c:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004784:	4b09      	ldr	r3, [pc, #36]	@ (80047ac <HAL_RCC_GetClockConfig+0x5c>)
 8004786:	689b      	ldr	r3, [r3, #8]
 8004788:	08db      	lsrs	r3, r3, #3
 800478a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004792:	4b07      	ldr	r3, [pc, #28]	@ (80047b0 <HAL_RCC_GetClockConfig+0x60>)
 8004794:	681b      	ldr	r3, [r3, #0]
 8004796:	f003 020f 	and.w	r2, r3, #15
 800479a:	683b      	ldr	r3, [r7, #0]
 800479c:	601a      	str	r2, [r3, #0]
}
 800479e:	bf00      	nop
 80047a0:	370c      	adds	r7, #12
 80047a2:	46bd      	mov	sp, r7
 80047a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a8:	4770      	bx	lr
 80047aa:	bf00      	nop
 80047ac:	40021000 	.word	0x40021000
 80047b0:	40022000 	.word	0x40022000

080047b4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b087      	sub	sp, #28
 80047b8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80047ba:	4b1e      	ldr	r3, [pc, #120]	@ (8004834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047bc:	68db      	ldr	r3, [r3, #12]
 80047be:	f003 0303 	and.w	r3, r3, #3
 80047c2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80047c4:	4b1b      	ldr	r3, [pc, #108]	@ (8004834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	091b      	lsrs	r3, r3, #4
 80047ca:	f003 030f 	and.w	r3, r3, #15
 80047ce:	3301      	adds	r3, #1
 80047d0:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80047d2:	693b      	ldr	r3, [r7, #16]
 80047d4:	2b03      	cmp	r3, #3
 80047d6:	d10c      	bne.n	80047f2 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047d8:	4a17      	ldr	r2, [pc, #92]	@ (8004838 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80047e0:	4a14      	ldr	r2, [pc, #80]	@ (8004834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047e2:	68d2      	ldr	r2, [r2, #12]
 80047e4:	0a12      	lsrs	r2, r2, #8
 80047e6:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80047ea:	fb02 f303 	mul.w	r3, r2, r3
 80047ee:	617b      	str	r3, [r7, #20]
    break;
 80047f0:	e00c      	b.n	800480c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80047f2:	4a12      	ldr	r2, [pc, #72]	@ (800483c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	fbb2 f3f3 	udiv	r3, r2, r3
 80047fa:	4a0e      	ldr	r2, [pc, #56]	@ (8004834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80047fc:	68d2      	ldr	r2, [r2, #12]
 80047fe:	0a12      	lsrs	r2, r2, #8
 8004800:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004804:	fb02 f303 	mul.w	r3, r2, r3
 8004808:	617b      	str	r3, [r7, #20]
    break;
 800480a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800480c:	4b09      	ldr	r3, [pc, #36]	@ (8004834 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800480e:	68db      	ldr	r3, [r3, #12]
 8004810:	0e5b      	lsrs	r3, r3, #25
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	3301      	adds	r3, #1
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800481c:	697a      	ldr	r2, [r7, #20]
 800481e:	68bb      	ldr	r3, [r7, #8]
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004826:	687b      	ldr	r3, [r7, #4]
}
 8004828:	4618      	mov	r0, r3
 800482a:	371c      	adds	r7, #28
 800482c:	46bd      	mov	sp, r7
 800482e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004832:	4770      	bx	lr
 8004834:	40021000 	.word	0x40021000
 8004838:	007a1200 	.word	0x007a1200
 800483c:	00f42400 	.word	0x00f42400

08004840 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004840:	b580      	push	{r7, lr}
 8004842:	b086      	sub	sp, #24
 8004844:	af00      	add	r7, sp, #0
 8004846:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004848:	2300      	movs	r3, #0
 800484a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800484c:	2300      	movs	r3, #0
 800484e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004858:	2b00      	cmp	r3, #0
 800485a:	f000 8098 	beq.w	800498e <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800485e:	2300      	movs	r3, #0
 8004860:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004862:	4b43      	ldr	r3, [pc, #268]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004864:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004866:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800486a:	2b00      	cmp	r3, #0
 800486c:	d10d      	bne.n	800488a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800486e:	4b40      	ldr	r3, [pc, #256]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004870:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004872:	4a3f      	ldr	r2, [pc, #252]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004874:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004878:	6593      	str	r3, [r2, #88]	@ 0x58
 800487a:	4b3d      	ldr	r3, [pc, #244]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800487c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800487e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004882:	60bb      	str	r3, [r7, #8]
 8004884:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004886:	2301      	movs	r3, #1
 8004888:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800488a:	4b3a      	ldr	r3, [pc, #232]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	4a39      	ldr	r2, [pc, #228]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8004890:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004894:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004896:	f7fd f889 	bl	80019ac <HAL_GetTick>
 800489a:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800489c:	e009      	b.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800489e:	f7fd f885 	bl	80019ac <HAL_GetTick>
 80048a2:	4602      	mov	r2, r0
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	1ad3      	subs	r3, r2, r3
 80048a8:	2b02      	cmp	r3, #2
 80048aa:	d902      	bls.n	80048b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80048ac:	2303      	movs	r3, #3
 80048ae:	74fb      	strb	r3, [r7, #19]
        break;
 80048b0:	e005      	b.n	80048be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80048b2:	4b30      	ldr	r3, [pc, #192]	@ (8004974 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d0ef      	beq.n	800489e <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80048be:	7cfb      	ldrb	r3, [r7, #19]
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d159      	bne.n	8004978 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80048c4:	4b2a      	ldr	r3, [pc, #168]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80048ce:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80048d0:	697b      	ldr	r3, [r7, #20]
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d01e      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80048da:	697a      	ldr	r2, [r7, #20]
 80048dc:	429a      	cmp	r2, r3
 80048de:	d019      	beq.n	8004914 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80048e0:	4b23      	ldr	r3, [pc, #140]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048e6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80048ea:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80048ec:	4b20      	ldr	r3, [pc, #128]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80048f2:	4a1f      	ldr	r2, [pc, #124]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80048f8:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80048fc:	4b1c      	ldr	r3, [pc, #112]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80048fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004902:	4a1b      	ldr	r2, [pc, #108]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004904:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004908:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800490c:	4a18      	ldr	r2, [pc, #96]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004914:	697b      	ldr	r3, [r7, #20]
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d016      	beq.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800491e:	f7fd f845 	bl	80019ac <HAL_GetTick>
 8004922:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004924:	e00b      	b.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004926:	f7fd f841 	bl	80019ac <HAL_GetTick>
 800492a:	4602      	mov	r2, r0
 800492c:	68fb      	ldr	r3, [r7, #12]
 800492e:	1ad3      	subs	r3, r2, r3
 8004930:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004934:	4293      	cmp	r3, r2
 8004936:	d902      	bls.n	800493e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8004938:	2303      	movs	r3, #3
 800493a:	74fb      	strb	r3, [r7, #19]
            break;
 800493c:	e006      	b.n	800494c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800493e:	4b0c      	ldr	r3, [pc, #48]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004940:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d0ec      	beq.n	8004926 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 800494c:	7cfb      	ldrb	r3, [r7, #19]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d10b      	bne.n	800496a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004952:	4b07      	ldr	r3, [pc, #28]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004954:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004958:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004960:	4903      	ldr	r1, [pc, #12]	@ (8004970 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8004962:	4313      	orrs	r3, r2
 8004964:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004968:	e008      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800496a:	7cfb      	ldrb	r3, [r7, #19]
 800496c:	74bb      	strb	r3, [r7, #18]
 800496e:	e005      	b.n	800497c <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8004970:	40021000 	.word	0x40021000
 8004974:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004978:	7cfb      	ldrb	r3, [r7, #19]
 800497a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800497c:	7c7b      	ldrb	r3, [r7, #17]
 800497e:	2b01      	cmp	r3, #1
 8004980:	d105      	bne.n	800498e <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004982:	4ba6      	ldr	r3, [pc, #664]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004984:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004986:	4aa5      	ldr	r2, [pc, #660]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004988:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800498c:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	f003 0301 	and.w	r3, r3, #1
 8004996:	2b00      	cmp	r3, #0
 8004998:	d00a      	beq.n	80049b0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800499a:	4ba0      	ldr	r3, [pc, #640]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 800499c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049a0:	f023 0203 	bic.w	r2, r3, #3
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	499c      	ldr	r1, [pc, #624]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049aa:	4313      	orrs	r3, r2
 80049ac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	f003 0302 	and.w	r3, r3, #2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d00a      	beq.n	80049d2 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80049bc:	4b97      	ldr	r3, [pc, #604]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049c2:	f023 020c 	bic.w	r2, r3, #12
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	689b      	ldr	r3, [r3, #8]
 80049ca:	4994      	ldr	r1, [pc, #592]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049cc:	4313      	orrs	r3, r2
 80049ce:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f003 0304 	and.w	r3, r3, #4
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d00a      	beq.n	80049f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80049de:	4b8f      	ldr	r3, [pc, #572]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049e0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80049e4:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	498b      	ldr	r1, [pc, #556]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 80049ee:	4313      	orrs	r3, r2
 80049f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

#endif /* USART3 */

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0308 	and.w	r3, r3, #8
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00a      	beq.n	8004a16 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004a00:	4b86      	ldr	r3, [pc, #536]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a06:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	691b      	ldr	r3, [r3, #16]
 8004a0e:	4983      	ldr	r1, [pc, #524]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a10:	4313      	orrs	r3, r2
 8004a12:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f003 0320 	and.w	r3, r3, #32
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d00a      	beq.n	8004a38 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004a22:	4b7e      	ldr	r3, [pc, #504]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a24:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a28:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	695b      	ldr	r3, [r3, #20]
 8004a30:	497a      	ldr	r1, [pc, #488]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a32:	4313      	orrs	r3, r2
 8004a34:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a40:	2b00      	cmp	r3, #0
 8004a42:	d00a      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004a44:	4b75      	ldr	r3, [pc, #468]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a46:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a4a:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	699b      	ldr	r3, [r3, #24]
 8004a52:	4972      	ldr	r1, [pc, #456]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a54:	4313      	orrs	r3, r2
 8004a56:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d00a      	beq.n	8004a7c <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004a66:	4b6d      	ldr	r3, [pc, #436]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a68:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a6c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	69db      	ldr	r3, [r3, #28]
 8004a74:	4969      	ldr	r1, [pc, #420]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a76:	4313      	orrs	r3, r2
 8004a78:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }
#if defined(I2C3)

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d00a      	beq.n	8004a9e <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004a88:	4b64      	ldr	r3, [pc, #400]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a8a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a8e:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6a1b      	ldr	r3, [r3, #32]
 8004a96:	4961      	ldr	r1, [pc, #388]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d00a      	beq.n	8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004aaa:	4b5c      	ldr	r3, [pc, #368]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ab0:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ab8:	4958      	ldr	r1, [pc, #352]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aba:	4313      	orrs	r3, r2
 8004abc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(SAI1) 
  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	681b      	ldr	r3, [r3, #0]
 8004ac4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004ac8:	2b00      	cmp	r3, #0
 8004aca:	d015      	beq.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004acc:	4b53      	ldr	r3, [pc, #332]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004ace:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ad2:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ada:	4950      	ldr	r1, [pc, #320]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004adc:	4313      	orrs	r3, r2
 8004ade:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ae6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004aea:	d105      	bne.n	8004af8 <HAL_RCCEx_PeriphCLKConfig+0x2b8>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004aec:	4b4b      	ldr	r3, [pc, #300]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	4a4a      	ldr	r2, [pc, #296]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004af2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004af6:	60d3      	str	r3, [r2, #12]

#endif /* SAI1 */

#if defined(SPI_I2S_SUPPORT)
  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b00:	2b00      	cmp	r3, #0
 8004b02:	d015      	beq.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004b04:	4b45      	ldr	r3, [pc, #276]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b0a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b12:	4942      	ldr	r1, [pc, #264]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b14:	4313      	orrs	r3, r2
 8004b16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004b1e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004b22:	d105      	bne.n	8004b30 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b24:	4b3d      	ldr	r3, [pc, #244]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b26:	68db      	ldr	r3, [r3, #12]
 8004b28:	4a3c      	ldr	r2, [pc, #240]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b2a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b2e:	60d3      	str	r3, [r2, #12]

#endif /* SPI_I2S_SUPPORT */

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d015      	beq.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8004b3c:	4b37      	ldr	r3, [pc, #220]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b42:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b4a:	4934      	ldr	r1, [pc, #208]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b4c:	4313      	orrs	r3, r2
 8004b4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b56:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004b5a:	d105      	bne.n	8004b68 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b5c:	4b2f      	ldr	r3, [pc, #188]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b5e:	68db      	ldr	r3, [r3, #12]
 8004b60:	4a2e      	ldr	r2, [pc, #184]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b62:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b66:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d015      	beq.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x360>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004b74:	4b29      	ldr	r3, [pc, #164]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004b7a:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b82:	4926      	ldr	r1, [pc, #152]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b84:	4313      	orrs	r3, r2
 8004b86:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004b8e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004b92:	d105      	bne.n	8004ba0 <HAL_RCCEx_PeriphCLKConfig+0x360>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004b94:	4b21      	ldr	r3, [pc, #132]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b96:	68db      	ldr	r3, [r3, #12]
 8004b98:	4a20      	ldr	r2, [pc, #128]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004b9a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004b9e:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d015      	beq.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004bac:	4b1b      	ldr	r3, [pc, #108]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bb2:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bba:	4918      	ldr	r1, [pc, #96]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bbc:	4313      	orrs	r3, r2
 8004bbe:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004bc6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8004bca:	d105      	bne.n	8004bd8 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004bcc:	4b13      	ldr	r3, [pc, #76]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bce:	68db      	ldr	r3, [r3, #12]
 8004bd0:	4a12      	ldr	r2, [pc, #72]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bd2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8004bd6:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004be0:	2b00      	cmp	r3, #0
 8004be2:	d015      	beq.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8004be4:	4b0d      	ldr	r3, [pc, #52]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004be6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004bea:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf2:	490a      	ldr	r1, [pc, #40]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004bf4:	4313      	orrs	r3, r2
 8004bf6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bfe:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8004c02:	d105      	bne.n	8004c10 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004c04:	4b05      	ldr	r3, [pc, #20]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c06:	68db      	ldr	r3, [r3, #12]
 8004c08:	4a04      	ldr	r2, [pc, #16]	@ (8004c1c <HAL_RCCEx_PeriphCLKConfig+0x3dc>)
 8004c0a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c0e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8004c10:	7cbb      	ldrb	r3, [r7, #18]
}
 8004c12:	4618      	mov	r0, r3
 8004c14:	3718      	adds	r7, #24
 8004c16:	46bd      	mov	sp, r7
 8004c18:	bd80      	pop	{r7, pc}
 8004c1a:	bf00      	nop
 8004c1c:	40021000 	.word	0x40021000

08004c20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004c20:	b580      	push	{r7, lr}
 8004c22:	b082      	sub	sp, #8
 8004c24:	af00      	add	r7, sp, #0
 8004c26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d101      	bne.n	8004c32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004c2e:	2301      	movs	r3, #1
 8004c30:	e049      	b.n	8004cc6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c38:	b2db      	uxtb	r3, r3
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d106      	bne.n	8004c4c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	2200      	movs	r2, #0
 8004c42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	f7fc fbd0 	bl	80013ec <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2202      	movs	r2, #2
 8004c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681a      	ldr	r2, [r3, #0]
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	3304      	adds	r3, #4
 8004c5c:	4619      	mov	r1, r3
 8004c5e:	4610      	mov	r0, r2
 8004c60:	f000 fd88 	bl	8005774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	2201      	movs	r2, #1
 8004c68:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	2201      	movs	r2, #1
 8004c70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2201      	movs	r2, #1
 8004c78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	2201      	movs	r2, #1
 8004c80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2201      	movs	r2, #1
 8004c88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	2201      	movs	r2, #1
 8004c90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	2201      	movs	r2, #1
 8004c98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	2201      	movs	r2, #1
 8004ca0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	2201      	movs	r2, #1
 8004ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	2201      	movs	r2, #1
 8004cb0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	2201      	movs	r2, #1
 8004cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3708      	adds	r7, #8
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	2b01      	cmp	r3, #1
 8004ce2:	d001      	beq.n	8004ce8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004ce4:	2301      	movs	r3, #1
 8004ce6:	e04a      	b.n	8004d7e <HAL_TIM_Base_Start_IT+0xae>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	2202      	movs	r2, #2
 8004cec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	68da      	ldr	r2, [r3, #12]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	f042 0201 	orr.w	r2, r2, #1
 8004cfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	4a21      	ldr	r2, [pc, #132]	@ (8004d8c <HAL_TIM_Base_Start_IT+0xbc>)
 8004d06:	4293      	cmp	r3, r2
 8004d08:	d018      	beq.n	8004d3c <HAL_TIM_Base_Start_IT+0x6c>
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004d12:	d013      	beq.n	8004d3c <HAL_TIM_Base_Start_IT+0x6c>
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	4a1d      	ldr	r2, [pc, #116]	@ (8004d90 <HAL_TIM_Base_Start_IT+0xc0>)
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d00e      	beq.n	8004d3c <HAL_TIM_Base_Start_IT+0x6c>
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	4a1c      	ldr	r2, [pc, #112]	@ (8004d94 <HAL_TIM_Base_Start_IT+0xc4>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d009      	beq.n	8004d3c <HAL_TIM_Base_Start_IT+0x6c>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	4a1a      	ldr	r2, [pc, #104]	@ (8004d98 <HAL_TIM_Base_Start_IT+0xc8>)
 8004d2e:	4293      	cmp	r3, r2
 8004d30:	d004      	beq.n	8004d3c <HAL_TIM_Base_Start_IT+0x6c>
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	4a19      	ldr	r2, [pc, #100]	@ (8004d9c <HAL_TIM_Base_Start_IT+0xcc>)
 8004d38:	4293      	cmp	r3, r2
 8004d3a:	d115      	bne.n	8004d68 <HAL_TIM_Base_Start_IT+0x98>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	689a      	ldr	r2, [r3, #8]
 8004d42:	4b17      	ldr	r3, [pc, #92]	@ (8004da0 <HAL_TIM_Base_Start_IT+0xd0>)
 8004d44:	4013      	ands	r3, r2
 8004d46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	2b06      	cmp	r3, #6
 8004d4c:	d015      	beq.n	8004d7a <HAL_TIM_Base_Start_IT+0xaa>
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d54:	d011      	beq.n	8004d7a <HAL_TIM_Base_Start_IT+0xaa>
    {
      __HAL_TIM_ENABLE(htim);
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	681a      	ldr	r2, [r3, #0]
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f042 0201 	orr.w	r2, r2, #1
 8004d64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d66:	e008      	b.n	8004d7a <HAL_TIM_Base_Start_IT+0xaa>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f042 0201 	orr.w	r2, r2, #1
 8004d76:	601a      	str	r2, [r3, #0]
 8004d78:	e000      	b.n	8004d7c <HAL_TIM_Base_Start_IT+0xac>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004d7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8004d7c:	2300      	movs	r3, #0
}
 8004d7e:	4618      	mov	r0, r3
 8004d80:	3714      	adds	r7, #20
 8004d82:	46bd      	mov	sp, r7
 8004d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d88:	4770      	bx	lr
 8004d8a:	bf00      	nop
 8004d8c:	40012c00 	.word	0x40012c00
 8004d90:	40000400 	.word	0x40000400
 8004d94:	40000800 	.word	0x40000800
 8004d98:	40013400 	.word	0x40013400
 8004d9c:	40014000 	.word	0x40014000
 8004da0:	00010007 	.word	0x00010007

08004da4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004da4:	b580      	push	{r7, lr}
 8004da6:	b082      	sub	sp, #8
 8004da8:	af00      	add	r7, sp, #0
 8004daa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	2b00      	cmp	r3, #0
 8004db0:	d101      	bne.n	8004db6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004db2:	2301      	movs	r3, #1
 8004db4:	e049      	b.n	8004e4a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004dbc:	b2db      	uxtb	r3, r3
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d106      	bne.n	8004dd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	2200      	movs	r2, #0
 8004dc6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004dca:	6878      	ldr	r0, [r7, #4]
 8004dcc:	f000 f841 	bl	8004e52 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2202      	movs	r2, #2
 8004dd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	681a      	ldr	r2, [r3, #0]
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	3304      	adds	r3, #4
 8004de0:	4619      	mov	r1, r3
 8004de2:	4610      	mov	r0, r2
 8004de4:	f000 fcc6 	bl	8005774 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	2201      	movs	r2, #1
 8004e34:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	2201      	movs	r2, #1
 8004e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e48:	2300      	movs	r3, #0
}
 8004e4a:	4618      	mov	r0, r3
 8004e4c:	3708      	adds	r7, #8
 8004e4e:	46bd      	mov	sp, r7
 8004e50:	bd80      	pop	{r7, pc}

08004e52 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e52:	b480      	push	{r7}
 8004e54:	b083      	sub	sp, #12
 8004e56:	af00      	add	r7, sp, #0
 8004e58:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e5a:	bf00      	nop
 8004e5c:	370c      	adds	r7, #12
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e64:	4770      	bx	lr
	...

08004e68 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b084      	sub	sp, #16
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
 8004e70:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e72:	683b      	ldr	r3, [r7, #0]
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	d109      	bne.n	8004e8c <HAL_TIM_PWM_Start+0x24>
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	bf14      	ite	ne
 8004e84:	2301      	movne	r3, #1
 8004e86:	2300      	moveq	r3, #0
 8004e88:	b2db      	uxtb	r3, r3
 8004e8a:	e03c      	b.n	8004f06 <HAL_TIM_PWM_Start+0x9e>
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	2b04      	cmp	r3, #4
 8004e90:	d109      	bne.n	8004ea6 <HAL_TIM_PWM_Start+0x3e>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e98:	b2db      	uxtb	r3, r3
 8004e9a:	2b01      	cmp	r3, #1
 8004e9c:	bf14      	ite	ne
 8004e9e:	2301      	movne	r3, #1
 8004ea0:	2300      	moveq	r3, #0
 8004ea2:	b2db      	uxtb	r3, r3
 8004ea4:	e02f      	b.n	8004f06 <HAL_TIM_PWM_Start+0x9e>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b08      	cmp	r3, #8
 8004eaa:	d109      	bne.n	8004ec0 <HAL_TIM_PWM_Start+0x58>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004eb2:	b2db      	uxtb	r3, r3
 8004eb4:	2b01      	cmp	r3, #1
 8004eb6:	bf14      	ite	ne
 8004eb8:	2301      	movne	r3, #1
 8004eba:	2300      	moveq	r3, #0
 8004ebc:	b2db      	uxtb	r3, r3
 8004ebe:	e022      	b.n	8004f06 <HAL_TIM_PWM_Start+0x9e>
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	2b0c      	cmp	r3, #12
 8004ec4:	d109      	bne.n	8004eda <HAL_TIM_PWM_Start+0x72>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	2b01      	cmp	r3, #1
 8004ed0:	bf14      	ite	ne
 8004ed2:	2301      	movne	r3, #1
 8004ed4:	2300      	moveq	r3, #0
 8004ed6:	b2db      	uxtb	r3, r3
 8004ed8:	e015      	b.n	8004f06 <HAL_TIM_PWM_Start+0x9e>
 8004eda:	683b      	ldr	r3, [r7, #0]
 8004edc:	2b10      	cmp	r3, #16
 8004ede:	d109      	bne.n	8004ef4 <HAL_TIM_PWM_Start+0x8c>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	2b01      	cmp	r3, #1
 8004eea:	bf14      	ite	ne
 8004eec:	2301      	movne	r3, #1
 8004eee:	2300      	moveq	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	e008      	b.n	8004f06 <HAL_TIM_PWM_Start+0x9e>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8004efa:	b2db      	uxtb	r3, r3
 8004efc:	2b01      	cmp	r3, #1
 8004efe:	bf14      	ite	ne
 8004f00:	2301      	movne	r3, #1
 8004f02:	2300      	moveq	r3, #0
 8004f04:	b2db      	uxtb	r3, r3
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d001      	beq.n	8004f0e <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8004f0a:	2301      	movs	r3, #1
 8004f0c:	e097      	b.n	800503e <HAL_TIM_PWM_Start+0x1d6>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d104      	bne.n	8004f1e <HAL_TIM_PWM_Start+0xb6>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	2202      	movs	r2, #2
 8004f18:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004f1c:	e023      	b.n	8004f66 <HAL_TIM_PWM_Start+0xfe>
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	2b04      	cmp	r3, #4
 8004f22:	d104      	bne.n	8004f2e <HAL_TIM_PWM_Start+0xc6>
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004f2c:	e01b      	b.n	8004f66 <HAL_TIM_PWM_Start+0xfe>
 8004f2e:	683b      	ldr	r3, [r7, #0]
 8004f30:	2b08      	cmp	r3, #8
 8004f32:	d104      	bne.n	8004f3e <HAL_TIM_PWM_Start+0xd6>
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2202      	movs	r2, #2
 8004f38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004f3c:	e013      	b.n	8004f66 <HAL_TIM_PWM_Start+0xfe>
 8004f3e:	683b      	ldr	r3, [r7, #0]
 8004f40:	2b0c      	cmp	r3, #12
 8004f42:	d104      	bne.n	8004f4e <HAL_TIM_PWM_Start+0xe6>
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	2202      	movs	r2, #2
 8004f48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8004f4c:	e00b      	b.n	8004f66 <HAL_TIM_PWM_Start+0xfe>
 8004f4e:	683b      	ldr	r3, [r7, #0]
 8004f50:	2b10      	cmp	r3, #16
 8004f52:	d104      	bne.n	8004f5e <HAL_TIM_PWM_Start+0xf6>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2202      	movs	r2, #2
 8004f58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004f5c:	e003      	b.n	8004f66 <HAL_TIM_PWM_Start+0xfe>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2202      	movs	r2, #2
 8004f62:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	2201      	movs	r2, #1
 8004f6c:	6839      	ldr	r1, [r7, #0]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f001 f82e 	bl	8005fd0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	4a33      	ldr	r2, [pc, #204]	@ (8005048 <HAL_TIM_PWM_Start+0x1e0>)
 8004f7a:	4293      	cmp	r3, r2
 8004f7c:	d013      	beq.n	8004fa6 <HAL_TIM_PWM_Start+0x13e>
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	4a32      	ldr	r2, [pc, #200]	@ (800504c <HAL_TIM_PWM_Start+0x1e4>)
 8004f84:	4293      	cmp	r3, r2
 8004f86:	d00e      	beq.n	8004fa6 <HAL_TIM_PWM_Start+0x13e>
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	4a30      	ldr	r2, [pc, #192]	@ (8005050 <HAL_TIM_PWM_Start+0x1e8>)
 8004f8e:	4293      	cmp	r3, r2
 8004f90:	d009      	beq.n	8004fa6 <HAL_TIM_PWM_Start+0x13e>
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	4a2f      	ldr	r2, [pc, #188]	@ (8005054 <HAL_TIM_PWM_Start+0x1ec>)
 8004f98:	4293      	cmp	r3, r2
 8004f9a:	d004      	beq.n	8004fa6 <HAL_TIM_PWM_Start+0x13e>
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	4a2d      	ldr	r2, [pc, #180]	@ (8005058 <HAL_TIM_PWM_Start+0x1f0>)
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d101      	bne.n	8004faa <HAL_TIM_PWM_Start+0x142>
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	e000      	b.n	8004fac <HAL_TIM_PWM_Start+0x144>
 8004faa:	2300      	movs	r3, #0
 8004fac:	2b00      	cmp	r3, #0
 8004fae:	d007      	beq.n	8004fc0 <HAL_TIM_PWM_Start+0x158>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004fbe:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	4a20      	ldr	r2, [pc, #128]	@ (8005048 <HAL_TIM_PWM_Start+0x1e0>)
 8004fc6:	4293      	cmp	r3, r2
 8004fc8:	d018      	beq.n	8004ffc <HAL_TIM_PWM_Start+0x194>
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004fd2:	d013      	beq.n	8004ffc <HAL_TIM_PWM_Start+0x194>
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	4a20      	ldr	r2, [pc, #128]	@ (800505c <HAL_TIM_PWM_Start+0x1f4>)
 8004fda:	4293      	cmp	r3, r2
 8004fdc:	d00e      	beq.n	8004ffc <HAL_TIM_PWM_Start+0x194>
 8004fde:	687b      	ldr	r3, [r7, #4]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	4a1f      	ldr	r2, [pc, #124]	@ (8005060 <HAL_TIM_PWM_Start+0x1f8>)
 8004fe4:	4293      	cmp	r3, r2
 8004fe6:	d009      	beq.n	8004ffc <HAL_TIM_PWM_Start+0x194>
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	4a17      	ldr	r2, [pc, #92]	@ (800504c <HAL_TIM_PWM_Start+0x1e4>)
 8004fee:	4293      	cmp	r3, r2
 8004ff0:	d004      	beq.n	8004ffc <HAL_TIM_PWM_Start+0x194>
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	4a16      	ldr	r2, [pc, #88]	@ (8005050 <HAL_TIM_PWM_Start+0x1e8>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d115      	bne.n	8005028 <HAL_TIM_PWM_Start+0x1c0>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	689a      	ldr	r2, [r3, #8]
 8005002:	4b18      	ldr	r3, [pc, #96]	@ (8005064 <HAL_TIM_PWM_Start+0x1fc>)
 8005004:	4013      	ands	r3, r2
 8005006:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	2b06      	cmp	r3, #6
 800500c:	d015      	beq.n	800503a <HAL_TIM_PWM_Start+0x1d2>
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005014:	d011      	beq.n	800503a <HAL_TIM_PWM_Start+0x1d2>
    {
      __HAL_TIM_ENABLE(htim);
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681a      	ldr	r2, [r3, #0]
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	f042 0201 	orr.w	r2, r2, #1
 8005024:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005026:	e008      	b.n	800503a <HAL_TIM_PWM_Start+0x1d2>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681a      	ldr	r2, [r3, #0]
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	f042 0201 	orr.w	r2, r2, #1
 8005036:	601a      	str	r2, [r3, #0]
 8005038:	e000      	b.n	800503c <HAL_TIM_PWM_Start+0x1d4>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800503a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800503c:	2300      	movs	r3, #0
}
 800503e:	4618      	mov	r0, r3
 8005040:	3710      	adds	r7, #16
 8005042:	46bd      	mov	sp, r7
 8005044:	bd80      	pop	{r7, pc}
 8005046:	bf00      	nop
 8005048:	40012c00 	.word	0x40012c00
 800504c:	40013400 	.word	0x40013400
 8005050:	40014000 	.word	0x40014000
 8005054:	40014400 	.word	0x40014400
 8005058:	40014800 	.word	0x40014800
 800505c:	40000400 	.word	0x40000400
 8005060:	40000800 	.word	0x40000800
 8005064:	00010007 	.word	0x00010007

08005068 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	68db      	ldr	r3, [r3, #12]
 8005076:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	691b      	ldr	r3, [r3, #16]
 800507e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005080:	68bb      	ldr	r3, [r7, #8]
 8005082:	f003 0302 	and.w	r3, r3, #2
 8005086:	2b00      	cmp	r3, #0
 8005088:	d020      	beq.n	80050cc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	f003 0302 	and.w	r3, r3, #2
 8005090:	2b00      	cmp	r3, #0
 8005092:	d01b      	beq.n	80050cc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f06f 0202 	mvn.w	r2, #2
 800509c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	2201      	movs	r2, #1
 80050a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	699b      	ldr	r3, [r3, #24]
 80050aa:	f003 0303 	and.w	r3, r3, #3
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d003      	beq.n	80050ba <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 fb40 	bl	8005738 <HAL_TIM_IC_CaptureCallback>
 80050b8:	e005      	b.n	80050c6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80050ba:	6878      	ldr	r0, [r7, #4]
 80050bc:	f000 fb32 	bl	8005724 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80050c0:	6878      	ldr	r0, [r7, #4]
 80050c2:	f000 fb43 	bl	800574c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2200      	movs	r2, #0
 80050ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80050cc:	68bb      	ldr	r3, [r7, #8]
 80050ce:	f003 0304 	and.w	r3, r3, #4
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d020      	beq.n	8005118 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	f003 0304 	and.w	r3, r3, #4
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d01b      	beq.n	8005118 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	f06f 0204 	mvn.w	r2, #4
 80050e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2202      	movs	r2, #2
 80050ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	699b      	ldr	r3, [r3, #24]
 80050f6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80050fe:	6878      	ldr	r0, [r7, #4]
 8005100:	f000 fb1a 	bl	8005738 <HAL_TIM_IC_CaptureCallback>
 8005104:	e005      	b.n	8005112 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005106:	6878      	ldr	r0, [r7, #4]
 8005108:	f000 fb0c 	bl	8005724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800510c:	6878      	ldr	r0, [r7, #4]
 800510e:	f000 fb1d 	bl	800574c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2200      	movs	r2, #0
 8005116:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8005118:	68bb      	ldr	r3, [r7, #8]
 800511a:	f003 0308 	and.w	r3, r3, #8
 800511e:	2b00      	cmp	r3, #0
 8005120:	d020      	beq.n	8005164 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	f003 0308 	and.w	r3, r3, #8
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01b      	beq.n	8005164 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f06f 0208 	mvn.w	r2, #8
 8005134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	2204      	movs	r2, #4
 800513a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	69db      	ldr	r3, [r3, #28]
 8005142:	f003 0303 	and.w	r3, r3, #3
 8005146:	2b00      	cmp	r3, #0
 8005148:	d003      	beq.n	8005152 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800514a:	6878      	ldr	r0, [r7, #4]
 800514c:	f000 faf4 	bl	8005738 <HAL_TIM_IC_CaptureCallback>
 8005150:	e005      	b.n	800515e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 fae6 	bl	8005724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005158:	6878      	ldr	r0, [r7, #4]
 800515a:	f000 faf7 	bl	800574c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	2200      	movs	r2, #0
 8005162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	f003 0310 	and.w	r3, r3, #16
 800516a:	2b00      	cmp	r3, #0
 800516c:	d020      	beq.n	80051b0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f003 0310 	and.w	r3, r3, #16
 8005174:	2b00      	cmp	r3, #0
 8005176:	d01b      	beq.n	80051b0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	681b      	ldr	r3, [r3, #0]
 800517c:	f06f 0210 	mvn.w	r2, #16
 8005180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	2208      	movs	r2, #8
 8005186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	69db      	ldr	r3, [r3, #28]
 800518e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005192:	2b00      	cmp	r3, #0
 8005194:	d003      	beq.n	800519e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 face 	bl	8005738 <HAL_TIM_IC_CaptureCallback>
 800519c:	e005      	b.n	80051aa <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800519e:	6878      	ldr	r0, [r7, #4]
 80051a0:	f000 fac0 	bl	8005724 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051a4:	6878      	ldr	r0, [r7, #4]
 80051a6:	f000 fad1 	bl	800574c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	2200      	movs	r2, #0
 80051ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	f003 0301 	and.w	r3, r3, #1
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d00c      	beq.n	80051d4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	f003 0301 	and.w	r3, r3, #1
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d007      	beq.n	80051d4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	f06f 0201 	mvn.w	r2, #1
 80051cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80051ce:	6878      	ldr	r0, [r7, #4]
 80051d0:	f7fb fe58 	bl	8000e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80051d4:	68bb      	ldr	r3, [r7, #8]
 80051d6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d104      	bne.n	80051e8 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80051de:	68bb      	ldr	r3, [r7, #8]
 80051e0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80051e4:	2b00      	cmp	r3, #0
 80051e6:	d00c      	beq.n	8005202 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d007      	beq.n	8005202 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 80051fa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80051fc:	6878      	ldr	r0, [r7, #4]
 80051fe:	f001 f825 	bl	800624c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005202:	68bb      	ldr	r3, [r7, #8]
 8005204:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005208:	2b00      	cmp	r3, #0
 800520a:	d00c      	beq.n	8005226 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005212:	2b00      	cmp	r3, #0
 8005214:	d007      	beq.n	8005226 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800521e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005220:	6878      	ldr	r0, [r7, #4]
 8005222:	f001 f81d 	bl	8006260 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800522c:	2b00      	cmp	r3, #0
 800522e:	d00c      	beq.n	800524a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005236:	2b00      	cmp	r3, #0
 8005238:	d007      	beq.n	800524a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005242:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005244:	6878      	ldr	r0, [r7, #4]
 8005246:	f000 fa8b 	bl	8005760 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800524a:	68bb      	ldr	r3, [r7, #8]
 800524c:	f003 0320 	and.w	r3, r3, #32
 8005250:	2b00      	cmp	r3, #0
 8005252:	d00c      	beq.n	800526e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	f003 0320 	and.w	r3, r3, #32
 800525a:	2b00      	cmp	r3, #0
 800525c:	d007      	beq.n	800526e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f06f 0220 	mvn.w	r2, #32
 8005266:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005268:	6878      	ldr	r0, [r7, #4]
 800526a:	f000 ffe5 	bl	8006238 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800526e:	68bb      	ldr	r3, [r7, #8]
 8005270:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005274:	2b00      	cmp	r3, #0
 8005276:	d00c      	beq.n	8005292 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 8005278:	68fb      	ldr	r3, [r7, #12]
 800527a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800527e:	2b00      	cmp	r3, #0
 8005280:	d007      	beq.n	8005292 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 800528a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 800528c:	6878      	ldr	r0, [r7, #4]
 800528e:	f000 fff1 	bl	8006274 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005298:	2b00      	cmp	r3, #0
 800529a:	d00c      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d007      	beq.n	80052b6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80052ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80052b0:	6878      	ldr	r0, [r7, #4]
 80052b2:	f000 ffe9 	bl	8006288 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80052b6:	68bb      	ldr	r3, [r7, #8]
 80052b8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d00c      	beq.n	80052da <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80052c0:	68fb      	ldr	r3, [r7, #12]
 80052c2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d007      	beq.n	80052da <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	681b      	ldr	r3, [r3, #0]
 80052ce:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80052d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80052d4:	6878      	ldr	r0, [r7, #4]
 80052d6:	f000 ffe1 	bl	800629c <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80052da:	68bb      	ldr	r3, [r7, #8]
 80052dc:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d00c      	beq.n	80052fe <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d007      	beq.n	80052fe <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 80052f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f000 ffd9 	bl	80062b0 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052fe:	bf00      	nop
 8005300:	3710      	adds	r7, #16
 8005302:	46bd      	mov	sp, r7
 8005304:	bd80      	pop	{r7, pc}
	...

08005308 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005308:	b580      	push	{r7, lr}
 800530a:	b086      	sub	sp, #24
 800530c:	af00      	add	r7, sp, #0
 800530e:	60f8      	str	r0, [r7, #12]
 8005310:	60b9      	str	r1, [r7, #8]
 8005312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005314:	2300      	movs	r3, #0
 8005316:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800531e:	2b01      	cmp	r3, #1
 8005320:	d101      	bne.n	8005326 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005322:	2302      	movs	r3, #2
 8005324:	e0ff      	b.n	8005526 <HAL_TIM_PWM_ConfigChannel+0x21e>
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	2201      	movs	r2, #1
 800532a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2b14      	cmp	r3, #20
 8005332:	f200 80f0 	bhi.w	8005516 <HAL_TIM_PWM_ConfigChannel+0x20e>
 8005336:	a201      	add	r2, pc, #4	@ (adr r2, 800533c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005338:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800533c:	08005391 	.word	0x08005391
 8005340:	08005517 	.word	0x08005517
 8005344:	08005517 	.word	0x08005517
 8005348:	08005517 	.word	0x08005517
 800534c:	080053d1 	.word	0x080053d1
 8005350:	08005517 	.word	0x08005517
 8005354:	08005517 	.word	0x08005517
 8005358:	08005517 	.word	0x08005517
 800535c:	08005413 	.word	0x08005413
 8005360:	08005517 	.word	0x08005517
 8005364:	08005517 	.word	0x08005517
 8005368:	08005517 	.word	0x08005517
 800536c:	08005453 	.word	0x08005453
 8005370:	08005517 	.word	0x08005517
 8005374:	08005517 	.word	0x08005517
 8005378:	08005517 	.word	0x08005517
 800537c:	08005495 	.word	0x08005495
 8005380:	08005517 	.word	0x08005517
 8005384:	08005517 	.word	0x08005517
 8005388:	08005517 	.word	0x08005517
 800538c:	080054d5 	.word	0x080054d5
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	68b9      	ldr	r1, [r7, #8]
 8005396:	4618      	mov	r0, r3
 8005398:	f000 fa88 	bl	80058ac <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	699a      	ldr	r2, [r3, #24]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f042 0208 	orr.w	r2, r2, #8
 80053aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	699a      	ldr	r2, [r3, #24]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f022 0204 	bic.w	r2, r2, #4
 80053ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80053bc:	68fb      	ldr	r3, [r7, #12]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	6999      	ldr	r1, [r3, #24]
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	691a      	ldr	r2, [r3, #16]
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	681b      	ldr	r3, [r3, #0]
 80053ca:	430a      	orrs	r2, r1
 80053cc:	619a      	str	r2, [r3, #24]
      break;
 80053ce:	e0a5      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	68b9      	ldr	r1, [r7, #8]
 80053d6:	4618      	mov	r0, r3
 80053d8:	f000 faf8 	bl	80059cc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	699a      	ldr	r2, [r3, #24]
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	699a      	ldr	r2, [r3, #24]
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80053fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	6999      	ldr	r1, [r3, #24]
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	691b      	ldr	r3, [r3, #16]
 8005406:	021a      	lsls	r2, r3, #8
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	430a      	orrs	r2, r1
 800540e:	619a      	str	r2, [r3, #24]
      break;
 8005410:	e084      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	4618      	mov	r0, r3
 800541a:	f000 fb61 	bl	8005ae0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	69da      	ldr	r2, [r3, #28]
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f042 0208 	orr.w	r2, r2, #8
 800542c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	69da      	ldr	r2, [r3, #28]
 8005434:	68fb      	ldr	r3, [r7, #12]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f022 0204 	bic.w	r2, r2, #4
 800543c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800543e:	68fb      	ldr	r3, [r7, #12]
 8005440:	681b      	ldr	r3, [r3, #0]
 8005442:	69d9      	ldr	r1, [r3, #28]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	691a      	ldr	r2, [r3, #16]
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	430a      	orrs	r2, r1
 800544e:	61da      	str	r2, [r3, #28]
      break;
 8005450:	e064      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	68b9      	ldr	r1, [r7, #8]
 8005458:	4618      	mov	r0, r3
 800545a:	f000 fbc9 	bl	8005bf0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800545e:	68fb      	ldr	r3, [r7, #12]
 8005460:	681b      	ldr	r3, [r3, #0]
 8005462:	69da      	ldr	r2, [r3, #28]
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800546c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	69da      	ldr	r2, [r3, #28]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800547c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	69d9      	ldr	r1, [r3, #28]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	691b      	ldr	r3, [r3, #16]
 8005488:	021a      	lsls	r2, r3, #8
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	61da      	str	r2, [r3, #28]
      break;
 8005492:	e043      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8005494:	68fb      	ldr	r3, [r7, #12]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	68b9      	ldr	r1, [r7, #8]
 800549a:	4618      	mov	r0, r3
 800549c:	f000 fc32 	bl	8005d04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f042 0208 	orr.w	r2, r2, #8
 80054ae:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f022 0204 	bic.w	r2, r2, #4
 80054be:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80054c6:	68bb      	ldr	r3, [r7, #8]
 80054c8:	691a      	ldr	r2, [r3, #16]
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	430a      	orrs	r2, r1
 80054d0:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 80054d2:	e023      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	68b9      	ldr	r1, [r7, #8]
 80054da:	4618      	mov	r0, r3
 80054dc:	f000 fc76 	bl	8005dcc <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054ee:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054fe:	651a      	str	r2, [r3, #80]	@ 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 8005506:	68bb      	ldr	r3, [r7, #8]
 8005508:	691b      	ldr	r3, [r3, #16]
 800550a:	021a      	lsls	r2, r3, #8
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	430a      	orrs	r2, r1
 8005512:	651a      	str	r2, [r3, #80]	@ 0x50
      break;
 8005514:	e002      	b.n	800551c <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8005516:	2301      	movs	r3, #1
 8005518:	75fb      	strb	r3, [r7, #23]
      break;
 800551a:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	2200      	movs	r2, #0
 8005520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005524:	7dfb      	ldrb	r3, [r7, #23]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3718      	adds	r7, #24
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}
 800552e:	bf00      	nop

08005530 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005530:	b580      	push	{r7, lr}
 8005532:	b084      	sub	sp, #16
 8005534:	af00      	add	r7, sp, #0
 8005536:	6078      	str	r0, [r7, #4]
 8005538:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800553a:	2300      	movs	r3, #0
 800553c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005544:	2b01      	cmp	r3, #1
 8005546:	d101      	bne.n	800554c <HAL_TIM_ConfigClockSource+0x1c>
 8005548:	2302      	movs	r3, #2
 800554a:	e0de      	b.n	800570a <HAL_TIM_ConfigClockSource+0x1da>
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	2201      	movs	r2, #1
 8005550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	2202      	movs	r2, #2
 8005558:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	689b      	ldr	r3, [r3, #8]
 8005562:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005564:	68bb      	ldr	r3, [r7, #8]
 8005566:	f423 1344 	bic.w	r3, r3, #3211264	@ 0x310000
 800556a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800556e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005570:	68bb      	ldr	r3, [r7, #8]
 8005572:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005576:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005578:	687b      	ldr	r3, [r7, #4]
 800557a:	681b      	ldr	r3, [r3, #0]
 800557c:	68ba      	ldr	r2, [r7, #8]
 800557e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005580:	683b      	ldr	r3, [r7, #0]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	4a63      	ldr	r2, [pc, #396]	@ (8005714 <HAL_TIM_ConfigClockSource+0x1e4>)
 8005586:	4293      	cmp	r3, r2
 8005588:	f000 80a9 	beq.w	80056de <HAL_TIM_ConfigClockSource+0x1ae>
 800558c:	4a61      	ldr	r2, [pc, #388]	@ (8005714 <HAL_TIM_ConfigClockSource+0x1e4>)
 800558e:	4293      	cmp	r3, r2
 8005590:	f200 80ae 	bhi.w	80056f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005594:	4a60      	ldr	r2, [pc, #384]	@ (8005718 <HAL_TIM_ConfigClockSource+0x1e8>)
 8005596:	4293      	cmp	r3, r2
 8005598:	f000 80a1 	beq.w	80056de <HAL_TIM_ConfigClockSource+0x1ae>
 800559c:	4a5e      	ldr	r2, [pc, #376]	@ (8005718 <HAL_TIM_ConfigClockSource+0x1e8>)
 800559e:	4293      	cmp	r3, r2
 80055a0:	f200 80a6 	bhi.w	80056f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80055a4:	4a5d      	ldr	r2, [pc, #372]	@ (800571c <HAL_TIM_ConfigClockSource+0x1ec>)
 80055a6:	4293      	cmp	r3, r2
 80055a8:	f000 8099 	beq.w	80056de <HAL_TIM_ConfigClockSource+0x1ae>
 80055ac:	4a5b      	ldr	r2, [pc, #364]	@ (800571c <HAL_TIM_ConfigClockSource+0x1ec>)
 80055ae:	4293      	cmp	r3, r2
 80055b0:	f200 809e 	bhi.w	80056f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80055b4:	4a5a      	ldr	r2, [pc, #360]	@ (8005720 <HAL_TIM_ConfigClockSource+0x1f0>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	f000 8091 	beq.w	80056de <HAL_TIM_ConfigClockSource+0x1ae>
 80055bc:	4a58      	ldr	r2, [pc, #352]	@ (8005720 <HAL_TIM_ConfigClockSource+0x1f0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	f200 8096 	bhi.w	80056f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80055c4:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80055c8:	f000 8089 	beq.w	80056de <HAL_TIM_ConfigClockSource+0x1ae>
 80055cc:	f1b3 1f10 	cmp.w	r3, #1048592	@ 0x100010
 80055d0:	f200 808e 	bhi.w	80056f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80055d4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055d8:	d03e      	beq.n	8005658 <HAL_TIM_ConfigClockSource+0x128>
 80055da:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055de:	f200 8087 	bhi.w	80056f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80055e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055e6:	f000 8086 	beq.w	80056f6 <HAL_TIM_ConfigClockSource+0x1c6>
 80055ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ee:	d87f      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80055f0:	2b70      	cmp	r3, #112	@ 0x70
 80055f2:	d01a      	beq.n	800562a <HAL_TIM_ConfigClockSource+0xfa>
 80055f4:	2b70      	cmp	r3, #112	@ 0x70
 80055f6:	d87b      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x1c0>
 80055f8:	2b60      	cmp	r3, #96	@ 0x60
 80055fa:	d050      	beq.n	800569e <HAL_TIM_ConfigClockSource+0x16e>
 80055fc:	2b60      	cmp	r3, #96	@ 0x60
 80055fe:	d877      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005600:	2b50      	cmp	r3, #80	@ 0x50
 8005602:	d03c      	beq.n	800567e <HAL_TIM_ConfigClockSource+0x14e>
 8005604:	2b50      	cmp	r3, #80	@ 0x50
 8005606:	d873      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005608:	2b40      	cmp	r3, #64	@ 0x40
 800560a:	d058      	beq.n	80056be <HAL_TIM_ConfigClockSource+0x18e>
 800560c:	2b40      	cmp	r3, #64	@ 0x40
 800560e:	d86f      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005610:	2b30      	cmp	r3, #48	@ 0x30
 8005612:	d064      	beq.n	80056de <HAL_TIM_ConfigClockSource+0x1ae>
 8005614:	2b30      	cmp	r3, #48	@ 0x30
 8005616:	d86b      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005618:	2b20      	cmp	r3, #32
 800561a:	d060      	beq.n	80056de <HAL_TIM_ConfigClockSource+0x1ae>
 800561c:	2b20      	cmp	r3, #32
 800561e:	d867      	bhi.n	80056f0 <HAL_TIM_ConfigClockSource+0x1c0>
 8005620:	2b00      	cmp	r3, #0
 8005622:	d05c      	beq.n	80056de <HAL_TIM_ConfigClockSource+0x1ae>
 8005624:	2b10      	cmp	r3, #16
 8005626:	d05a      	beq.n	80056de <HAL_TIM_ConfigClockSource+0x1ae>
 8005628:	e062      	b.n	80056f0 <HAL_TIM_ConfigClockSource+0x1c0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005636:	683b      	ldr	r3, [r7, #0]
 8005638:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800563a:	f000 fca9 	bl	8005f90 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 800564c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	68ba      	ldr	r2, [r7, #8]
 8005654:	609a      	str	r2, [r3, #8]
      break;
 8005656:	e04f      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x1c8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005668:	f000 fc92 	bl	8005f90 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689a      	ldr	r2, [r3, #8]
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	681b      	ldr	r3, [r3, #0]
 8005676:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800567a:	609a      	str	r2, [r3, #8]
      break;
 800567c:	e03c      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005686:	683b      	ldr	r3, [r7, #0]
 8005688:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800568a:	461a      	mov	r2, r3
 800568c:	f000 fc04 	bl	8005e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	2150      	movs	r1, #80	@ 0x50
 8005696:	4618      	mov	r0, r3
 8005698:	f000 fc5d 	bl	8005f56 <TIM_ITRx_SetConfig>
      break;
 800569c:	e02c      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056aa:	461a      	mov	r2, r3
 80056ac:	f000 fc23 	bl	8005ef6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	2160      	movs	r1, #96	@ 0x60
 80056b6:	4618      	mov	r0, r3
 80056b8:	f000 fc4d 	bl	8005f56 <TIM_ITRx_SetConfig>
      break;
 80056bc:	e01c      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x1c8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056c6:	683b      	ldr	r3, [r7, #0]
 80056c8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ca:	461a      	mov	r2, r3
 80056cc:	f000 fbe4 	bl	8005e98 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	2140      	movs	r1, #64	@ 0x40
 80056d6:	4618      	mov	r0, r3
 80056d8:	f000 fc3d 	bl	8005f56 <TIM_ITRx_SetConfig>
      break;
 80056dc:	e00c      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x1c8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	683b      	ldr	r3, [r7, #0]
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4619      	mov	r1, r3
 80056e8:	4610      	mov	r0, r2
 80056ea:	f000 fc34 	bl	8005f56 <TIM_ITRx_SetConfig>
      break;
 80056ee:	e003      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x1c8>
    }

    default:
      status = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	73fb      	strb	r3, [r7, #15]
      break;
 80056f4:	e000      	b.n	80056f8 <HAL_TIM_ConfigClockSource+0x1c8>
      break;
 80056f6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	2201      	movs	r2, #1
 80056fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005700:	687b      	ldr	r3, [r7, #4]
 8005702:	2200      	movs	r2, #0
 8005704:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005708:	7bfb      	ldrb	r3, [r7, #15]
}
 800570a:	4618      	mov	r0, r3
 800570c:	3710      	adds	r7, #16
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}
 8005712:	bf00      	nop
 8005714:	00100070 	.word	0x00100070
 8005718:	00100040 	.word	0x00100040
 800571c:	00100030 	.word	0x00100030
 8005720:	00100020 	.word	0x00100020

08005724 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005724:	b480      	push	{r7}
 8005726:	b083      	sub	sp, #12
 8005728:	af00      	add	r7, sp, #0
 800572a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800572c:	bf00      	nop
 800572e:	370c      	adds	r7, #12
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005740:	bf00      	nop
 8005742:	370c      	adds	r7, #12
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800574c:	b480      	push	{r7}
 800574e:	b083      	sub	sp, #12
 8005750:	af00      	add	r7, sp, #0
 8005752:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005754:	bf00      	nop
 8005756:	370c      	adds	r7, #12
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005760:	b480      	push	{r7}
 8005762:	b083      	sub	sp, #12
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005768:	bf00      	nop
 800576a:	370c      	adds	r7, #12
 800576c:	46bd      	mov	sp, r7
 800576e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005772:	4770      	bx	lr

08005774 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005774:	b480      	push	{r7}
 8005776:	b085      	sub	sp, #20
 8005778:	af00      	add	r7, sp, #0
 800577a:	6078      	str	r0, [r7, #4]
 800577c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	4a42      	ldr	r2, [pc, #264]	@ (8005890 <TIM_Base_SetConfig+0x11c>)
 8005788:	4293      	cmp	r3, r2
 800578a:	d00f      	beq.n	80057ac <TIM_Base_SetConfig+0x38>
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005792:	d00b      	beq.n	80057ac <TIM_Base_SetConfig+0x38>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	4a3f      	ldr	r2, [pc, #252]	@ (8005894 <TIM_Base_SetConfig+0x120>)
 8005798:	4293      	cmp	r3, r2
 800579a:	d007      	beq.n	80057ac <TIM_Base_SetConfig+0x38>
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	4a3e      	ldr	r2, [pc, #248]	@ (8005898 <TIM_Base_SetConfig+0x124>)
 80057a0:	4293      	cmp	r3, r2
 80057a2:	d003      	beq.n	80057ac <TIM_Base_SetConfig+0x38>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	4a3d      	ldr	r2, [pc, #244]	@ (800589c <TIM_Base_SetConfig+0x128>)
 80057a8:	4293      	cmp	r3, r2
 80057aa:	d108      	bne.n	80057be <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	685b      	ldr	r3, [r3, #4]
 80057b8:	68fa      	ldr	r2, [r7, #12]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	4a33      	ldr	r2, [pc, #204]	@ (8005890 <TIM_Base_SetConfig+0x11c>)
 80057c2:	4293      	cmp	r3, r2
 80057c4:	d01b      	beq.n	80057fe <TIM_Base_SetConfig+0x8a>
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057cc:	d017      	beq.n	80057fe <TIM_Base_SetConfig+0x8a>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	4a30      	ldr	r2, [pc, #192]	@ (8005894 <TIM_Base_SetConfig+0x120>)
 80057d2:	4293      	cmp	r3, r2
 80057d4:	d013      	beq.n	80057fe <TIM_Base_SetConfig+0x8a>
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	4a2f      	ldr	r2, [pc, #188]	@ (8005898 <TIM_Base_SetConfig+0x124>)
 80057da:	4293      	cmp	r3, r2
 80057dc:	d00f      	beq.n	80057fe <TIM_Base_SetConfig+0x8a>
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	4a2e      	ldr	r2, [pc, #184]	@ (800589c <TIM_Base_SetConfig+0x128>)
 80057e2:	4293      	cmp	r3, r2
 80057e4:	d00b      	beq.n	80057fe <TIM_Base_SetConfig+0x8a>
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	4a2d      	ldr	r2, [pc, #180]	@ (80058a0 <TIM_Base_SetConfig+0x12c>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d007      	beq.n	80057fe <TIM_Base_SetConfig+0x8a>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	4a2c      	ldr	r2, [pc, #176]	@ (80058a4 <TIM_Base_SetConfig+0x130>)
 80057f2:	4293      	cmp	r3, r2
 80057f4:	d003      	beq.n	80057fe <TIM_Base_SetConfig+0x8a>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4a2b      	ldr	r2, [pc, #172]	@ (80058a8 <TIM_Base_SetConfig+0x134>)
 80057fa:	4293      	cmp	r3, r2
 80057fc:	d108      	bne.n	8005810 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005804:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005806:	683b      	ldr	r3, [r7, #0]
 8005808:	68db      	ldr	r3, [r3, #12]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	4313      	orrs	r3, r2
 800580e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8005816:	683b      	ldr	r3, [r7, #0]
 8005818:	695b      	ldr	r3, [r3, #20]
 800581a:	4313      	orrs	r3, r2
 800581c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	68fa      	ldr	r2, [r7, #12]
 8005822:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	689a      	ldr	r2, [r3, #8]
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	681a      	ldr	r2, [r3, #0]
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	4a16      	ldr	r2, [pc, #88]	@ (8005890 <TIM_Base_SetConfig+0x11c>)
 8005838:	4293      	cmp	r3, r2
 800583a:	d00f      	beq.n	800585c <TIM_Base_SetConfig+0xe8>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	4a17      	ldr	r2, [pc, #92]	@ (800589c <TIM_Base_SetConfig+0x128>)
 8005840:	4293      	cmp	r3, r2
 8005842:	d00b      	beq.n	800585c <TIM_Base_SetConfig+0xe8>
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	4a16      	ldr	r2, [pc, #88]	@ (80058a0 <TIM_Base_SetConfig+0x12c>)
 8005848:	4293      	cmp	r3, r2
 800584a:	d007      	beq.n	800585c <TIM_Base_SetConfig+0xe8>
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	4a15      	ldr	r2, [pc, #84]	@ (80058a4 <TIM_Base_SetConfig+0x130>)
 8005850:	4293      	cmp	r3, r2
 8005852:	d003      	beq.n	800585c <TIM_Base_SetConfig+0xe8>
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	4a14      	ldr	r2, [pc, #80]	@ (80058a8 <TIM_Base_SetConfig+0x134>)
 8005858:	4293      	cmp	r3, r2
 800585a:	d103      	bne.n	8005864 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800585c:	683b      	ldr	r3, [r7, #0]
 800585e:	691a      	ldr	r2, [r3, #16]
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	f003 0301 	and.w	r3, r3, #1
 8005872:	2b01      	cmp	r3, #1
 8005874:	d105      	bne.n	8005882 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	691b      	ldr	r3, [r3, #16]
 800587a:	f023 0201 	bic.w	r2, r3, #1
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	611a      	str	r2, [r3, #16]
  }
}
 8005882:	bf00      	nop
 8005884:	3714      	adds	r7, #20
 8005886:	46bd      	mov	sp, r7
 8005888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800588c:	4770      	bx	lr
 800588e:	bf00      	nop
 8005890:	40012c00 	.word	0x40012c00
 8005894:	40000400 	.word	0x40000400
 8005898:	40000800 	.word	0x40000800
 800589c:	40013400 	.word	0x40013400
 80058a0:	40014000 	.word	0x40014000
 80058a4:	40014400 	.word	0x40014400
 80058a8:	40014800 	.word	0x40014800

080058ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058ac:	b480      	push	{r7}
 80058ae:	b087      	sub	sp, #28
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
 80058b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	6a1b      	ldr	r3, [r3, #32]
 80058ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6a1b      	ldr	r3, [r3, #32]
 80058c0:	f023 0201 	bic.w	r2, r3, #1
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	685b      	ldr	r3, [r3, #4]
 80058cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	699b      	ldr	r3, [r3, #24]
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80058da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0303 	bic.w	r3, r3, #3
 80058e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058e8:	683b      	ldr	r3, [r7, #0]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	68fa      	ldr	r2, [r7, #12]
 80058ee:	4313      	orrs	r3, r2
 80058f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058f2:	697b      	ldr	r3, [r7, #20]
 80058f4:	f023 0302 	bic.w	r3, r3, #2
 80058f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80058fa:	683b      	ldr	r3, [r7, #0]
 80058fc:	689b      	ldr	r3, [r3, #8]
 80058fe:	697a      	ldr	r2, [r7, #20]
 8005900:	4313      	orrs	r3, r2
 8005902:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	4a2c      	ldr	r2, [pc, #176]	@ (80059b8 <TIM_OC1_SetConfig+0x10c>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d00f      	beq.n	800592c <TIM_OC1_SetConfig+0x80>
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a2b      	ldr	r2, [pc, #172]	@ (80059bc <TIM_OC1_SetConfig+0x110>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d00b      	beq.n	800592c <TIM_OC1_SetConfig+0x80>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a2a      	ldr	r2, [pc, #168]	@ (80059c0 <TIM_OC1_SetConfig+0x114>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d007      	beq.n	800592c <TIM_OC1_SetConfig+0x80>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a29      	ldr	r2, [pc, #164]	@ (80059c4 <TIM_OC1_SetConfig+0x118>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d003      	beq.n	800592c <TIM_OC1_SetConfig+0x80>
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	4a28      	ldr	r2, [pc, #160]	@ (80059c8 <TIM_OC1_SetConfig+0x11c>)
 8005928:	4293      	cmp	r3, r2
 800592a:	d10c      	bne.n	8005946 <TIM_OC1_SetConfig+0x9a>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	f023 0308 	bic.w	r3, r3, #8
 8005932:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	68db      	ldr	r3, [r3, #12]
 8005938:	697a      	ldr	r2, [r7, #20]
 800593a:	4313      	orrs	r3, r2
 800593c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800593e:	697b      	ldr	r3, [r7, #20]
 8005940:	f023 0304 	bic.w	r3, r3, #4
 8005944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	4a1b      	ldr	r2, [pc, #108]	@ (80059b8 <TIM_OC1_SetConfig+0x10c>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d00f      	beq.n	800596e <TIM_OC1_SetConfig+0xc2>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	4a1a      	ldr	r2, [pc, #104]	@ (80059bc <TIM_OC1_SetConfig+0x110>)
 8005952:	4293      	cmp	r3, r2
 8005954:	d00b      	beq.n	800596e <TIM_OC1_SetConfig+0xc2>
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	4a19      	ldr	r2, [pc, #100]	@ (80059c0 <TIM_OC1_SetConfig+0x114>)
 800595a:	4293      	cmp	r3, r2
 800595c:	d007      	beq.n	800596e <TIM_OC1_SetConfig+0xc2>
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	4a18      	ldr	r2, [pc, #96]	@ (80059c4 <TIM_OC1_SetConfig+0x118>)
 8005962:	4293      	cmp	r3, r2
 8005964:	d003      	beq.n	800596e <TIM_OC1_SetConfig+0xc2>
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	4a17      	ldr	r2, [pc, #92]	@ (80059c8 <TIM_OC1_SetConfig+0x11c>)
 800596a:	4293      	cmp	r3, r2
 800596c:	d111      	bne.n	8005992 <TIM_OC1_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800596e:	693b      	ldr	r3, [r7, #16]
 8005970:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005974:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005976:	693b      	ldr	r3, [r7, #16]
 8005978:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800597c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	695b      	ldr	r3, [r3, #20]
 8005982:	693a      	ldr	r2, [r7, #16]
 8005984:	4313      	orrs	r3, r2
 8005986:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	699b      	ldr	r3, [r3, #24]
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	4313      	orrs	r3, r2
 8005990:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	693a      	ldr	r2, [r7, #16]
 8005996:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	68fa      	ldr	r2, [r7, #12]
 800599c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	685a      	ldr	r2, [r3, #4]
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	697a      	ldr	r2, [r7, #20]
 80059aa:	621a      	str	r2, [r3, #32]
}
 80059ac:	bf00      	nop
 80059ae:	371c      	adds	r7, #28
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr
 80059b8:	40012c00 	.word	0x40012c00
 80059bc:	40013400 	.word	0x40013400
 80059c0:	40014000 	.word	0x40014000
 80059c4:	40014400 	.word	0x40014400
 80059c8:	40014800 	.word	0x40014800

080059cc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b087      	sub	sp, #28
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6a1b      	ldr	r3, [r3, #32]
 80059da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	6a1b      	ldr	r3, [r3, #32]
 80059e0:	f023 0210 	bic.w	r2, r3, #16
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	685b      	ldr	r3, [r3, #4]
 80059ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	699b      	ldr	r3, [r3, #24]
 80059f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80059fa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005a06:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	021b      	lsls	r3, r3, #8
 8005a0e:	68fa      	ldr	r2, [r7, #12]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f023 0320 	bic.w	r3, r3, #32
 8005a1a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	689b      	ldr	r3, [r3, #8]
 8005a20:	011b      	lsls	r3, r3, #4
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	4a28      	ldr	r2, [pc, #160]	@ (8005acc <TIM_OC2_SetConfig+0x100>)
 8005a2c:	4293      	cmp	r3, r2
 8005a2e:	d003      	beq.n	8005a38 <TIM_OC2_SetConfig+0x6c>
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	4a27      	ldr	r2, [pc, #156]	@ (8005ad0 <TIM_OC2_SetConfig+0x104>)
 8005a34:	4293      	cmp	r3, r2
 8005a36:	d10d      	bne.n	8005a54 <TIM_OC2_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a38:	697b      	ldr	r3, [r7, #20]
 8005a3a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a3e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	68db      	ldr	r3, [r3, #12]
 8005a44:	011b      	lsls	r3, r3, #4
 8005a46:	697a      	ldr	r2, [r7, #20]
 8005a48:	4313      	orrs	r3, r2
 8005a4a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a52:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	4a1d      	ldr	r2, [pc, #116]	@ (8005acc <TIM_OC2_SetConfig+0x100>)
 8005a58:	4293      	cmp	r3, r2
 8005a5a:	d00f      	beq.n	8005a7c <TIM_OC2_SetConfig+0xb0>
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	4a1c      	ldr	r2, [pc, #112]	@ (8005ad0 <TIM_OC2_SetConfig+0x104>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d00b      	beq.n	8005a7c <TIM_OC2_SetConfig+0xb0>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4a1b      	ldr	r2, [pc, #108]	@ (8005ad4 <TIM_OC2_SetConfig+0x108>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d007      	beq.n	8005a7c <TIM_OC2_SetConfig+0xb0>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	4a1a      	ldr	r2, [pc, #104]	@ (8005ad8 <TIM_OC2_SetConfig+0x10c>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d003      	beq.n	8005a7c <TIM_OC2_SetConfig+0xb0>
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	4a19      	ldr	r2, [pc, #100]	@ (8005adc <TIM_OC2_SetConfig+0x110>)
 8005a78:	4293      	cmp	r3, r2
 8005a7a:	d113      	bne.n	8005aa4 <TIM_OC2_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a7c:	693b      	ldr	r3, [r7, #16]
 8005a7e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a82:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a84:	693b      	ldr	r3, [r7, #16]
 8005a86:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a8a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a8c:	683b      	ldr	r3, [r7, #0]
 8005a8e:	695b      	ldr	r3, [r3, #20]
 8005a90:	009b      	lsls	r3, r3, #2
 8005a92:	693a      	ldr	r2, [r7, #16]
 8005a94:	4313      	orrs	r3, r2
 8005a96:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	699b      	ldr	r3, [r3, #24]
 8005a9c:	009b      	lsls	r3, r3, #2
 8005a9e:	693a      	ldr	r2, [r7, #16]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	693a      	ldr	r2, [r7, #16]
 8005aa8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	685a      	ldr	r2, [r3, #4]
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	697a      	ldr	r2, [r7, #20]
 8005abc:	621a      	str	r2, [r3, #32]
}
 8005abe:	bf00      	nop
 8005ac0:	371c      	adds	r7, #28
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	40012c00 	.word	0x40012c00
 8005ad0:	40013400 	.word	0x40013400
 8005ad4:	40014000 	.word	0x40014000
 8005ad8:	40014400 	.word	0x40014400
 8005adc:	40014800 	.word	0x40014800

08005ae0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005ae0:	b480      	push	{r7}
 8005ae2:	b087      	sub	sp, #28
 8005ae4:	af00      	add	r7, sp, #0
 8005ae6:	6078      	str	r0, [r7, #4]
 8005ae8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a1b      	ldr	r3, [r3, #32]
 8005aee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	6a1b      	ldr	r3, [r3, #32]
 8005af4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	685b      	ldr	r3, [r3, #4]
 8005b00:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	69db      	ldr	r3, [r3, #28]
 8005b06:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005b0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005b12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f023 0303 	bic.w	r3, r3, #3
 8005b1a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	68fa      	ldr	r2, [r7, #12]
 8005b22:	4313      	orrs	r3, r2
 8005b24:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b26:	697b      	ldr	r3, [r7, #20]
 8005b28:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005b2c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b2e:	683b      	ldr	r3, [r7, #0]
 8005b30:	689b      	ldr	r3, [r3, #8]
 8005b32:	021b      	lsls	r3, r3, #8
 8005b34:	697a      	ldr	r2, [r7, #20]
 8005b36:	4313      	orrs	r3, r2
 8005b38:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	4a27      	ldr	r2, [pc, #156]	@ (8005bdc <TIM_OC3_SetConfig+0xfc>)
 8005b3e:	4293      	cmp	r3, r2
 8005b40:	d003      	beq.n	8005b4a <TIM_OC3_SetConfig+0x6a>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	4a26      	ldr	r2, [pc, #152]	@ (8005be0 <TIM_OC3_SetConfig+0x100>)
 8005b46:	4293      	cmp	r3, r2
 8005b48:	d10d      	bne.n	8005b66 <TIM_OC3_SetConfig+0x86>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005b50:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b52:	683b      	ldr	r3, [r7, #0]
 8005b54:	68db      	ldr	r3, [r3, #12]
 8005b56:	021b      	lsls	r3, r3, #8
 8005b58:	697a      	ldr	r2, [r7, #20]
 8005b5a:	4313      	orrs	r3, r2
 8005b5c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005b5e:	697b      	ldr	r3, [r7, #20]
 8005b60:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b64:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	4a1c      	ldr	r2, [pc, #112]	@ (8005bdc <TIM_OC3_SetConfig+0xfc>)
 8005b6a:	4293      	cmp	r3, r2
 8005b6c:	d00f      	beq.n	8005b8e <TIM_OC3_SetConfig+0xae>
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	4a1b      	ldr	r2, [pc, #108]	@ (8005be0 <TIM_OC3_SetConfig+0x100>)
 8005b72:	4293      	cmp	r3, r2
 8005b74:	d00b      	beq.n	8005b8e <TIM_OC3_SetConfig+0xae>
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	4a1a      	ldr	r2, [pc, #104]	@ (8005be4 <TIM_OC3_SetConfig+0x104>)
 8005b7a:	4293      	cmp	r3, r2
 8005b7c:	d007      	beq.n	8005b8e <TIM_OC3_SetConfig+0xae>
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	4a19      	ldr	r2, [pc, #100]	@ (8005be8 <TIM_OC3_SetConfig+0x108>)
 8005b82:	4293      	cmp	r3, r2
 8005b84:	d003      	beq.n	8005b8e <TIM_OC3_SetConfig+0xae>
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a18      	ldr	r2, [pc, #96]	@ (8005bec <TIM_OC3_SetConfig+0x10c>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d113      	bne.n	8005bb6 <TIM_OC3_SetConfig+0xd6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b8e:	693b      	ldr	r3, [r7, #16]
 8005b90:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b94:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b96:	693b      	ldr	r3, [r7, #16]
 8005b98:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b9c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b9e:	683b      	ldr	r3, [r7, #0]
 8005ba0:	695b      	ldr	r3, [r3, #20]
 8005ba2:	011b      	lsls	r3, r3, #4
 8005ba4:	693a      	ldr	r2, [r7, #16]
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005baa:	683b      	ldr	r3, [r7, #0]
 8005bac:	699b      	ldr	r3, [r3, #24]
 8005bae:	011b      	lsls	r3, r3, #4
 8005bb0:	693a      	ldr	r2, [r7, #16]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	68fa      	ldr	r2, [r7, #12]
 8005bc0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	685a      	ldr	r2, [r3, #4]
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	697a      	ldr	r2, [r7, #20]
 8005bce:	621a      	str	r2, [r3, #32]
}
 8005bd0:	bf00      	nop
 8005bd2:	371c      	adds	r7, #28
 8005bd4:	46bd      	mov	sp, r7
 8005bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bda:	4770      	bx	lr
 8005bdc:	40012c00 	.word	0x40012c00
 8005be0:	40013400 	.word	0x40013400
 8005be4:	40014000 	.word	0x40014000
 8005be8:	40014400 	.word	0x40014400
 8005bec:	40014800 	.word	0x40014800

08005bf0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005bf0:	b480      	push	{r7}
 8005bf2:	b087      	sub	sp, #28
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
 8005bf8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	6a1b      	ldr	r3, [r3, #32]
 8005bfe:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	6a1b      	ldr	r3, [r3, #32]
 8005c04:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	69db      	ldr	r3, [r3, #28]
 8005c16:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005c1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005c22:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c2c:	683b      	ldr	r3, [r7, #0]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	021b      	lsls	r3, r3, #8
 8005c32:	68fa      	ldr	r2, [r7, #12]
 8005c34:	4313      	orrs	r3, r2
 8005c36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c38:	697b      	ldr	r3, [r7, #20]
 8005c3a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005c3e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c40:	683b      	ldr	r3, [r7, #0]
 8005c42:	689b      	ldr	r3, [r3, #8]
 8005c44:	031b      	lsls	r3, r3, #12
 8005c46:	697a      	ldr	r2, [r7, #20]
 8005c48:	4313      	orrs	r3, r2
 8005c4a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	4a28      	ldr	r2, [pc, #160]	@ (8005cf0 <TIM_OC4_SetConfig+0x100>)
 8005c50:	4293      	cmp	r3, r2
 8005c52:	d003      	beq.n	8005c5c <TIM_OC4_SetConfig+0x6c>
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	4a27      	ldr	r2, [pc, #156]	@ (8005cf4 <TIM_OC4_SetConfig+0x104>)
 8005c58:	4293      	cmp	r3, r2
 8005c5a:	d10d      	bne.n	8005c78 <TIM_OC4_SetConfig+0x88>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8005c5c:	697b      	ldr	r3, [r7, #20]
 8005c5e:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005c62:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	68db      	ldr	r3, [r3, #12]
 8005c68:	031b      	lsls	r3, r3, #12
 8005c6a:	697a      	ldr	r2, [r7, #20]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005c70:	697b      	ldr	r3, [r7, #20]
 8005c72:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005c76:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	4a1d      	ldr	r2, [pc, #116]	@ (8005cf0 <TIM_OC4_SetConfig+0x100>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d00f      	beq.n	8005ca0 <TIM_OC4_SetConfig+0xb0>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	4a1c      	ldr	r2, [pc, #112]	@ (8005cf4 <TIM_OC4_SetConfig+0x104>)
 8005c84:	4293      	cmp	r3, r2
 8005c86:	d00b      	beq.n	8005ca0 <TIM_OC4_SetConfig+0xb0>
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8005cf8 <TIM_OC4_SetConfig+0x108>)
 8005c8c:	4293      	cmp	r3, r2
 8005c8e:	d007      	beq.n	8005ca0 <TIM_OC4_SetConfig+0xb0>
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	4a1a      	ldr	r2, [pc, #104]	@ (8005cfc <TIM_OC4_SetConfig+0x10c>)
 8005c94:	4293      	cmp	r3, r2
 8005c96:	d003      	beq.n	8005ca0 <TIM_OC4_SetConfig+0xb0>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	4a19      	ldr	r2, [pc, #100]	@ (8005d00 <TIM_OC4_SetConfig+0x110>)
 8005c9c:	4293      	cmp	r3, r2
 8005c9e:	d113      	bne.n	8005cc8 <TIM_OC4_SetConfig+0xd8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005ca0:	693b      	ldr	r3, [r7, #16]
 8005ca2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005ca6:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005ca8:	693b      	ldr	r3, [r7, #16]
 8005caa:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8005cae:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	019b      	lsls	r3, r3, #6
 8005cb6:	693a      	ldr	r2, [r7, #16]
 8005cb8:	4313      	orrs	r3, r2
 8005cba:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005cbc:	683b      	ldr	r3, [r7, #0]
 8005cbe:	699b      	ldr	r3, [r3, #24]
 8005cc0:	019b      	lsls	r3, r3, #6
 8005cc2:	693a      	ldr	r2, [r7, #16]
 8005cc4:	4313      	orrs	r3, r2
 8005cc6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	693a      	ldr	r2, [r7, #16]
 8005ccc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	68fa      	ldr	r2, [r7, #12]
 8005cd2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	685a      	ldr	r2, [r3, #4]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	697a      	ldr	r2, [r7, #20]
 8005ce0:	621a      	str	r2, [r3, #32]
}
 8005ce2:	bf00      	nop
 8005ce4:	371c      	adds	r7, #28
 8005ce6:	46bd      	mov	sp, r7
 8005ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cec:	4770      	bx	lr
 8005cee:	bf00      	nop
 8005cf0:	40012c00 	.word	0x40012c00
 8005cf4:	40013400 	.word	0x40013400
 8005cf8:	40014000 	.word	0x40014000
 8005cfc:	40014400 	.word	0x40014400
 8005d00:	40014800 	.word	0x40014800

08005d04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005d04:	b480      	push	{r7}
 8005d06:	b087      	sub	sp, #28
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	6a1b      	ldr	r3, [r3, #32]
 8005d12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	6a1b      	ldr	r3, [r3, #32]
 8005d18:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005d2c:	68fb      	ldr	r3, [r7, #12]
 8005d2e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d32:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005d36:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005d38:	683b      	ldr	r3, [r7, #0]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68fa      	ldr	r2, [r7, #12]
 8005d3e:	4313      	orrs	r3, r2
 8005d40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8005d42:	693b      	ldr	r3, [r7, #16]
 8005d44:	f423 3300 	bic.w	r3, r3, #131072	@ 0x20000
 8005d48:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005d4a:	683b      	ldr	r3, [r7, #0]
 8005d4c:	689b      	ldr	r3, [r3, #8]
 8005d4e:	041b      	lsls	r3, r3, #16
 8005d50:	693a      	ldr	r2, [r7, #16]
 8005d52:	4313      	orrs	r3, r2
 8005d54:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a17      	ldr	r2, [pc, #92]	@ (8005db8 <TIM_OC5_SetConfig+0xb4>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00f      	beq.n	8005d7e <TIM_OC5_SetConfig+0x7a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a16      	ldr	r2, [pc, #88]	@ (8005dbc <TIM_OC5_SetConfig+0xb8>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d00b      	beq.n	8005d7e <TIM_OC5_SetConfig+0x7a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a15      	ldr	r2, [pc, #84]	@ (8005dc0 <TIM_OC5_SetConfig+0xbc>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d007      	beq.n	8005d7e <TIM_OC5_SetConfig+0x7a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a14      	ldr	r2, [pc, #80]	@ (8005dc4 <TIM_OC5_SetConfig+0xc0>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d003      	beq.n	8005d7e <TIM_OC5_SetConfig+0x7a>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	4a13      	ldr	r2, [pc, #76]	@ (8005dc8 <TIM_OC5_SetConfig+0xc4>)
 8005d7a:	4293      	cmp	r3, r2
 8005d7c:	d109      	bne.n	8005d92 <TIM_OC5_SetConfig+0x8e>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005d7e:	697b      	ldr	r3, [r7, #20]
 8005d80:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005d84:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	695b      	ldr	r3, [r3, #20]
 8005d8a:	021b      	lsls	r3, r3, #8
 8005d8c:	697a      	ldr	r2, [r7, #20]
 8005d8e:	4313      	orrs	r3, r2
 8005d90:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	697a      	ldr	r2, [r7, #20]
 8005d96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	68fa      	ldr	r2, [r7, #12]
 8005d9c:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005d9e:	683b      	ldr	r3, [r7, #0]
 8005da0:	685a      	ldr	r2, [r3, #4]
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	693a      	ldr	r2, [r7, #16]
 8005daa:	621a      	str	r2, [r3, #32]
}
 8005dac:	bf00      	nop
 8005dae:	371c      	adds	r7, #28
 8005db0:	46bd      	mov	sp, r7
 8005db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db6:	4770      	bx	lr
 8005db8:	40012c00 	.word	0x40012c00
 8005dbc:	40013400 	.word	0x40013400
 8005dc0:	40014000 	.word	0x40014000
 8005dc4:	40014400 	.word	0x40014400
 8005dc8:	40014800 	.word	0x40014800

08005dcc <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8005dcc:	b480      	push	{r7}
 8005dce:	b087      	sub	sp, #28
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6a1b      	ldr	r3, [r3, #32]
 8005dda:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8005ddc:	687b      	ldr	r3, [r7, #4]
 8005dde:	6a1b      	ldr	r3, [r3, #32]
 8005de0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	685b      	ldr	r3, [r3, #4]
 8005dec:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005df2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005dfa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005dfe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005e00:	683b      	ldr	r3, [r7, #0]
 8005e02:	681b      	ldr	r3, [r3, #0]
 8005e04:	021b      	lsls	r3, r3, #8
 8005e06:	68fa      	ldr	r2, [r7, #12]
 8005e08:	4313      	orrs	r3, r2
 8005e0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	f423 1300 	bic.w	r3, r3, #2097152	@ 0x200000
 8005e12:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	689b      	ldr	r3, [r3, #8]
 8005e18:	051b      	lsls	r3, r3, #20
 8005e1a:	693a      	ldr	r2, [r7, #16]
 8005e1c:	4313      	orrs	r3, r2
 8005e1e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	4a18      	ldr	r2, [pc, #96]	@ (8005e84 <TIM_OC6_SetConfig+0xb8>)
 8005e24:	4293      	cmp	r3, r2
 8005e26:	d00f      	beq.n	8005e48 <TIM_OC6_SetConfig+0x7c>
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	4a17      	ldr	r2, [pc, #92]	@ (8005e88 <TIM_OC6_SetConfig+0xbc>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d00b      	beq.n	8005e48 <TIM_OC6_SetConfig+0x7c>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	4a16      	ldr	r2, [pc, #88]	@ (8005e8c <TIM_OC6_SetConfig+0xc0>)
 8005e34:	4293      	cmp	r3, r2
 8005e36:	d007      	beq.n	8005e48 <TIM_OC6_SetConfig+0x7c>
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	4a15      	ldr	r2, [pc, #84]	@ (8005e90 <TIM_OC6_SetConfig+0xc4>)
 8005e3c:	4293      	cmp	r3, r2
 8005e3e:	d003      	beq.n	8005e48 <TIM_OC6_SetConfig+0x7c>
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a14      	ldr	r2, [pc, #80]	@ (8005e94 <TIM_OC6_SetConfig+0xc8>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d109      	bne.n	8005e5c <TIM_OC6_SetConfig+0x90>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	029b      	lsls	r3, r3, #10
 8005e56:	697a      	ldr	r2, [r7, #20]
 8005e58:	4313      	orrs	r3, r2
 8005e5a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	697a      	ldr	r2, [r7, #20]
 8005e60:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	68fa      	ldr	r2, [r7, #12]
 8005e66:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005e68:	683b      	ldr	r3, [r7, #0]
 8005e6a:	685a      	ldr	r2, [r3, #4]
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	693a      	ldr	r2, [r7, #16]
 8005e74:	621a      	str	r2, [r3, #32]
}
 8005e76:	bf00      	nop
 8005e78:	371c      	adds	r7, #28
 8005e7a:	46bd      	mov	sp, r7
 8005e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e80:	4770      	bx	lr
 8005e82:	bf00      	nop
 8005e84:	40012c00 	.word	0x40012c00
 8005e88:	40013400 	.word	0x40013400
 8005e8c:	40014000 	.word	0x40014000
 8005e90:	40014400 	.word	0x40014400
 8005e94:	40014800 	.word	0x40014800

08005e98 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e98:	b480      	push	{r7}
 8005e9a:	b087      	sub	sp, #28
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	60f8      	str	r0, [r7, #12]
 8005ea0:	60b9      	str	r1, [r7, #8]
 8005ea2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	6a1b      	ldr	r3, [r3, #32]
 8005ea8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	6a1b      	ldr	r3, [r3, #32]
 8005eae:	f023 0201 	bic.w	r2, r3, #1
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	699b      	ldr	r3, [r3, #24]
 8005eba:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005ebc:	693b      	ldr	r3, [r7, #16]
 8005ebe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005ec2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	011b      	lsls	r3, r3, #4
 8005ec8:	693a      	ldr	r2, [r7, #16]
 8005eca:	4313      	orrs	r3, r2
 8005ecc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005ece:	697b      	ldr	r3, [r7, #20]
 8005ed0:	f023 030a 	bic.w	r3, r3, #10
 8005ed4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005ed6:	697a      	ldr	r2, [r7, #20]
 8005ed8:	68bb      	ldr	r3, [r7, #8]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	693a      	ldr	r2, [r7, #16]
 8005ee2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005ee4:	68fb      	ldr	r3, [r7, #12]
 8005ee6:	697a      	ldr	r2, [r7, #20]
 8005ee8:	621a      	str	r2, [r3, #32]
}
 8005eea:	bf00      	nop
 8005eec:	371c      	adds	r7, #28
 8005eee:	46bd      	mov	sp, r7
 8005ef0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef4:	4770      	bx	lr

08005ef6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005ef6:	b480      	push	{r7}
 8005ef8:	b087      	sub	sp, #28
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	60f8      	str	r0, [r7, #12]
 8005efe:	60b9      	str	r1, [r7, #8]
 8005f00:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	6a1b      	ldr	r3, [r3, #32]
 8005f06:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6a1b      	ldr	r3, [r3, #32]
 8005f0c:	f023 0210 	bic.w	r2, r3, #16
 8005f10:	68fb      	ldr	r3, [r7, #12]
 8005f12:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005f14:	68fb      	ldr	r3, [r7, #12]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005f1a:	693b      	ldr	r3, [r7, #16]
 8005f1c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005f20:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	031b      	lsls	r3, r3, #12
 8005f26:	693a      	ldr	r2, [r7, #16]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005f32:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005f34:	68bb      	ldr	r3, [r7, #8]
 8005f36:	011b      	lsls	r3, r3, #4
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	693a      	ldr	r2, [r7, #16]
 8005f42:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	697a      	ldr	r2, [r7, #20]
 8005f48:	621a      	str	r2, [r3, #32]
}
 8005f4a:	bf00      	nop
 8005f4c:	371c      	adds	r7, #28
 8005f4e:	46bd      	mov	sp, r7
 8005f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f54:	4770      	bx	lr

08005f56 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f56:	b480      	push	{r7}
 8005f58:	b085      	sub	sp, #20
 8005f5a:	af00      	add	r7, sp, #0
 8005f5c:	6078      	str	r0, [r7, #4]
 8005f5e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	689b      	ldr	r3, [r3, #8]
 8005f64:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 8005f6c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005f70:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005f72:	683a      	ldr	r2, [r7, #0]
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	4313      	orrs	r3, r2
 8005f78:	f043 0307 	orr.w	r3, r3, #7
 8005f7c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	68fa      	ldr	r2, [r7, #12]
 8005f82:	609a      	str	r2, [r3, #8]
}
 8005f84:	bf00      	nop
 8005f86:	3714      	adds	r7, #20
 8005f88:	46bd      	mov	sp, r7
 8005f8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f8e:	4770      	bx	lr

08005f90 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	60f8      	str	r0, [r7, #12]
 8005f98:	60b9      	str	r1, [r7, #8]
 8005f9a:	607a      	str	r2, [r7, #4]
 8005f9c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	689b      	ldr	r3, [r3, #8]
 8005fa2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fa4:	697b      	ldr	r3, [r7, #20]
 8005fa6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005faa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005fac:	683b      	ldr	r3, [r7, #0]
 8005fae:	021a      	lsls	r2, r3, #8
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	431a      	orrs	r2, r3
 8005fb4:	68bb      	ldr	r3, [r7, #8]
 8005fb6:	4313      	orrs	r3, r2
 8005fb8:	697a      	ldr	r2, [r7, #20]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fbe:	68fb      	ldr	r3, [r7, #12]
 8005fc0:	697a      	ldr	r2, [r7, #20]
 8005fc2:	609a      	str	r2, [r3, #8]
}
 8005fc4:	bf00      	nop
 8005fc6:	371c      	adds	r7, #28
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fce:	4770      	bx	lr

08005fd0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005fd0:	b480      	push	{r7}
 8005fd2:	b087      	sub	sp, #28
 8005fd4:	af00      	add	r7, sp, #0
 8005fd6:	60f8      	str	r0, [r7, #12]
 8005fd8:	60b9      	str	r1, [r7, #8]
 8005fda:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005fdc:	68bb      	ldr	r3, [r7, #8]
 8005fde:	f003 031f 	and.w	r3, r3, #31
 8005fe2:	2201      	movs	r2, #1
 8005fe4:	fa02 f303 	lsl.w	r3, r2, r3
 8005fe8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	6a1a      	ldr	r2, [r3, #32]
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	43db      	mvns	r3, r3
 8005ff2:	401a      	ands	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	6a1a      	ldr	r2, [r3, #32]
 8005ffc:	68bb      	ldr	r3, [r7, #8]
 8005ffe:	f003 031f 	and.w	r3, r3, #31
 8006002:	6879      	ldr	r1, [r7, #4]
 8006004:	fa01 f303 	lsl.w	r3, r1, r3
 8006008:	431a      	orrs	r2, r3
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	621a      	str	r2, [r3, #32]
}
 800600e:	bf00      	nop
 8006010:	371c      	adds	r7, #28
 8006012:	46bd      	mov	sp, r7
 8006014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006018:	4770      	bx	lr
	...

0800601c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800601c:	b480      	push	{r7}
 800601e:	b085      	sub	sp, #20
 8006020:	af00      	add	r7, sp, #0
 8006022:	6078      	str	r0, [r7, #4]
 8006024:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800602c:	2b01      	cmp	r3, #1
 800602e:	d101      	bne.n	8006034 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006030:	2302      	movs	r3, #2
 8006032:	e065      	b.n	8006100 <HAL_TIMEx_MasterConfigSynchronization+0xe4>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	2201      	movs	r2, #1
 8006038:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2202      	movs	r2, #2
 8006040:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685b      	ldr	r3, [r3, #4]
 800604a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	689b      	ldr	r3, [r3, #8]
 8006052:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	4a2c      	ldr	r2, [pc, #176]	@ (800610c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800605a:	4293      	cmp	r3, r2
 800605c:	d004      	beq.n	8006068 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a2b      	ldr	r2, [pc, #172]	@ (8006110 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d108      	bne.n	800607a <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	f423 0370 	bic.w	r3, r3, #15728640	@ 0xf00000
 800606e:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8006070:	683b      	ldr	r3, [r7, #0]
 8006072:	685b      	ldr	r3, [r3, #4]
 8006074:	68fa      	ldr	r2, [r7, #12]
 8006076:	4313      	orrs	r3, r2
 8006078:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	f023 7300 	bic.w	r3, r3, #33554432	@ 0x2000000
 8006080:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8006084:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006086:	683b      	ldr	r3, [r7, #0]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	68fa      	ldr	r2, [r7, #12]
 800608c:	4313      	orrs	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	68fa      	ldr	r2, [r7, #12]
 8006096:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	4a1b      	ldr	r2, [pc, #108]	@ (800610c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800609e:	4293      	cmp	r3, r2
 80060a0:	d018      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80060aa:	d013      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	4a18      	ldr	r2, [pc, #96]	@ (8006114 <HAL_TIMEx_MasterConfigSynchronization+0xf8>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d00e      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	681b      	ldr	r3, [r3, #0]
 80060ba:	4a17      	ldr	r2, [pc, #92]	@ (8006118 <HAL_TIMEx_MasterConfigSynchronization+0xfc>)
 80060bc:	4293      	cmp	r3, r2
 80060be:	d009      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	4a12      	ldr	r2, [pc, #72]	@ (8006110 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80060c6:	4293      	cmp	r3, r2
 80060c8:	d004      	beq.n	80060d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	4a13      	ldr	r2, [pc, #76]	@ (800611c <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80060d0:	4293      	cmp	r3, r2
 80060d2:	d10c      	bne.n	80060ee <HAL_TIMEx_MasterConfigSynchronization+0xd2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060d4:	68bb      	ldr	r3, [r7, #8]
 80060d6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80060da:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	689b      	ldr	r3, [r3, #8]
 80060e0:	68ba      	ldr	r2, [r7, #8]
 80060e2:	4313      	orrs	r3, r2
 80060e4:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	681b      	ldr	r3, [r3, #0]
 80060ea:	68ba      	ldr	r2, [r7, #8]
 80060ec:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	2201      	movs	r2, #1
 80060f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2200      	movs	r2, #0
 80060fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 80060fe:	2300      	movs	r3, #0
}
 8006100:	4618      	mov	r0, r3
 8006102:	3714      	adds	r7, #20
 8006104:	46bd      	mov	sp, r7
 8006106:	f85d 7b04 	ldr.w	r7, [sp], #4
 800610a:	4770      	bx	lr
 800610c:	40012c00 	.word	0x40012c00
 8006110:	40013400 	.word	0x40013400
 8006114:	40000400 	.word	0x40000400
 8006118:	40000800 	.word	0x40000800
 800611c:	40014000 	.word	0x40014000

08006120 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8006120:	b480      	push	{r7}
 8006122:	b085      	sub	sp, #20
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
 8006128:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 800612a:	2300      	movs	r3, #0
 800612c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8006134:	2b01      	cmp	r3, #1
 8006136:	d101      	bne.n	800613c <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8006138:	2302      	movs	r3, #2
 800613a:	e073      	b.n	8006224 <HAL_TIMEx_ConfigBreakDeadTime+0x104>
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800614a:	683b      	ldr	r3, [r7, #0]
 800614c:	68db      	ldr	r3, [r3, #12]
 800614e:	4313      	orrs	r3, r2
 8006150:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8006158:	683b      	ldr	r3, [r7, #0]
 800615a:	689b      	ldr	r3, [r3, #8]
 800615c:	4313      	orrs	r3, r2
 800615e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8006166:	683b      	ldr	r3, [r7, #0]
 8006168:	685b      	ldr	r3, [r3, #4]
 800616a:	4313      	orrs	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	4313      	orrs	r3, r2
 800617a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800617c:	68fb      	ldr	r3, [r7, #12]
 800617e:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8006182:	683b      	ldr	r3, [r7, #0]
 8006184:	691b      	ldr	r3, [r3, #16]
 8006186:	4313      	orrs	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800618a:	68fb      	ldr	r3, [r7, #12]
 800618c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	695b      	ldr	r3, [r3, #20]
 8006194:	4313      	orrs	r3, r2
 8006196:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 800619e:	683b      	ldr	r3, [r7, #0]
 80061a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80061a2:	4313      	orrs	r3, r2
 80061a4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	f423 2270 	bic.w	r2, r3, #983040	@ 0xf0000
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	699b      	ldr	r3, [r3, #24]
 80061b0:	041b      	lsls	r3, r3, #16
 80061b2:	4313      	orrs	r3, r2
 80061b4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	69db      	ldr	r3, [r3, #28]
 80061c0:	4313      	orrs	r3, r2
 80061c2:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a19      	ldr	r2, [pc, #100]	@ (8006230 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80061ca:	4293      	cmp	r3, r2
 80061cc:	d004      	beq.n	80061d8 <HAL_TIMEx_ConfigBreakDeadTime+0xb8>
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	4a18      	ldr	r2, [pc, #96]	@ (8006234 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80061d4:	4293      	cmp	r3, r2
 80061d6:	d11c      	bne.n	8006212 <HAL_TIMEx_ConfigBreakDeadTime+0xf2>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f423 0270 	bic.w	r2, r3, #15728640	@ 0xf00000
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80061e2:	051b      	lsls	r3, r3, #20
 80061e4:	4313      	orrs	r3, r2
 80061e6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	6a1b      	ldr	r3, [r3, #32]
 80061f2:	4313      	orrs	r3, r2
 80061f4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006200:	4313      	orrs	r3, r2
 8006202:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 800620a:	683b      	ldr	r3, [r7, #0]
 800620c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800620e:	4313      	orrs	r3, r2
 8006210:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	68fa      	ldr	r2, [r7, #12]
 8006218:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2200      	movs	r2, #0
 800621e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8006222:	2300      	movs	r3, #0
}
 8006224:	4618      	mov	r0, r3
 8006226:	3714      	adds	r7, #20
 8006228:	46bd      	mov	sp, r7
 800622a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800622e:	4770      	bx	lr
 8006230:	40012c00 	.word	0x40012c00
 8006234:	40013400 	.word	0x40013400

08006238 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006238:	b480      	push	{r7}
 800623a:	b083      	sub	sp, #12
 800623c:	af00      	add	r7, sp, #0
 800623e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006240:	bf00      	nop
 8006242:	370c      	adds	r7, #12
 8006244:	46bd      	mov	sp, r7
 8006246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800624a:	4770      	bx	lr

0800624c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800624c:	b480      	push	{r7}
 800624e:	b083      	sub	sp, #12
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006254:	bf00      	nop
 8006256:	370c      	adds	r7, #12
 8006258:	46bd      	mov	sp, r7
 800625a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800625e:	4770      	bx	lr

08006260 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8006260:	b480      	push	{r7}
 8006262:	b083      	sub	sp, #12
 8006264:	af00      	add	r7, sp, #0
 8006266:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8006268:	bf00      	nop
 800626a:	370c      	adds	r7, #12
 800626c:	46bd      	mov	sp, r7
 800626e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006272:	4770      	bx	lr

08006274 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8006274:	b480      	push	{r7}
 8006276:	b083      	sub	sp, #12
 8006278:	af00      	add	r7, sp, #0
 800627a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 800627c:	bf00      	nop
 800627e:	370c      	adds	r7, #12
 8006280:	46bd      	mov	sp, r7
 8006282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006286:	4770      	bx	lr

08006288 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8006288:	b480      	push	{r7}
 800628a:	b083      	sub	sp, #12
 800628c:	af00      	add	r7, sp, #0
 800628e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8006290:	bf00      	nop
 8006292:	370c      	adds	r7, #12
 8006294:	46bd      	mov	sp, r7
 8006296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800629a:	4770      	bx	lr

0800629c <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 800629c:	b480      	push	{r7}
 800629e:	b083      	sub	sp, #12
 80062a0:	af00      	add	r7, sp, #0
 80062a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80062a4:	bf00      	nop
 80062a6:	370c      	adds	r7, #12
 80062a8:	46bd      	mov	sp, r7
 80062aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ae:	4770      	bx	lr

080062b0 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
 80062b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80062b8:	bf00      	nop
 80062ba:	370c      	adds	r7, #12
 80062bc:	46bd      	mov	sp, r7
 80062be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c2:	4770      	bx	lr

080062c4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80062c4:	b580      	push	{r7, lr}
 80062c6:	b082      	sub	sp, #8
 80062c8:	af00      	add	r7, sp, #0
 80062ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d101      	bne.n	80062d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80062d2:	2301      	movs	r3, #1
 80062d4:	e042      	b.n	800635c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d106      	bne.n	80062ee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	2200      	movs	r2, #0
 80062e4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f7fb f973 	bl	80015d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2224      	movs	r2, #36	@ 0x24
 80062f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	681b      	ldr	r3, [r3, #0]
 80062fa:	681a      	ldr	r2, [r3, #0]
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	f022 0201 	bic.w	r2, r2, #1
 8006304:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800630a:	2b00      	cmp	r3, #0
 800630c:	d002      	beq.n	8006314 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 800630e:	6878      	ldr	r0, [r7, #4]
 8006310:	f000 faf4 	bl	80068fc <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006314:	6878      	ldr	r0, [r7, #4]
 8006316:	f000 f825 	bl	8006364 <UART_SetConfig>
 800631a:	4603      	mov	r3, r0
 800631c:	2b01      	cmp	r3, #1
 800631e:	d101      	bne.n	8006324 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8006320:	2301      	movs	r3, #1
 8006322:	e01b      	b.n	800635c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	685a      	ldr	r2, [r3, #4]
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8006332:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	689a      	ldr	r2, [r3, #8]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8006342:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	681b      	ldr	r3, [r3, #0]
 8006348:	681a      	ldr	r2, [r3, #0]
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	681b      	ldr	r3, [r3, #0]
 800634e:	f042 0201 	orr.w	r2, r2, #1
 8006352:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	f000 fb73 	bl	8006a40 <UART_CheckIdleState>
 800635a:	4603      	mov	r3, r0
}
 800635c:	4618      	mov	r0, r3
 800635e:	3708      	adds	r7, #8
 8006360:	46bd      	mov	sp, r7
 8006362:	bd80      	pop	{r7, pc}

08006364 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006364:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006368:	b08c      	sub	sp, #48	@ 0x30
 800636a:	af00      	add	r7, sp, #0
 800636c:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800636e:	2300      	movs	r3, #0
 8006370:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006374:	697b      	ldr	r3, [r7, #20]
 8006376:	689a      	ldr	r2, [r3, #8]
 8006378:	697b      	ldr	r3, [r7, #20]
 800637a:	691b      	ldr	r3, [r3, #16]
 800637c:	431a      	orrs	r2, r3
 800637e:	697b      	ldr	r3, [r7, #20]
 8006380:	695b      	ldr	r3, [r3, #20]
 8006382:	431a      	orrs	r2, r3
 8006384:	697b      	ldr	r3, [r7, #20]
 8006386:	69db      	ldr	r3, [r3, #28]
 8006388:	4313      	orrs	r3, r2
 800638a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800638c:	697b      	ldr	r3, [r7, #20]
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	681a      	ldr	r2, [r3, #0]
 8006392:	4bab      	ldr	r3, [pc, #684]	@ (8006640 <UART_SetConfig+0x2dc>)
 8006394:	4013      	ands	r3, r2
 8006396:	697a      	ldr	r2, [r7, #20]
 8006398:	6812      	ldr	r2, [r2, #0]
 800639a:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800639c:	430b      	orrs	r3, r1
 800639e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80063a0:	697b      	ldr	r3, [r7, #20]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	685b      	ldr	r3, [r3, #4]
 80063a6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	68da      	ldr	r2, [r3, #12]
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	430a      	orrs	r2, r1
 80063b4:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80063b6:	697b      	ldr	r3, [r7, #20]
 80063b8:	699b      	ldr	r3, [r3, #24]
 80063ba:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	4aa0      	ldr	r2, [pc, #640]	@ (8006644 <UART_SetConfig+0x2e0>)
 80063c2:	4293      	cmp	r3, r2
 80063c4:	d004      	beq.n	80063d0 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	6a1b      	ldr	r3, [r3, #32]
 80063ca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80063cc:	4313      	orrs	r3, r2
 80063ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80063d0:	697b      	ldr	r3, [r7, #20]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	689b      	ldr	r3, [r3, #8]
 80063d6:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80063da:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80063de:	697a      	ldr	r2, [r7, #20]
 80063e0:	6812      	ldr	r2, [r2, #0]
 80063e2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80063e4:	430b      	orrs	r3, r1
 80063e6:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80063e8:	697b      	ldr	r3, [r7, #20]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063ee:	f023 010f 	bic.w	r1, r3, #15
 80063f2:	697b      	ldr	r3, [r7, #20]
 80063f4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	430a      	orrs	r2, r1
 80063fc:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80063fe:	697b      	ldr	r3, [r7, #20]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	4a91      	ldr	r2, [pc, #580]	@ (8006648 <UART_SetConfig+0x2e4>)
 8006404:	4293      	cmp	r3, r2
 8006406:	d125      	bne.n	8006454 <UART_SetConfig+0xf0>
 8006408:	4b90      	ldr	r3, [pc, #576]	@ (800664c <UART_SetConfig+0x2e8>)
 800640a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800640e:	f003 0303 	and.w	r3, r3, #3
 8006412:	2b03      	cmp	r3, #3
 8006414:	d81a      	bhi.n	800644c <UART_SetConfig+0xe8>
 8006416:	a201      	add	r2, pc, #4	@ (adr r2, 800641c <UART_SetConfig+0xb8>)
 8006418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641c:	0800642d 	.word	0x0800642d
 8006420:	0800643d 	.word	0x0800643d
 8006424:	08006435 	.word	0x08006435
 8006428:	08006445 	.word	0x08006445
 800642c:	2301      	movs	r3, #1
 800642e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006432:	e0d6      	b.n	80065e2 <UART_SetConfig+0x27e>
 8006434:	2302      	movs	r3, #2
 8006436:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800643a:	e0d2      	b.n	80065e2 <UART_SetConfig+0x27e>
 800643c:	2304      	movs	r3, #4
 800643e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006442:	e0ce      	b.n	80065e2 <UART_SetConfig+0x27e>
 8006444:	2308      	movs	r3, #8
 8006446:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800644a:	e0ca      	b.n	80065e2 <UART_SetConfig+0x27e>
 800644c:	2310      	movs	r3, #16
 800644e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006452:	e0c6      	b.n	80065e2 <UART_SetConfig+0x27e>
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	4a7d      	ldr	r2, [pc, #500]	@ (8006650 <UART_SetConfig+0x2ec>)
 800645a:	4293      	cmp	r3, r2
 800645c:	d138      	bne.n	80064d0 <UART_SetConfig+0x16c>
 800645e:	4b7b      	ldr	r3, [pc, #492]	@ (800664c <UART_SetConfig+0x2e8>)
 8006460:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006464:	f003 030c 	and.w	r3, r3, #12
 8006468:	2b0c      	cmp	r3, #12
 800646a:	d82d      	bhi.n	80064c8 <UART_SetConfig+0x164>
 800646c:	a201      	add	r2, pc, #4	@ (adr r2, 8006474 <UART_SetConfig+0x110>)
 800646e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006472:	bf00      	nop
 8006474:	080064a9 	.word	0x080064a9
 8006478:	080064c9 	.word	0x080064c9
 800647c:	080064c9 	.word	0x080064c9
 8006480:	080064c9 	.word	0x080064c9
 8006484:	080064b9 	.word	0x080064b9
 8006488:	080064c9 	.word	0x080064c9
 800648c:	080064c9 	.word	0x080064c9
 8006490:	080064c9 	.word	0x080064c9
 8006494:	080064b1 	.word	0x080064b1
 8006498:	080064c9 	.word	0x080064c9
 800649c:	080064c9 	.word	0x080064c9
 80064a0:	080064c9 	.word	0x080064c9
 80064a4:	080064c1 	.word	0x080064c1
 80064a8:	2300      	movs	r3, #0
 80064aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064ae:	e098      	b.n	80065e2 <UART_SetConfig+0x27e>
 80064b0:	2302      	movs	r3, #2
 80064b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064b6:	e094      	b.n	80065e2 <UART_SetConfig+0x27e>
 80064b8:	2304      	movs	r3, #4
 80064ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064be:	e090      	b.n	80065e2 <UART_SetConfig+0x27e>
 80064c0:	2308      	movs	r3, #8
 80064c2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064c6:	e08c      	b.n	80065e2 <UART_SetConfig+0x27e>
 80064c8:	2310      	movs	r3, #16
 80064ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80064ce:	e088      	b.n	80065e2 <UART_SetConfig+0x27e>
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	4a5f      	ldr	r2, [pc, #380]	@ (8006654 <UART_SetConfig+0x2f0>)
 80064d6:	4293      	cmp	r3, r2
 80064d8:	d125      	bne.n	8006526 <UART_SetConfig+0x1c2>
 80064da:	4b5c      	ldr	r3, [pc, #368]	@ (800664c <UART_SetConfig+0x2e8>)
 80064dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064e0:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 80064e4:	2b30      	cmp	r3, #48	@ 0x30
 80064e6:	d016      	beq.n	8006516 <UART_SetConfig+0x1b2>
 80064e8:	2b30      	cmp	r3, #48	@ 0x30
 80064ea:	d818      	bhi.n	800651e <UART_SetConfig+0x1ba>
 80064ec:	2b20      	cmp	r3, #32
 80064ee:	d00a      	beq.n	8006506 <UART_SetConfig+0x1a2>
 80064f0:	2b20      	cmp	r3, #32
 80064f2:	d814      	bhi.n	800651e <UART_SetConfig+0x1ba>
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <UART_SetConfig+0x19a>
 80064f8:	2b10      	cmp	r3, #16
 80064fa:	d008      	beq.n	800650e <UART_SetConfig+0x1aa>
 80064fc:	e00f      	b.n	800651e <UART_SetConfig+0x1ba>
 80064fe:	2300      	movs	r3, #0
 8006500:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006504:	e06d      	b.n	80065e2 <UART_SetConfig+0x27e>
 8006506:	2302      	movs	r3, #2
 8006508:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800650c:	e069      	b.n	80065e2 <UART_SetConfig+0x27e>
 800650e:	2304      	movs	r3, #4
 8006510:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006514:	e065      	b.n	80065e2 <UART_SetConfig+0x27e>
 8006516:	2308      	movs	r3, #8
 8006518:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800651c:	e061      	b.n	80065e2 <UART_SetConfig+0x27e>
 800651e:	2310      	movs	r3, #16
 8006520:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006524:	e05d      	b.n	80065e2 <UART_SetConfig+0x27e>
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a4b      	ldr	r2, [pc, #300]	@ (8006658 <UART_SetConfig+0x2f4>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d125      	bne.n	800657c <UART_SetConfig+0x218>
 8006530:	4b46      	ldr	r3, [pc, #280]	@ (800664c <UART_SetConfig+0x2e8>)
 8006532:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006536:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800653a:	2bc0      	cmp	r3, #192	@ 0xc0
 800653c:	d016      	beq.n	800656c <UART_SetConfig+0x208>
 800653e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006540:	d818      	bhi.n	8006574 <UART_SetConfig+0x210>
 8006542:	2b80      	cmp	r3, #128	@ 0x80
 8006544:	d00a      	beq.n	800655c <UART_SetConfig+0x1f8>
 8006546:	2b80      	cmp	r3, #128	@ 0x80
 8006548:	d814      	bhi.n	8006574 <UART_SetConfig+0x210>
 800654a:	2b00      	cmp	r3, #0
 800654c:	d002      	beq.n	8006554 <UART_SetConfig+0x1f0>
 800654e:	2b40      	cmp	r3, #64	@ 0x40
 8006550:	d008      	beq.n	8006564 <UART_SetConfig+0x200>
 8006552:	e00f      	b.n	8006574 <UART_SetConfig+0x210>
 8006554:	2300      	movs	r3, #0
 8006556:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800655a:	e042      	b.n	80065e2 <UART_SetConfig+0x27e>
 800655c:	2302      	movs	r3, #2
 800655e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006562:	e03e      	b.n	80065e2 <UART_SetConfig+0x27e>
 8006564:	2304      	movs	r3, #4
 8006566:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800656a:	e03a      	b.n	80065e2 <UART_SetConfig+0x27e>
 800656c:	2308      	movs	r3, #8
 800656e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006572:	e036      	b.n	80065e2 <UART_SetConfig+0x27e>
 8006574:	2310      	movs	r3, #16
 8006576:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800657a:	e032      	b.n	80065e2 <UART_SetConfig+0x27e>
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	4a30      	ldr	r2, [pc, #192]	@ (8006644 <UART_SetConfig+0x2e0>)
 8006582:	4293      	cmp	r3, r2
 8006584:	d12a      	bne.n	80065dc <UART_SetConfig+0x278>
 8006586:	4b31      	ldr	r3, [pc, #196]	@ (800664c <UART_SetConfig+0x2e8>)
 8006588:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800658c:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8006590:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8006594:	d01a      	beq.n	80065cc <UART_SetConfig+0x268>
 8006596:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800659a:	d81b      	bhi.n	80065d4 <UART_SetConfig+0x270>
 800659c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065a0:	d00c      	beq.n	80065bc <UART_SetConfig+0x258>
 80065a2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065a6:	d815      	bhi.n	80065d4 <UART_SetConfig+0x270>
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <UART_SetConfig+0x250>
 80065ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80065b0:	d008      	beq.n	80065c4 <UART_SetConfig+0x260>
 80065b2:	e00f      	b.n	80065d4 <UART_SetConfig+0x270>
 80065b4:	2300      	movs	r3, #0
 80065b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ba:	e012      	b.n	80065e2 <UART_SetConfig+0x27e>
 80065bc:	2302      	movs	r3, #2
 80065be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065c2:	e00e      	b.n	80065e2 <UART_SetConfig+0x27e>
 80065c4:	2304      	movs	r3, #4
 80065c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065ca:	e00a      	b.n	80065e2 <UART_SetConfig+0x27e>
 80065cc:	2308      	movs	r3, #8
 80065ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065d2:	e006      	b.n	80065e2 <UART_SetConfig+0x27e>
 80065d4:	2310      	movs	r3, #16
 80065d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80065da:	e002      	b.n	80065e2 <UART_SetConfig+0x27e>
 80065dc:	2310      	movs	r3, #16
 80065de:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	4a17      	ldr	r2, [pc, #92]	@ (8006644 <UART_SetConfig+0x2e0>)
 80065e8:	4293      	cmp	r3, r2
 80065ea:	f040 80a8 	bne.w	800673e <UART_SetConfig+0x3da>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80065ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80065f2:	2b08      	cmp	r3, #8
 80065f4:	d834      	bhi.n	8006660 <UART_SetConfig+0x2fc>
 80065f6:	a201      	add	r2, pc, #4	@ (adr r2, 80065fc <UART_SetConfig+0x298>)
 80065f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fc:	08006621 	.word	0x08006621
 8006600:	08006661 	.word	0x08006661
 8006604:	08006629 	.word	0x08006629
 8006608:	08006661 	.word	0x08006661
 800660c:	0800662f 	.word	0x0800662f
 8006610:	08006661 	.word	0x08006661
 8006614:	08006661 	.word	0x08006661
 8006618:	08006661 	.word	0x08006661
 800661c:	08006637 	.word	0x08006637
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006620:	f7fe f86a 	bl	80046f8 <HAL_RCC_GetPCLK1Freq>
 8006624:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006626:	e021      	b.n	800666c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006628:	4b0c      	ldr	r3, [pc, #48]	@ (800665c <UART_SetConfig+0x2f8>)
 800662a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800662c:	e01e      	b.n	800666c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800662e:	f7fd fff5 	bl	800461c <HAL_RCC_GetSysClockFreq>
 8006632:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006634:	e01a      	b.n	800666c <UART_SetConfig+0x308>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006636:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800663a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800663c:	e016      	b.n	800666c <UART_SetConfig+0x308>
 800663e:	bf00      	nop
 8006640:	cfff69f3 	.word	0xcfff69f3
 8006644:	40008000 	.word	0x40008000
 8006648:	40013800 	.word	0x40013800
 800664c:	40021000 	.word	0x40021000
 8006650:	40004400 	.word	0x40004400
 8006654:	40004800 	.word	0x40004800
 8006658:	40004c00 	.word	0x40004c00
 800665c:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006660:	2300      	movs	r3, #0
 8006662:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006664:	2301      	movs	r3, #1
 8006666:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800666a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800666c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800666e:	2b00      	cmp	r3, #0
 8006670:	f000 812a 	beq.w	80068c8 <UART_SetConfig+0x564>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006674:	697b      	ldr	r3, [r7, #20]
 8006676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006678:	4a9e      	ldr	r2, [pc, #632]	@ (80068f4 <UART_SetConfig+0x590>)
 800667a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800667e:	461a      	mov	r2, r3
 8006680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006682:	fbb3 f3f2 	udiv	r3, r3, r2
 8006686:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006688:	697b      	ldr	r3, [r7, #20]
 800668a:	685a      	ldr	r2, [r3, #4]
 800668c:	4613      	mov	r3, r2
 800668e:	005b      	lsls	r3, r3, #1
 8006690:	4413      	add	r3, r2
 8006692:	69ba      	ldr	r2, [r7, #24]
 8006694:	429a      	cmp	r2, r3
 8006696:	d305      	bcc.n	80066a4 <UART_SetConfig+0x340>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	685b      	ldr	r3, [r3, #4]
 800669c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800669e:	69ba      	ldr	r2, [r7, #24]
 80066a0:	429a      	cmp	r2, r3
 80066a2:	d903      	bls.n	80066ac <UART_SetConfig+0x348>
      {
        ret = HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80066aa:	e10d      	b.n	80068c8 <UART_SetConfig+0x564>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80066ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066ae:	2200      	movs	r2, #0
 80066b0:	60bb      	str	r3, [r7, #8]
 80066b2:	60fa      	str	r2, [r7, #12]
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b8:	4a8e      	ldr	r2, [pc, #568]	@ (80068f4 <UART_SetConfig+0x590>)
 80066ba:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80066be:	b29b      	uxth	r3, r3
 80066c0:	2200      	movs	r2, #0
 80066c2:	603b      	str	r3, [r7, #0]
 80066c4:	607a      	str	r2, [r7, #4]
 80066c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066ca:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80066ce:	f7f9 fda3 	bl	8000218 <__aeabi_uldivmod>
 80066d2:	4602      	mov	r2, r0
 80066d4:	460b      	mov	r3, r1
 80066d6:	4610      	mov	r0, r2
 80066d8:	4619      	mov	r1, r3
 80066da:	f04f 0200 	mov.w	r2, #0
 80066de:	f04f 0300 	mov.w	r3, #0
 80066e2:	020b      	lsls	r3, r1, #8
 80066e4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80066e8:	0202      	lsls	r2, r0, #8
 80066ea:	6979      	ldr	r1, [r7, #20]
 80066ec:	6849      	ldr	r1, [r1, #4]
 80066ee:	0849      	lsrs	r1, r1, #1
 80066f0:	2000      	movs	r0, #0
 80066f2:	460c      	mov	r4, r1
 80066f4:	4605      	mov	r5, r0
 80066f6:	eb12 0804 	adds.w	r8, r2, r4
 80066fa:	eb43 0905 	adc.w	r9, r3, r5
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	685b      	ldr	r3, [r3, #4]
 8006702:	2200      	movs	r2, #0
 8006704:	469a      	mov	sl, r3
 8006706:	4693      	mov	fp, r2
 8006708:	4652      	mov	r2, sl
 800670a:	465b      	mov	r3, fp
 800670c:	4640      	mov	r0, r8
 800670e:	4649      	mov	r1, r9
 8006710:	f7f9 fd82 	bl	8000218 <__aeabi_uldivmod>
 8006714:	4602      	mov	r2, r0
 8006716:	460b      	mov	r3, r1
 8006718:	4613      	mov	r3, r2
 800671a:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800671c:	6a3b      	ldr	r3, [r7, #32]
 800671e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006722:	d308      	bcc.n	8006736 <UART_SetConfig+0x3d2>
 8006724:	6a3b      	ldr	r3, [r7, #32]
 8006726:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800672a:	d204      	bcs.n	8006736 <UART_SetConfig+0x3d2>
        {
          huart->Instance->BRR = usartdiv;
 800672c:	697b      	ldr	r3, [r7, #20]
 800672e:	681b      	ldr	r3, [r3, #0]
 8006730:	6a3a      	ldr	r2, [r7, #32]
 8006732:	60da      	str	r2, [r3, #12]
 8006734:	e0c8      	b.n	80068c8 <UART_SetConfig+0x564>
        }
        else
        {
          ret = HAL_ERROR;
 8006736:	2301      	movs	r3, #1
 8006738:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800673c:	e0c4      	b.n	80068c8 <UART_SetConfig+0x564>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800673e:	697b      	ldr	r3, [r7, #20]
 8006740:	69db      	ldr	r3, [r3, #28]
 8006742:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006746:	d167      	bne.n	8006818 <UART_SetConfig+0x4b4>
  {
    switch (clocksource)
 8006748:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800674c:	2b08      	cmp	r3, #8
 800674e:	d828      	bhi.n	80067a2 <UART_SetConfig+0x43e>
 8006750:	a201      	add	r2, pc, #4	@ (adr r2, 8006758 <UART_SetConfig+0x3f4>)
 8006752:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006756:	bf00      	nop
 8006758:	0800677d 	.word	0x0800677d
 800675c:	08006785 	.word	0x08006785
 8006760:	0800678d 	.word	0x0800678d
 8006764:	080067a3 	.word	0x080067a3
 8006768:	08006793 	.word	0x08006793
 800676c:	080067a3 	.word	0x080067a3
 8006770:	080067a3 	.word	0x080067a3
 8006774:	080067a3 	.word	0x080067a3
 8006778:	0800679b 	.word	0x0800679b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800677c:	f7fd ffbc 	bl	80046f8 <HAL_RCC_GetPCLK1Freq>
 8006780:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006782:	e014      	b.n	80067ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006784:	f7fd ffce 	bl	8004724 <HAL_RCC_GetPCLK2Freq>
 8006788:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800678a:	e010      	b.n	80067ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800678c:	4b5a      	ldr	r3, [pc, #360]	@ (80068f8 <UART_SetConfig+0x594>)
 800678e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006790:	e00d      	b.n	80067ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006792:	f7fd ff43 	bl	800461c <HAL_RCC_GetSysClockFreq>
 8006796:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006798:	e009      	b.n	80067ae <UART_SetConfig+0x44a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800679a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800679e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80067a0:	e005      	b.n	80067ae <UART_SetConfig+0x44a>
      default:
        pclk = 0U;
 80067a2:	2300      	movs	r3, #0
 80067a4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80067a6:	2301      	movs	r3, #1
 80067a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80067ac:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80067ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067b0:	2b00      	cmp	r3, #0
 80067b2:	f000 8089 	beq.w	80068c8 <UART_SetConfig+0x564>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80067b6:	697b      	ldr	r3, [r7, #20]
 80067b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ba:	4a4e      	ldr	r2, [pc, #312]	@ (80068f4 <UART_SetConfig+0x590>)
 80067bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80067c0:	461a      	mov	r2, r3
 80067c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80067c4:	fbb3 f3f2 	udiv	r3, r3, r2
 80067c8:	005a      	lsls	r2, r3, #1
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	685b      	ldr	r3, [r3, #4]
 80067ce:	085b      	lsrs	r3, r3, #1
 80067d0:	441a      	add	r2, r3
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	685b      	ldr	r3, [r3, #4]
 80067d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80067da:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80067dc:	6a3b      	ldr	r3, [r7, #32]
 80067de:	2b0f      	cmp	r3, #15
 80067e0:	d916      	bls.n	8006810 <UART_SetConfig+0x4ac>
 80067e2:	6a3b      	ldr	r3, [r7, #32]
 80067e4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80067e8:	d212      	bcs.n	8006810 <UART_SetConfig+0x4ac>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80067ea:	6a3b      	ldr	r3, [r7, #32]
 80067ec:	b29b      	uxth	r3, r3
 80067ee:	f023 030f 	bic.w	r3, r3, #15
 80067f2:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80067f4:	6a3b      	ldr	r3, [r7, #32]
 80067f6:	085b      	lsrs	r3, r3, #1
 80067f8:	b29b      	uxth	r3, r3
 80067fa:	f003 0307 	and.w	r3, r3, #7
 80067fe:	b29a      	uxth	r2, r3
 8006800:	8bfb      	ldrh	r3, [r7, #30]
 8006802:	4313      	orrs	r3, r2
 8006804:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	8bfa      	ldrh	r2, [r7, #30]
 800680c:	60da      	str	r2, [r3, #12]
 800680e:	e05b      	b.n	80068c8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 8006810:	2301      	movs	r3, #1
 8006812:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006816:	e057      	b.n	80068c8 <UART_SetConfig+0x564>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006818:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800681c:	2b08      	cmp	r3, #8
 800681e:	d828      	bhi.n	8006872 <UART_SetConfig+0x50e>
 8006820:	a201      	add	r2, pc, #4	@ (adr r2, 8006828 <UART_SetConfig+0x4c4>)
 8006822:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006826:	bf00      	nop
 8006828:	0800684d 	.word	0x0800684d
 800682c:	08006855 	.word	0x08006855
 8006830:	0800685d 	.word	0x0800685d
 8006834:	08006873 	.word	0x08006873
 8006838:	08006863 	.word	0x08006863
 800683c:	08006873 	.word	0x08006873
 8006840:	08006873 	.word	0x08006873
 8006844:	08006873 	.word	0x08006873
 8006848:	0800686b 	.word	0x0800686b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800684c:	f7fd ff54 	bl	80046f8 <HAL_RCC_GetPCLK1Freq>
 8006850:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006852:	e014      	b.n	800687e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006854:	f7fd ff66 	bl	8004724 <HAL_RCC_GetPCLK2Freq>
 8006858:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800685a:	e010      	b.n	800687e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800685c:	4b26      	ldr	r3, [pc, #152]	@ (80068f8 <UART_SetConfig+0x594>)
 800685e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006860:	e00d      	b.n	800687e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006862:	f7fd fedb 	bl	800461c <HAL_RCC_GetSysClockFreq>
 8006866:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006868:	e009      	b.n	800687e <UART_SetConfig+0x51a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800686a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800686e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006870:	e005      	b.n	800687e <UART_SetConfig+0x51a>
      default:
        pclk = 0U;
 8006872:	2300      	movs	r3, #0
 8006874:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006876:	2301      	movs	r3, #1
 8006878:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800687c:	bf00      	nop
    }

    if (pclk != 0U)
 800687e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006880:	2b00      	cmp	r3, #0
 8006882:	d021      	beq.n	80068c8 <UART_SetConfig+0x564>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006884:	697b      	ldr	r3, [r7, #20]
 8006886:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006888:	4a1a      	ldr	r2, [pc, #104]	@ (80068f4 <UART_SetConfig+0x590>)
 800688a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800688e:	461a      	mov	r2, r3
 8006890:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006892:	fbb3 f2f2 	udiv	r2, r3, r2
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	685b      	ldr	r3, [r3, #4]
 800689a:	085b      	lsrs	r3, r3, #1
 800689c:	441a      	add	r2, r3
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	685b      	ldr	r3, [r3, #4]
 80068a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80068a6:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80068a8:	6a3b      	ldr	r3, [r7, #32]
 80068aa:	2b0f      	cmp	r3, #15
 80068ac:	d909      	bls.n	80068c2 <UART_SetConfig+0x55e>
 80068ae:	6a3b      	ldr	r3, [r7, #32]
 80068b0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80068b4:	d205      	bcs.n	80068c2 <UART_SetConfig+0x55e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80068b6:	6a3b      	ldr	r3, [r7, #32]
 80068b8:	b29a      	uxth	r2, r3
 80068ba:	697b      	ldr	r3, [r7, #20]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	60da      	str	r2, [r3, #12]
 80068c0:	e002      	b.n	80068c8 <UART_SetConfig+0x564>
      }
      else
      {
        ret = HAL_ERROR;
 80068c2:	2301      	movs	r3, #1
 80068c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80068c8:	697b      	ldr	r3, [r7, #20]
 80068ca:	2201      	movs	r2, #1
 80068cc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80068d0:	697b      	ldr	r3, [r7, #20]
 80068d2:	2201      	movs	r2, #1
 80068d4:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80068d8:	697b      	ldr	r3, [r7, #20]
 80068da:	2200      	movs	r2, #0
 80068dc:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 80068de:	697b      	ldr	r3, [r7, #20]
 80068e0:	2200      	movs	r2, #0
 80068e2:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 80068e4:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 80068e8:	4618      	mov	r0, r3
 80068ea:	3730      	adds	r7, #48	@ 0x30
 80068ec:	46bd      	mov	sp, r7
 80068ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80068f2:	bf00      	nop
 80068f4:	08006fc8 	.word	0x08006fc8
 80068f8:	00f42400 	.word	0x00f42400

080068fc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80068fc:	b480      	push	{r7}
 80068fe:	b083      	sub	sp, #12
 8006900:	af00      	add	r7, sp, #0
 8006902:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006904:	687b      	ldr	r3, [r7, #4]
 8006906:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006908:	f003 0308 	and.w	r3, r3, #8
 800690c:	2b00      	cmp	r3, #0
 800690e:	d00a      	beq.n	8006926 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	430a      	orrs	r2, r1
 8006924:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800692a:	f003 0301 	and.w	r3, r3, #1
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00a      	beq.n	8006948 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	430a      	orrs	r2, r1
 8006946:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800694c:	f003 0302 	and.w	r3, r3, #2
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00a      	beq.n	800696a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	685b      	ldr	r3, [r3, #4]
 800695a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	430a      	orrs	r2, r1
 8006968:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800696e:	f003 0304 	and.w	r3, r3, #4
 8006972:	2b00      	cmp	r3, #0
 8006974:	d00a      	beq.n	800698c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	430a      	orrs	r2, r1
 800698a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006990:	f003 0310 	and.w	r3, r3, #16
 8006994:	2b00      	cmp	r3, #0
 8006996:	d00a      	beq.n	80069ae <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	681b      	ldr	r3, [r3, #0]
 800699c:	689b      	ldr	r3, [r3, #8]
 800699e:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	430a      	orrs	r2, r1
 80069ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069b2:	f003 0320 	and.w	r3, r3, #32
 80069b6:	2b00      	cmp	r3, #0
 80069b8:	d00a      	beq.n	80069d0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	689b      	ldr	r3, [r3, #8]
 80069c0:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	681b      	ldr	r3, [r3, #0]
 80069cc:	430a      	orrs	r2, r1
 80069ce:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80069d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d01a      	beq.n	8006a12 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	681b      	ldr	r3, [r3, #0]
 80069e0:	685b      	ldr	r3, [r3, #4]
 80069e2:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80069ea:	687b      	ldr	r3, [r7, #4]
 80069ec:	681b      	ldr	r3, [r3, #0]
 80069ee:	430a      	orrs	r2, r1
 80069f0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80069f6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80069fa:	d10a      	bne.n	8006a12 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80069fc:	687b      	ldr	r3, [r7, #4]
 80069fe:	681b      	ldr	r3, [r3, #0]
 8006a00:	685b      	ldr	r3, [r3, #4]
 8006a02:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	430a      	orrs	r2, r1
 8006a10:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a16:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d00a      	beq.n	8006a34 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	430a      	orrs	r2, r1
 8006a32:	605a      	str	r2, [r3, #4]
  }
}
 8006a34:	bf00      	nop
 8006a36:	370c      	adds	r7, #12
 8006a38:	46bd      	mov	sp, r7
 8006a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3e:	4770      	bx	lr

08006a40 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b098      	sub	sp, #96	@ 0x60
 8006a44:	af02      	add	r7, sp, #8
 8006a46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006a50:	f7fa ffac 	bl	80019ac <HAL_GetTick>
 8006a54:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 0308 	and.w	r3, r3, #8
 8006a60:	2b08      	cmp	r3, #8
 8006a62:	d12f      	bne.n	8006ac4 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006a64:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006a68:	9300      	str	r3, [sp, #0]
 8006a6a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006a6c:	2200      	movs	r2, #0
 8006a6e:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 f88e 	bl	8006b94 <UART_WaitOnFlagUntilTimeout>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d022      	beq.n	8006ac4 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	681b      	ldr	r3, [r3, #0]
 8006a82:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006a86:	e853 3f00 	ldrex	r3, [r3]
 8006a8a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006a8c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006a8e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a92:	653b      	str	r3, [r7, #80]	@ 0x50
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	461a      	mov	r2, r3
 8006a9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006a9c:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a9e:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aa0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006aa2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006aa4:	e841 2300 	strex	r3, r2, [r1]
 8006aa8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006aaa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006aac:	2b00      	cmp	r3, #0
 8006aae:	d1e6      	bne.n	8006a7e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	2220      	movs	r2, #32
 8006ab4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	2200      	movs	r2, #0
 8006abc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ac0:	2303      	movs	r3, #3
 8006ac2:	e063      	b.n	8006b8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	681b      	ldr	r3, [r3, #0]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	f003 0304 	and.w	r3, r3, #4
 8006ace:	2b04      	cmp	r3, #4
 8006ad0:	d149      	bne.n	8006b66 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006ad2:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006ad6:	9300      	str	r3, [sp, #0]
 8006ad8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006ada:	2200      	movs	r2, #0
 8006adc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006ae0:	6878      	ldr	r0, [r7, #4]
 8006ae2:	f000 f857 	bl	8006b94 <UART_WaitOnFlagUntilTimeout>
 8006ae6:	4603      	mov	r3, r0
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d03c      	beq.n	8006b66 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006af4:	e853 3f00 	ldrex	r3, [r3]
 8006af8:	623b      	str	r3, [r7, #32]
   return(result);
 8006afa:	6a3b      	ldr	r3, [r7, #32]
 8006afc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006b00:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	461a      	mov	r2, r3
 8006b08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006b0a:	633b      	str	r3, [r7, #48]	@ 0x30
 8006b0c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006b10:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e6      	bne.n	8006aec <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3308      	adds	r3, #8
 8006b24:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	60fb      	str	r3, [r7, #12]
   return(result);
 8006b2e:	68fb      	ldr	r3, [r7, #12]
 8006b30:	f023 0301 	bic.w	r3, r3, #1
 8006b34:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	3308      	adds	r3, #8
 8006b3c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006b3e:	61fa      	str	r2, [r7, #28]
 8006b40:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b42:	69b9      	ldr	r1, [r7, #24]
 8006b44:	69fa      	ldr	r2, [r7, #28]
 8006b46:	e841 2300 	strex	r3, r2, [r1]
 8006b4a:	617b      	str	r3, [r7, #20]
   return(result);
 8006b4c:	697b      	ldr	r3, [r7, #20]
 8006b4e:	2b00      	cmp	r3, #0
 8006b50:	d1e5      	bne.n	8006b1e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2220      	movs	r2, #32
 8006b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006b62:	2303      	movs	r3, #3
 8006b64:	e012      	b.n	8006b8c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	2220      	movs	r2, #32
 8006b6a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	2220      	movs	r2, #32
 8006b72:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	2200      	movs	r2, #0
 8006b7a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	2200      	movs	r2, #0
 8006b80:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	2200      	movs	r2, #0
 8006b86:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006b8a:	2300      	movs	r3, #0
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3758      	adds	r7, #88	@ 0x58
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}

08006b94 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b084      	sub	sp, #16
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	60f8      	str	r0, [r7, #12]
 8006b9c:	60b9      	str	r1, [r7, #8]
 8006b9e:	603b      	str	r3, [r7, #0]
 8006ba0:	4613      	mov	r3, r2
 8006ba2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006ba4:	e04f      	b.n	8006c46 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006ba6:	69bb      	ldr	r3, [r7, #24]
 8006ba8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bac:	d04b      	beq.n	8006c46 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006bae:	f7fa fefd 	bl	80019ac <HAL_GetTick>
 8006bb2:	4602      	mov	r2, r0
 8006bb4:	683b      	ldr	r3, [r7, #0]
 8006bb6:	1ad3      	subs	r3, r2, r3
 8006bb8:	69ba      	ldr	r2, [r7, #24]
 8006bba:	429a      	cmp	r2, r3
 8006bbc:	d302      	bcc.n	8006bc4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006bbe:	69bb      	ldr	r3, [r7, #24]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d101      	bne.n	8006bc8 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006bc4:	2303      	movs	r3, #3
 8006bc6:	e04e      	b.n	8006c66 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006bc8:	68fb      	ldr	r3, [r7, #12]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	f003 0304 	and.w	r3, r3, #4
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d037      	beq.n	8006c46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bd6:	68bb      	ldr	r3, [r7, #8]
 8006bd8:	2b80      	cmp	r3, #128	@ 0x80
 8006bda:	d034      	beq.n	8006c46 <UART_WaitOnFlagUntilTimeout+0xb2>
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2b40      	cmp	r3, #64	@ 0x40
 8006be0:	d031      	beq.n	8006c46 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	69db      	ldr	r3, [r3, #28]
 8006be8:	f003 0308 	and.w	r3, r3, #8
 8006bec:	2b08      	cmp	r3, #8
 8006bee:	d110      	bne.n	8006c12 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	2208      	movs	r2, #8
 8006bf6:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006bf8:	68f8      	ldr	r0, [r7, #12]
 8006bfa:	f000 f838 	bl	8006c6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	2208      	movs	r2, #8
 8006c02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	2200      	movs	r2, #0
 8006c0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	e029      	b.n	8006c66 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c12:	68fb      	ldr	r3, [r7, #12]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	69db      	ldr	r3, [r3, #28]
 8006c18:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c1c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c20:	d111      	bne.n	8006c46 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006c2a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006c2c:	68f8      	ldr	r0, [r7, #12]
 8006c2e:	f000 f81e 	bl	8006c6e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c32:	68fb      	ldr	r3, [r7, #12]
 8006c34:	2220      	movs	r2, #32
 8006c36:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	2200      	movs	r2, #0
 8006c3e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006c42:	2303      	movs	r3, #3
 8006c44:	e00f      	b.n	8006c66 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c46:	68fb      	ldr	r3, [r7, #12]
 8006c48:	681b      	ldr	r3, [r3, #0]
 8006c4a:	69da      	ldr	r2, [r3, #28]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	4013      	ands	r3, r2
 8006c50:	68ba      	ldr	r2, [r7, #8]
 8006c52:	429a      	cmp	r2, r3
 8006c54:	bf0c      	ite	eq
 8006c56:	2301      	moveq	r3, #1
 8006c58:	2300      	movne	r3, #0
 8006c5a:	b2db      	uxtb	r3, r3
 8006c5c:	461a      	mov	r2, r3
 8006c5e:	79fb      	ldrb	r3, [r7, #7]
 8006c60:	429a      	cmp	r2, r3
 8006c62:	d0a0      	beq.n	8006ba6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006c64:	2300      	movs	r3, #0
}
 8006c66:	4618      	mov	r0, r3
 8006c68:	3710      	adds	r7, #16
 8006c6a:	46bd      	mov	sp, r7
 8006c6c:	bd80      	pop	{r7, pc}

08006c6e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006c6e:	b480      	push	{r7}
 8006c70:	b095      	sub	sp, #84	@ 0x54
 8006c72:	af00      	add	r7, sp, #0
 8006c74:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006c7e:	e853 3f00 	ldrex	r3, [r3]
 8006c82:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006c84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006c86:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	461a      	mov	r2, r3
 8006c92:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006c94:	643b      	str	r3, [r7, #64]	@ 0x40
 8006c96:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c98:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8006c9a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8006c9c:	e841 2300 	strex	r3, r2, [r1]
 8006ca0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8006ca2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ca4:	2b00      	cmp	r3, #0
 8006ca6:	d1e6      	bne.n	8006c76 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	3308      	adds	r3, #8
 8006cae:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cb0:	6a3b      	ldr	r3, [r7, #32]
 8006cb2:	e853 3f00 	ldrex	r3, [r3]
 8006cb6:	61fb      	str	r3, [r7, #28]
   return(result);
 8006cb8:	69fb      	ldr	r3, [r7, #28]
 8006cba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006cbe:	f023 0301 	bic.w	r3, r3, #1
 8006cc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	3308      	adds	r3, #8
 8006cca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ccc:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006cce:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cd0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8006cd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006cd4:	e841 2300 	strex	r3, r2, [r1]
 8006cd8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8006cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	d1e3      	bne.n	8006ca8 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8006ce4:	2b01      	cmp	r3, #1
 8006ce6:	d118      	bne.n	8006d1a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	681b      	ldr	r3, [r3, #0]
 8006cec:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	e853 3f00 	ldrex	r3, [r3]
 8006cf4:	60bb      	str	r3, [r7, #8]
   return(result);
 8006cf6:	68bb      	ldr	r3, [r7, #8]
 8006cf8:	f023 0310 	bic.w	r3, r3, #16
 8006cfc:	647b      	str	r3, [r7, #68]	@ 0x44
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	461a      	mov	r2, r3
 8006d04:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006d06:	61bb      	str	r3, [r7, #24]
 8006d08:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d0a:	6979      	ldr	r1, [r7, #20]
 8006d0c:	69ba      	ldr	r2, [r7, #24]
 8006d0e:	e841 2300 	strex	r3, r2, [r1]
 8006d12:	613b      	str	r3, [r7, #16]
   return(result);
 8006d14:	693b      	ldr	r3, [r7, #16]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1e6      	bne.n	8006ce8 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	2220      	movs	r2, #32
 8006d1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2200      	movs	r2, #0
 8006d26:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8006d2e:	bf00      	nop
 8006d30:	3754      	adds	r7, #84	@ 0x54
 8006d32:	46bd      	mov	sp, r7
 8006d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d38:	4770      	bx	lr

08006d3a <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8006d3a:	b480      	push	{r7}
 8006d3c:	b085      	sub	sp, #20
 8006d3e:	af00      	add	r7, sp, #0
 8006d40:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006d48:	2b01      	cmp	r3, #1
 8006d4a:	d101      	bne.n	8006d50 <HAL_UARTEx_DisableFifoMode+0x16>
 8006d4c:	2302      	movs	r3, #2
 8006d4e:	e027      	b.n	8006da0 <HAL_UARTEx_DisableFifoMode+0x66>
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2224      	movs	r2, #36	@ 0x24
 8006d5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006d68:	687b      	ldr	r3, [r7, #4]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	681a      	ldr	r2, [r3, #0]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	f022 0201 	bic.w	r2, r2, #1
 8006d76:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8006d7e:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	2200      	movs	r2, #0
 8006d84:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006d8e:	687b      	ldr	r3, [r7, #4]
 8006d90:	2220      	movs	r2, #32
 8006d92:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	2200      	movs	r2, #0
 8006d9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006d9e:	2300      	movs	r3, #0
}
 8006da0:	4618      	mov	r0, r3
 8006da2:	3714      	adds	r7, #20
 8006da4:	46bd      	mov	sp, r7
 8006da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006daa:	4770      	bx	lr

08006dac <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006dbc:	2b01      	cmp	r3, #1
 8006dbe:	d101      	bne.n	8006dc4 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8006dc0:	2302      	movs	r3, #2
 8006dc2:	e02d      	b.n	8006e20 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	2201      	movs	r2, #1
 8006dc8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2224      	movs	r2, #36	@ 0x24
 8006dd0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f022 0201 	bic.w	r2, r2, #1
 8006dea:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	683a      	ldr	r2, [r7, #0]
 8006dfc:	430a      	orrs	r2, r1
 8006dfe:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e00:	6878      	ldr	r0, [r7, #4]
 8006e02:	f000 f84f 	bl	8006ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	68fa      	ldr	r2, [r7, #12]
 8006e0c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2220      	movs	r2, #32
 8006e12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	2200      	movs	r2, #0
 8006e1a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e1e:	2300      	movs	r3, #0
}
 8006e20:	4618      	mov	r0, r3
 8006e22:	3710      	adds	r7, #16
 8006e24:	46bd      	mov	sp, r7
 8006e26:	bd80      	pop	{r7, pc}

08006e28 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b084      	sub	sp, #16
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d101      	bne.n	8006e40 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8006e3c:	2302      	movs	r3, #2
 8006e3e:	e02d      	b.n	8006e9c <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	2224      	movs	r2, #36	@ 0x24
 8006e4c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	681b      	ldr	r3, [r3, #0]
 8006e5c:	681a      	ldr	r2, [r3, #0]
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	f022 0201 	bic.w	r2, r2, #1
 8006e66:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	689b      	ldr	r3, [r3, #8]
 8006e6e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	683a      	ldr	r2, [r7, #0]
 8006e78:	430a      	orrs	r2, r1
 8006e7a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8006e7c:	6878      	ldr	r0, [r7, #4]
 8006e7e:	f000 f811 	bl	8006ea4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8006e82:	687b      	ldr	r3, [r7, #4]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	68fa      	ldr	r2, [r7, #12]
 8006e88:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8006e8a:	687b      	ldr	r3, [r7, #4]
 8006e8c:	2220      	movs	r2, #32
 8006e8e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2200      	movs	r2, #0
 8006e96:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006e9a:	2300      	movs	r3, #0
}
 8006e9c:	4618      	mov	r0, r3
 8006e9e:	3710      	adds	r7, #16
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	bd80      	pop	{r7, pc}

08006ea4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8006ea4:	b480      	push	{r7}
 8006ea6:	b085      	sub	sp, #20
 8006ea8:	af00      	add	r7, sp, #0
 8006eaa:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d108      	bne.n	8006ec6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	2201      	movs	r2, #1
 8006eb8:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	2201      	movs	r2, #1
 8006ec0:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8006ec4:	e031      	b.n	8006f2a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8006ec6:	2308      	movs	r3, #8
 8006ec8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8006eca:	2308      	movs	r3, #8
 8006ecc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	689b      	ldr	r3, [r3, #8]
 8006ed4:	0e5b      	lsrs	r3, r3, #25
 8006ed6:	b2db      	uxtb	r3, r3
 8006ed8:	f003 0307 	and.w	r3, r3, #7
 8006edc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	689b      	ldr	r3, [r3, #8]
 8006ee4:	0f5b      	lsrs	r3, r3, #29
 8006ee6:	b2db      	uxtb	r3, r3
 8006ee8:	f003 0307 	and.w	r3, r3, #7
 8006eec:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006eee:	7bbb      	ldrb	r3, [r7, #14]
 8006ef0:	7b3a      	ldrb	r2, [r7, #12]
 8006ef2:	4911      	ldr	r1, [pc, #68]	@ (8006f38 <UARTEx_SetNbDataToProcess+0x94>)
 8006ef4:	5c8a      	ldrb	r2, [r1, r2]
 8006ef6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8006efa:	7b3a      	ldrb	r2, [r7, #12]
 8006efc:	490f      	ldr	r1, [pc, #60]	@ (8006f3c <UARTEx_SetNbDataToProcess+0x98>)
 8006efe:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8006f00:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f04:	b29a      	uxth	r2, r3
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f0c:	7bfb      	ldrb	r3, [r7, #15]
 8006f0e:	7b7a      	ldrb	r2, [r7, #13]
 8006f10:	4909      	ldr	r1, [pc, #36]	@ (8006f38 <UARTEx_SetNbDataToProcess+0x94>)
 8006f12:	5c8a      	ldrb	r2, [r1, r2]
 8006f14:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8006f18:	7b7a      	ldrb	r2, [r7, #13]
 8006f1a:	4908      	ldr	r1, [pc, #32]	@ (8006f3c <UARTEx_SetNbDataToProcess+0x98>)
 8006f1c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8006f1e:	fb93 f3f2 	sdiv	r3, r3, r2
 8006f22:	b29a      	uxth	r2, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8006f2a:	bf00      	nop
 8006f2c:	3714      	adds	r7, #20
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	08006fe0 	.word	0x08006fe0
 8006f3c:	08006fe8 	.word	0x08006fe8

08006f40 <memset>:
 8006f40:	4402      	add	r2, r0
 8006f42:	4603      	mov	r3, r0
 8006f44:	4293      	cmp	r3, r2
 8006f46:	d100      	bne.n	8006f4a <memset+0xa>
 8006f48:	4770      	bx	lr
 8006f4a:	f803 1b01 	strb.w	r1, [r3], #1
 8006f4e:	e7f9      	b.n	8006f44 <memset+0x4>

08006f50 <__libc_init_array>:
 8006f50:	b570      	push	{r4, r5, r6, lr}
 8006f52:	4d0d      	ldr	r5, [pc, #52]	@ (8006f88 <__libc_init_array+0x38>)
 8006f54:	4c0d      	ldr	r4, [pc, #52]	@ (8006f8c <__libc_init_array+0x3c>)
 8006f56:	1b64      	subs	r4, r4, r5
 8006f58:	10a4      	asrs	r4, r4, #2
 8006f5a:	2600      	movs	r6, #0
 8006f5c:	42a6      	cmp	r6, r4
 8006f5e:	d109      	bne.n	8006f74 <__libc_init_array+0x24>
 8006f60:	4d0b      	ldr	r5, [pc, #44]	@ (8006f90 <__libc_init_array+0x40>)
 8006f62:	4c0c      	ldr	r4, [pc, #48]	@ (8006f94 <__libc_init_array+0x44>)
 8006f64:	f000 f818 	bl	8006f98 <_init>
 8006f68:	1b64      	subs	r4, r4, r5
 8006f6a:	10a4      	asrs	r4, r4, #2
 8006f6c:	2600      	movs	r6, #0
 8006f6e:	42a6      	cmp	r6, r4
 8006f70:	d105      	bne.n	8006f7e <__libc_init_array+0x2e>
 8006f72:	bd70      	pop	{r4, r5, r6, pc}
 8006f74:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f78:	4798      	blx	r3
 8006f7a:	3601      	adds	r6, #1
 8006f7c:	e7ee      	b.n	8006f5c <__libc_init_array+0xc>
 8006f7e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f82:	4798      	blx	r3
 8006f84:	3601      	adds	r6, #1
 8006f86:	e7f2      	b.n	8006f6e <__libc_init_array+0x1e>
 8006f88:	08006ff8 	.word	0x08006ff8
 8006f8c:	08006ff8 	.word	0x08006ff8
 8006f90:	08006ff8 	.word	0x08006ff8
 8006f94:	08006ffc 	.word	0x08006ffc

08006f98 <_init>:
 8006f98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f9a:	bf00      	nop
 8006f9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006f9e:	bc08      	pop	{r3}
 8006fa0:	469e      	mov	lr, r3
 8006fa2:	4770      	bx	lr

08006fa4 <_fini>:
 8006fa4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006fa6:	bf00      	nop
 8006fa8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006faa:	bc08      	pop	{r3}
 8006fac:	469e      	mov	lr, r3
 8006fae:	4770      	bx	lr
